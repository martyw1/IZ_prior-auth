{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# MedAuth Pro - Prior Authorization Management System\n\n## Overview\nMedAuth Pro is a comprehensive healthcare prior authorization management system designed to streamline patient information, insurance verification, and authorization requests. It is a full-stack web application built with a React frontend and Express.js backend, focusing on HIPAA compliance and security. The project aims to improve authorization processing efficiency, approval rates, and staff productivity by offering features such as robust authentication, patient management with CSV import, a 10-step prior authorization workflow, external connections with major insurance providers, secure document management, and a comprehensive audit trail system.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Styling**: Tailwind CSS with shadcn/ui components\n- **State Management**: React Query (@tanstack/react-query) for server state\n- **Routing**: Wouter for client-side routing\n- **Build Tool**: Vite for development and production builds\n- **Form Handling**: React Hook Form with Zod validation\n- **UI/UX Decisions**: Modern, responsive design with a healthcare-specific color scheme, accessible components using Radix UI primitives, and a mobile-responsive layout.\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: JWT-based authentication with bcrypt for password hashing and role-based access control (admin, doctor, staff).\n- **Session Management**: Express sessions with PostgreSQL store.\n- **Security**: Built-in encryption middleware for PHI (Protected Health Information), comprehensive audit logging, input sanitization and validation, and secure session management.\n\n### Technical Implementations\n- **Authentication System**: JWT token-based authentication with role-based access control and session management with automatic token refresh.\n- **Database Schema**: Includes tables for Users, Patients (with PHI encryption), Insurance Providers, Patient Insurance, Prior Authorizations, Documents, and Audit Logs.\n- **Patient Management**: Supports creating, editing, searching, and linking patient records with insurance information, including CSV import with duplicate detection.\n- **Prior Authorization Workflow**: A 10-step process supporting multiple CPT and ICD-10 codes, status tracking (pending, approved, denied), appeals, and package generation (PDF, email, JSON).\n- **External Connections**: System for integrating with insurance providers and clearinghouses via OAuth2 and API key authentication, supporting various API methods (GET, POST, PUT, DELETE, PATCH). Includes preset configurations for major systems like Availity, Change Healthcare, Relay Health, Aetna Provider API, and Anthem Provider Portal.\n- **Document Management**: Secure upload, storage, and sharing of authorization documents with file type validation and version control.\n- **Audit Trail System**: Comprehensive HIPAA-compliant logging of all data operations (create, read, update, delete) across all entities, including detailed metadata and before/after value tracking for updates.\n- **ModMed EMA Cloud Integration**: Secure, cloud-based integration with ModMed's Electronic Medical Assistant system using OAuth2 and HL7 FHIR R4 compliance for real-time patient data sync and bulk import.\n- **Medical Code Integration**: Comprehensive ICD-10 diagnosis codes and CPT procedure codes are integrated, supporting multi-code authorizations.\n- **System Configuration**: Admin-only feature for customizing organization name and other system settings.\n\n### Project Structure\n- `client/`: React frontend application\n- `server/`: Express.js backend API\n- `shared/`: Shared TypeScript types and database schema\n- `migrations/`: Database migration files\n\n## External Dependencies\n\n### Core Dependencies\n- **Database**: Neon PostgreSQL (for scalable cloud database)\n- **UI Components**: Radix UI (for accessible component primitives), shadcn/ui (for pre-built components)\n- **Styling**: Tailwind CSS\n- **Forms**: React Hook Form with Zod validation\n- **Icons**: Lucide React\n\n### Development Dependencies\n- **TypeScript**\n- **Vite**\n- **ESBuild**\n- **Drizzle Kit**\n\n### Security Dependencies\n- **bcryptjs**: Password hashing\n- **jsonwebtoken**: JWT token generation and verification\n- **connect-pg-simple**: PostgreSQL session store\n- **crypto**: Node.js encryption utilities","size_bytes":4539},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { appLogger } from \"./services/app-logger\";\n\nconst app = express();\nconst port = process.env.PORT || 5000;\n\n// Initialize app logging\nappLogger.info(\"MedAuth Pro server starting up\", { port });\n\n// Parse JSON bodies with increased limit for file uploads\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: true, limit: '50mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n      \n      // Log API requests to app event log\n      appLogger.request(`${req.method} ${path}`, `${Date.now()}`, undefined, {\n        method: req.method,\n        path,\n        statusCode: res.statusCode,\n        duration,\n        responseSize: JSON.stringify(capturedJsonResponse || {}).length\n      });\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const serverPort = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port: serverPort,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${serverPort}`);\n    appLogger.info(\"MedAuth Pro server ready\", { port: serverPort, env: app.get(\"env\") });\n  });\n})();\n","size_bytes":2756},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { authenticate, authorize, generateToken, hashPassword, comparePassword, AuthenticatedRequest } from \"./middleware/auth\";\nimport { auditService } from \"./services/audit\";\nimport { appLogger } from \"./services/app-logger\";\nimport { insuranceService } from \"./services/insurance\";\nimport { encryptPHI, decryptPHI } from \"./middleware/encryption\";\nimport { insertUserSchema, insertPatientSchema, insertPriorAuthorizationSchema, insertPatientInsuranceSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport multer from \"multer\";\nimport { registerPriorAuthWorkflowRoutes } from \"./routes/prior-auth-workflow\";\nimport priorAuthGeneratorRoutes from \"./routes/prior-auth-generator\";\nimport icd10CodesRoutes from \"./routes/icd10-codes\";\nimport insuranceRoutes from \"./routes/insurance\";\nimport modmedEmaRoutes from \"./routes/modmed-ema\";\nimport { db } from \"./db\";\nimport { sql } from \"drizzle-orm\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Initialize medical specialties data\n  await storage.seedMedicalSpecialties();\n  \n  // Initialize default users\n  await storage.seedDefaultUsers();\n  \n  // Initialize insurance providers\n  await storage.seedInsuranceProviders();\n  \n  // Initialize system configuration\n  await storage.seedSystemConfig();\n  \n  // Medical specialties routes\n  app.get(\"/api/medical-specialties\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const specialties = await storage.getMedicalSpecialties();\n      res.json(specialties);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/medical-specialties/:id\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const specialty = await storage.getMedicalSpecialty(id);\n      \n      if (!specialty) {\n        return res.status(404).json({ message: \"Specialty not found\" });\n      }\n      \n      res.json(specialty);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password are required\" });\n      }\n\n      const user = await storage.getUserByUsername(username);\n      \n      if (!user || !user.isActive) {\n        await auditService.logLogin(0, false, req.ip || '', req.get(\"User-Agent\") || '');\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const validPassword = await comparePassword(password, user.password);\n      \n      if (!validPassword) {\n        await auditService.logLogin(user.id, false, req.ip || '', req.get(\"User-Agent\") || '');\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = generateToken(user);\n      await auditService.logLogin(user.id, true, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json({\n        token,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n        },\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user) {\n        await auditService.logLogout(req.user.id, req.ip || '', req.get(\"User-Agent\") || '');\n      }\n      res.json({ message: \"Logged out successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // User management routes\n  app.post(\"/api/users\", authenticate, authorize([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      userData.password = await hashPassword(userData.password);\n      \n      const user = await storage.createUser(userData);\n      \n      await auditService.log(req.user!.id, 'USER_CREATE', 'user', user.id, {\n        newUser: user.username,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.status(201).json(user);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid user data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get all procedure codes endpoint\n  app.get(\"/api/procedure-codes\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const codes = await storage.getAllProcedureCodes();\n      res.json(codes);\n    } catch (error) {\n      appLogger.error(\"Failed to fetch procedure codes\", error as Error, { \n        userId: req.user?.id \n      });\n      res.status(500).json({ error: \"Failed to fetch procedure codes\" });\n    }\n  });\n\n  app.get(\"/api/users/me\", authenticate, async (req: AuthenticatedRequest, res) => {\n    res.json(req.user);\n  });\n\n  // Patient routes\n  app.get(\"/api/patients\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 50;\n      const offset = (page - 1) * limit;\n      \n      const [patients, totalCount] = await Promise.all([\n        storage.getPatients(limit, offset),\n        storage.getPatientsCount()\n      ]);\n      \n      const totalPages = Math.ceil(totalCount / limit);\n      \n      await auditService.log(req.user!.id, 'PATIENT_LIST_VIEW', 'patient', null, {\n        page,\n        limit,\n        totalCount,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json({ \n        patients, \n        totalCount, \n        totalPages, \n        currentPage: page,\n        hasNext: page < totalPages,\n        hasPrev: page > 1\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/patients/:id\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const patient = await storage.getPatient(parseInt(req.params.id));\n      \n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      \n      await auditService.logPatientAccess(req.user!.id, patient.id, 'PATIENT_VIEW', null, null, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(patient);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/patients\", authenticate, authorize([\"admin\", \"doctor\", \"staff\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      // Prepare patient data with proper date parsing and defaults\n      const requestData = {\n        ...req.body,\n        dateOfBirth: new Date(req.body.dateOfBirth),\n        patientId: req.body.patientId || `PAT-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`,\n        gender: req.body.gender || 'other',\n        phone: req.body.phone || '',\n        email: req.body.email || '',\n        address: req.body.address || '',\n        emergencyContact: req.body.emergencyContact || ''\n      };\n      \n      const patientData = insertPatientSchema.parse(requestData);\n      const patient = await storage.createPatient(patientData);\n      \n      await auditService.log(req.user!.id, 'PATIENT_CREATE', 'patient', patient.id, {\n        patientId: patient.patientId,\n        patientName: `${patient.firstName} ${patient.lastName}`\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      appLogger.info(\"New patient created\", { \n        userId: req.user?.id, \n        patientId: patient.id,\n        patientName: `${patient.firstName} ${patient.lastName}`\n      });\n      \n      res.status(201).json(patient);\n    } catch (error) {\n      appLogger.error(\"Failed to create patient\", { userId: req.user?.id }, error as Error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid patient data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/patients/:id\", authenticate, authorize([\"admin\", \"doctor\", \"staff\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const patientId = parseInt(req.params.id);\n      if (isNaN(patientId)) {\n        return res.status(400).json({ message: \"Invalid patient ID\" });\n      }\n\n      // Get existing patient for audit trail\n      const existingPatient = await storage.getPatient(patientId);\n      if (!existingPatient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n\n      // Create a simple validation schema for patient updates\n      const updatePatientSchema = z.object({\n        firstName: z.string().min(1).optional(),\n        lastName: z.string().min(1).optional(),\n        dateOfBirth: z.string().optional(),\n        phone: z.string().optional(),\n        email: z.string().email().optional().or(z.literal(\"\")),\n        address: z.string().optional(),\n        emergencyContact: z.string().optional(),\n        emergencyPhone: z.string().optional(),\n        gender: z.string().optional(),\n        race: z.string().optional(),\n        ethnicity: z.string().optional(),\n        city: z.string().optional(),\n        state: z.string().optional(),\n        zipCode: z.string().optional(),\n      });\n\n      const validatedData = updatePatientSchema.parse(req.body);\n      \n      // Convert dateOfBirth string to Date if provided\n      const updates: any = { ...validatedData };\n      if (updates.dateOfBirth) {\n        updates.dateOfBirth = new Date(updates.dateOfBirth);\n      }\n\n      const updatedPatient = await storage.updatePatient(patientId, updates);\n      \n      if (!updatedPatient) {\n        return res.status(404).json({ message: \"Failed to update patient\" });\n      }\n      \n      await auditService.log(req.user!.id, 'PATIENT_UPDATE', 'patient', updatedPatient.id, {\n        before: existingPatient,\n        after: updatedPatient,\n        updates: validatedData,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(updatedPatient);\n    } catch (error) {\n      console.error(\"Error updating patient:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid patient data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get single patient\n  app.get(\"/api/patients/:id\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const patientId = parseInt(req.params.id);\n      const patient = await storage.getPatient(patientId);\n      \n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      \n      await auditService.log(req.user!.id, 'PATIENT_VIEW', 'patient', patient.id, {\n        patientId: patient.patientId,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(patient);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Delete patient\n  app.delete(\"/api/patients/:id\", authenticate, authorize([\"admin\", \"doctor\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const patientId = parseInt(req.params.id);\n      \n      // Check if patient exists first\n      const existingPatient = await storage.getPatient(patientId);\n      if (!existingPatient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n\n      const deleted = await storage.deletePatient(patientId);\n      \n      if (!deleted) {\n        return res.status(500).json({ message: \"Failed to delete patient\" });\n      }\n      \n      await auditService.log(req.user!.id, 'PATIENT_DELETE', 'patient', patientId, {\n        patientId: existingPatient.patientId,\n        patientName: `${existingPatient.firstName} ${existingPatient.lastName}`,\n      }, req.ip || '', req.get(\"User-Agent\") || '', existingPatient, null);\n      \n      appLogger.info(\"Patient deleted\", { \n        userId: req.user?.id, \n        patientId,\n        patientName: `${existingPatient.firstName} ${existingPatient.lastName}`\n      });\n      \n      res.json({ message: \"Patient deleted successfully\" });\n    } catch (error) {\n      appLogger.error(\"Failed to delete patient\", { userId: req.user?.id, error: (error as Error).message });\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Test route without authentication\n  app.get(\"/api/test-simple\", async (req, res) => {\n    console.log(\"Simple test route reached successfully\");\n    res.json({ message: \"Simple test route working\" });\n  });\n\n  // Test route to verify auth works\n  app.get(\"/api/patients/delete-all-test\", authenticate, authorize([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    console.log(\"Auth test route reached successfully\");\n    res.json({ message: \"Auth test route working\", user: req.user?.username });\n  });\n\n  // Delete all patients route with a different path to avoid conflicts\n  app.delete(\"/api/patients-deleteall\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      // Manual role check\n      if (req.user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      console.log(\"DELETEALL: Starting delete operation...\");\n      \n      // Use direct SQL to delete all patients\n      const result = await db.execute(sql`DELETE FROM patients`);\n      const deletedCount = result.rowCount || 0;\n      \n      console.log(`DELETEALL: Successfully deleted ${deletedCount} patients`);\n      \n      res.json({ \n        message: \"All patients deleted successfully\", \n        deletedCount \n      });\n    } catch (error) {\n      console.error(\"DELETEALL: Error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/patients/search\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const query = req.query.q as string;\n      \n      if (!query) {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n      \n      const patients = await storage.searchPatients(query);\n      \n      await auditService.log(req.user!.id, 'PATIENT_SEARCH', 'patient', null, {\n        query,\n        resultCount: patients.length,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(patients);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Insurance routes\n  app.get(\"/api/insurance/providers\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const providers = await storage.getInsuranceProviders();\n      res.json(providers);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/insurance/verify\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { patientId, insuranceId } = req.body;\n      \n      const patient = await storage.getPatient(patientId);\n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n\n      const insurance = await storage.getPatientInsurance(patientId);\n      const targetInsurance = insurance.find(ins => ins.id === insuranceId);\n      \n      if (!targetInsurance) {\n        return res.status(404).json({ message: \"Insurance not found\" });\n      }\n\n      const provider = await storage.getInsuranceProvider(targetInsurance.insuranceProviderId);\n      if (!provider) {\n        return res.status(404).json({ message: \"Insurance provider not found\" });\n      }\n\n      const result = await insuranceService.verifyInsurance(targetInsurance, provider);\n      \n      await auditService.log(req.user!.id, 'INSURANCE_VERIFICATION', 'insurance', insuranceId, {\n        patientId,\n        providerId: provider.id,\n        result: result.isValid,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get patient insurance information\n  app.get(\"/api/patients/:id/insurance\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const patientId = parseInt(req.params.id);\n      if (isNaN(patientId)) {\n        return res.status(400).json({ error: \"Invalid patient ID\" });\n      }\n\n      const insuranceRecords = await storage.getPatientInsurance(patientId);\n      \n      // Join with insurance provider information\n      const insuranceWithProviders = await Promise.all(\n        insuranceRecords.map(async (insurance) => {\n          const provider = await storage.getInsuranceProvider(insurance.insuranceProviderId);\n          return {\n            ...insurance,\n            provider: provider\n          };\n        })\n      );\n\n      await auditService.log(req.user!.id, 'PATIENT_INSURANCE_VIEW', 'patient_insurance', patientId, {\n        patientId,\n        insuranceRecordsCount: insuranceRecords.length,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n\n      res.json(insuranceWithProviders);\n    } catch (error) {\n      console.error(\"Error fetching patient insurance:\", error);\n      res.status(500).json({ error: \"Failed to fetch patient insurance\" });\n    }\n  });\n\n  app.post(\"/api/patients/:id/insurance\", authenticate, authorize([\"admin\", \"doctor\", \"staff\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const patientId = parseInt(req.params.id);\n      const insuranceData = insertPatientInsuranceSchema.parse(req.body);\n      insuranceData.patientId = patientId;\n      \n      const insurance = await storage.createPatientInsurance(insuranceData);\n      \n      await auditService.log(req.user!.id, 'PATIENT_INSURANCE_CREATE', 'patient_insurance', insurance.id, {\n        patientId,\n        insuranceProviderId: insurance.insuranceProviderId,\n        memberId: insurance.memberId,\n        isPrimary: insurance.isPrimary,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.status(201).json(insurance);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid insurance data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Prior Authorization routes\n  app.get(\"/api/authorizations\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 50;\n      const offset = (page - 1) * limit;\n      \n      const authorizations = await storage.getPriorAuthorizations(limit, offset);\n      \n      await auditService.log(req.user!.id, 'AUTHORIZATION_LIST_VIEW', 'authorization', null, {\n        page,\n        limit,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(authorizations);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Update authorization status endpoint\n  app.patch(\"/api/authorizations/:id/status\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const authorizationId = parseInt(req.params.id);\n      const { status } = req.body;\n\n      if (!status) {\n        return res.status(400).json({ error: \"Status is required\" });\n      }\n\n      const validStatuses = [\"pending\", \"approved\", \"denied\", \"in_review\", \"appealed\", \"expired\"];\n      if (!validStatuses.includes(status)) {\n        return res.status(400).json({ error: \"Invalid status value\" });\n      }\n\n      const updated = await storage.updatePriorAuthorizationStatus(authorizationId, status);\n      \n      if (!updated) {\n        return res.status(404).json({ error: \"Authorization not found\" });\n      }\n\n      appLogger.info(\"Authorization status updated\", {\n        userId: req.user?.id,\n        authorizationId,\n        newStatus: status\n      });\n\n      res.json({ success: true, status });\n    } catch (error) {\n      appLogger.error(\"Failed to update authorization status\", { \n        userId: req.user?.id \n      }, error as Error);\n      res.status(500).json({ error: \"Failed to update status\" });\n    }\n  });\n\n  app.get(\"/api/authorizations/:id\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const authorization = await storage.getPriorAuthorization(parseInt(req.params.id));\n      \n      if (!authorization) {\n        return res.status(404).json({ message: \"Authorization not found\" });\n      }\n      \n      await auditService.logAuthorizationAccess(req.user!.id, authorization.id, 'AUTHORIZATION_VIEW', req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(authorization);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/authorizations\", authenticate, authorize([\"admin\", \"doctor\", \"staff\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      // Create minimal schema for API request\n      const createAuthSchema = z.object({\n        patientId: z.number(),\n        insuranceId: z.number(),\n        treatmentType: z.string(),\n        cptCode: z.string(),\n        icd10Code: z.string(),\n        clinicalJustification: z.string(),\n        urgentRequest: z.boolean().optional(),\n      });\n      \n      // Validate only required input fields\n      const validatedInput = createAuthSchema.parse(req.body);\n      \n      // Generate authorization ID and set all required defaults\n      const authorizationId = `AUTH-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`;\n      const authData = {\n        ...validatedInput,\n        authorizationId,\n        submittedBy: req.user!.id,\n        requestedDate: new Date(),\n        urgentRequest: validatedInput.urgentRequest || false,\n      };\n      \n      const authorization = await storage.createPriorAuthorization(authData);\n      \n      // Submit to insurance service\n      try {\n        const submission = {\n          patientId: authorization.patientId,\n          insuranceId: authorization.insuranceId,\n          treatmentType: authorization.treatmentType,\n          cptCode: authorization.cptCode,\n          icd10Code: authorization.icd10Code,\n          clinicalJustification: authorization.clinicalJustification,\n          requestedDate: authorization.requestedDate.toISOString(),\n          documents: [], // TODO: Add document references\n        };\n        \n        const response = await insuranceService.submitPriorAuthorization(submission);\n        \n        // Update authorization with response\n        await storage.updatePriorAuthorization(authorization.id, {\n          status: response.status,\n          submittedDate: new Date(),\n          ...(response.status === 'approved' && response.expirationDate && {\n            approvalDate: new Date(),\n            expirationDate: new Date(response.expirationDate),\n          }),\n          ...(response.status === 'denied' && {\n            denialReason: response.denialReason,\n          }),\n        });\n      } catch (error) {\n        console.error('Failed to submit to insurance service:', error);\n      }\n      \n      await auditService.log(req.user!.id, 'AUTHORIZATION_CREATE', 'authorization', authorization.id, {\n        authorizationId: authorization.authorizationId,\n        patientId: authorization.patientId,\n        treatmentType: authorization.treatmentType,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.status(201).json(authorization);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid authorization data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/authorizations/:id\", authenticate, authorize([\"admin\", \"doctor\", \"staff\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const authId = parseInt(req.params.id);\n      \n      // Get existing authorization for audit trail\n      const existingAuth = await storage.getPriorAuthorization(authId);\n      if (!existingAuth) {\n        return res.status(404).json({ message: \"Authorization not found\" });\n      }\n      \n      const updates = insertPriorAuthorizationSchema.partial().parse(req.body);\n      const authorization = await storage.updatePriorAuthorization(authId, updates);\n      \n      if (!authorization) {\n        return res.status(404).json({ message: \"Authorization not found\" });\n      }\n      \n      await auditService.log(req.user!.id, 'AUTHORIZATION_UPDATE', 'authorization', authorization.id, {\n        authorizationId: authorization.authorizationId,\n        changes: updates,\n        previousData: {\n          treatmentType: existingAuth.treatmentType,\n          cptCodes: existingAuth.cptCodes,\n          icd10Codes: existingAuth.icd10Codes,\n          clinicalJustification: existingAuth.clinicalJustification,\n          status: existingAuth.status,\n        },\n        newData: {\n          treatmentType: authorization.treatmentType,\n          cptCodes: authorization.cptCodes,\n          icd10Codes: authorization.icd10Codes,\n          clinicalJustification: authorization.clinicalJustification,\n          status: authorization.status,\n        },\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(authorization);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid authorization data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/authorizations/patient/:patientId\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const patientId = parseInt(req.params.patientId);\n      const authorizations = await storage.getPriorAuthorizationsByPatient(patientId);\n      \n      await auditService.log(req.user!.id, 'AUTHORIZATION_PATIENT_VIEW', 'authorization', null, {\n        patientId,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(authorizations);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/authorizations/status/:status\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const status = req.params.status;\n      const authorizations = await storage.getPriorAuthorizationsByStatus(status);\n      \n      await auditService.log(req.user!.id, 'AUTHORIZATION_STATUS_VIEW', 'authorization', null, {\n        status,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(authorizations);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Delete authorization\n  app.delete(\"/api/authorizations/:id\", authenticate, authorize([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const authId = parseInt(req.params.id);\n      \n      // Get existing authorization for audit trail\n      const existingAuth = await storage.getPriorAuthorization(authId);\n      if (!existingAuth) {\n        return res.status(404).json({ message: \"Authorization not found\" });\n      }\n      \n      const deleted = await storage.deletePriorAuthorization(authId);\n      if (!deleted) {\n        return res.status(500).json({ message: \"Failed to delete authorization\" });\n      }\n      \n      await auditService.log(req.user!.id, 'AUTHORIZATION_DELETE', 'authorization', authId, {\n        deletedAuthorization: {\n          authorizationId: existingAuth.authorizationId,\n          patientId: existingAuth.patientId,\n          treatmentType: existingAuth.treatmentType,\n          cptCodes: existingAuth.cptCodes,\n          icd10Codes: existingAuth.icd10Codes,\n          status: existingAuth.status,\n          clinicalJustification: existingAuth.clinicalJustification,\n        },\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json({ message: \"Authorization deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete authorization\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const stats = await storage.getAuthorizationStats();\n      \n      await auditService.log(req.user!.id, 'DASHBOARD_VIEW', 'dashboard', null, {}, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // External connections audit route\n  app.post(\"/api/audit/external-connection\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { action, connectionId, changes } = req.body;\n      \n      await auditService.log(req.user!.id, action, 'external_connection', connectionId || null, {\n        changes,\n        timestamp: new Date().toISOString(),\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Audit routes\n  app.get(\"/api/audit/logs\", authenticate, authorize([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 100;\n      const offset = (page - 1) * limit;\n      \n      const logs = await storage.getAuditLogs(limit, offset);\n      \n      // Log the audit view access\n      await auditService.log(req.user!.id, 'AUDIT_LOGS_VIEW', 'audit', null, {\n        page,\n        limit,\n        totalLogs: logs.length,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/audit/report\", authenticate, authorize([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const startDate = new Date(req.query.startDate as string);\n      const endDate = new Date(req.query.endDate as string);\n      const resourceType = req.query.resourceType as string;\n      const userId = req.query.userId ? parseInt(req.query.userId as string) : undefined;\n      \n      const report = await auditService.getAuditReport(startDate, endDate, resourceType, userId);\n      \n      res.json(report);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // App Event Logs API\n  app.get(\"/api/app-logs\", authenticate, authorize([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { limit = 100, offset = 0, level, component } = req.query;\n      \n      // Disable caching for app logs to always show fresh data\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n      \n      const logs = await appLogger.getLogs(\n        parseInt(limit as string),\n        parseInt(offset as string),\n        level as string,\n        component as string\n      );\n      \n      res.json(logs);\n    } catch (error) {\n      appLogger.error(\"Failed to fetch app logs\", { userId: req.user?.id }, error as Error);\n      res.status(500).json({ message: \"Failed to fetch app logs\", error: (error as Error).message });\n    }\n  });\n\n  // Create multer instance outside the route\n  const upload = multer({ \n    storage: multer.memoryStorage(),\n    limits: { fileSize: 50 * 1024 * 1024 } // 50MB limit\n  });\n\n  // Import API\n  app.post(\"/api/import/process\", \n    authenticate, \n    authorize([\"admin\", \"doctor\", \"staff\"]),\n    upload.single('file'),\n    async (req: AuthenticatedRequest, res) => {\n      const startTime = Date.now();\n      \n      try {\n        console.log('Import request received', { \n          user: req.user?.id, \n          hasFile: !!req.file,\n          type: req.body.type,\n          filename: req.file?.originalname\n        });\n\n        // Log import attempt\n        await appLogger.info(`Data import started`, {\n          userId: req.user?.id,\n          type: req.body.type,\n          filename: req.file?.originalname,\n          fileSize: req.file?.size,\n          updateExisting: req.body.updateExisting === 'true'\n        });\n\n        const file = req.file;\n        const type = req.body.type;\n\n        if (!file) {\n          await appLogger.error(`Import failed - no file uploaded`, {\n            userId: req.user?.id,\n            type: req.body.type\n          });\n          return res.status(400).json({ message: \"No file uploaded\" });\n        }\n\n        let result;\n        if (type === 'patients' && file.originalname.endsWith('.csv')) {\n          console.log('Processing patient CSV...');\n          const updateExisting = req.body.updateExisting === 'true';\n          result = await processPatientCSV(file.buffer.toString('utf-8'), req.user!.id, { updateExisting });\n        } else if (type === 'authorizations' && file.originalname.endsWith('.csv')) {\n          console.log('Processing authorization CSV...');\n          result = await processAuthorizationCSV(file.buffer.toString('utf-8'), req.user!.id);\n        } else {\n          await appLogger.error(`Import failed - unsupported file type`, {\n            userId: req.user?.id,\n            type: req.body.type,\n            filename: file.originalname,\n            supportedTypes: ['patients.csv', 'authorizations.csv']\n          });\n          return res.status(400).json({ message: `Unsupported file format or type. Got type: ${type}, filename: ${file.originalname}` });\n        }\n\n        console.log('Import result:', result);\n        const duration = Date.now() - startTime;\n\n        // Log successful import\n        await appLogger.info(`Data import completed successfully`, {\n          userId: req.user?.id,\n          type,\n          filename: file.originalname,\n          duration: `${duration}ms`,\n          recordsProcessed: result.recordsProcessed,\n          recordsImported: result.recordsImported,\n          recordsUpdated: (result as any).recordsUpdated || 0,\n          duplicatesSkipped: (result as any).duplicatesSkipped || 0,\n          errorCount: result.errors || 0\n        });\n\n        await auditService.log(req.user!.id, 'DATA_IMPORT', 'import', null, {\n          type,\n          fileName: file.originalname,\n          result,\n          duration: `${duration}ms`\n        }, req.ip || '', req.get(\"User-Agent\") || '');\n\n        res.json(result);\n      } catch (error: any) {\n        const duration = Date.now() - startTime;\n        console.error('Import processing error:', error);\n        console.error('Error stack:', error.stack);\n        \n        // Log import failure\n        await appLogger.error(`Data import failed`, {\n          userId: req.user?.id,\n          type: req.body.type,\n          filename: req.file?.originalname,\n          duration: `${duration}ms`,\n          error: error.message,\n          stack: error.stack\n        });\n        \n        res.status(500).json({ message: \"Import processing failed\", error: error.message, details: error.stack });\n      }\n    }\n  );\n\n  // CSV processing functions\n  async function processPatientCSV(csvContent: string, userId: number, options: { updateExisting?: boolean } = {}) {\n    try {\n      console.log('Starting CSV processing...');\n      const lines = csvContent.trim().split('\\n');\n      const headers = lines[0].split(',').map(h => h.trim());\n      \n      console.log(`Processing ${lines.length - 1} records with headers:`, headers);\n      \n      let recordsProcessed = 0;\n      let recordsImported = 0;\n      let recordsUpdated = 0;\n      let duplicatesSkipped = 0;\n      const errors: string[] = [];\n      const duplicates: any[] = [];\n      const updates: any[] = [];\n      \n      // Process in optimized batches for production volumes\n      const batchSize = 20; // Optimal batch size for 1000+ records\n      const totalRows = lines.length - 1;\n      const maxRecords = totalRows; // Process all records\n      const recordsToProcess = Math.min(totalRows, maxRecords);\n      \n      console.log(`Processing ${recordsToProcess} records from CSV file with optimized batching`);\n      \n      for (let batchStart = 1; batchStart <= recordsToProcess; batchStart += batchSize) {\n        const batchEnd = Math.min(batchStart + batchSize, recordsToProcess + 1);\n        console.log(`Processing batch ${Math.ceil(batchStart / batchSize)} of ${Math.ceil(recordsToProcess / batchSize)} (rows ${batchStart}-${batchEnd - 1})`);\n        \n        for (let i = batchStart; i < batchEnd && i <= recordsToProcess; i++) {\n          recordsProcessed++;\n          \n          try {\n            // Skip empty lines\n            if (!lines[i] || lines[i].trim() === '') {\n              console.log(`Skipping empty line ${i + 1}`);\n              continue;\n            }\n            \n            // Better CSV parsing to handle commas in quoted fields\n            const csvLine = lines[i];\n            const values: string[] = [];\n            let current = '';\n            let inQuotes = false;\n            \n            for (let j = 0; j < csvLine.length; j++) {\n              const char = csvLine[j];\n              if (char === '\"') {\n                inQuotes = !inQuotes;\n              } else if (char === ',' && !inQuotes) {\n                values.push(current.trim());\n                current = '';\n              } else {\n                current += char;\n              }\n            }\n            values.push(current.trim()); // Push the last value\n            \n            const record: any = {};\n            headers.forEach((header, index) => {\n              record[header] = values[index] || '';\n            });\n\n            // Map CSV fields to our patient schema\n            const patientData = {\n              patientId: record.Id ? record.Id.substring(0, 50) : `PAT-${new Date().getFullYear()}-${String(Date.now() + i).slice(-6)}`,\n              firstName: (record.FIRST || record.firstName || '').substring(0, 100),\n              lastName: (record.LAST || record.lastName || '').substring(0, 100),\n              dateOfBirth: record.BIRTHDATE ? new Date(record.BIRTHDATE) : new Date('1990-01-01'),\n              gender: ((record.GENDER || 'unknown').toLowerCase() === 'f' ? 'female' : \n                       (record.GENDER || 'unknown').toLowerCase() === 'm' ? 'male' : 'other'),\n              phone: (record.phone || '555-000-0000').substring(0, 20),\n              email: (record.email || `${(record.FIRST || 'patient').toLowerCase().replace(/[^a-z0-9]/g, '')}@example.com`).substring(0, 255),\n              address: ([record.ADDRESS, record.CITY, record.STATE].filter(Boolean).join(', ') || 'No address provided').substring(0, 500),\n              emergencyContact: (record.emergencyContact || 'Emergency contact not provided').substring(0, 255),\n            };\n\n            // Validate required fields\n            if (!patientData.firstName || !patientData.lastName) {\n              errors.push(`Row ${i + 1}: Missing required name fields (First: \"${record.FIRST}\", Last: \"${record.LAST}\")`);\n              continue;\n            }\n\n            console.log(`Processing row ${i + 1}: ${patientData.firstName} ${patientData.lastName}`);\n\n            // Check for duplicates by patient ID and name combination with timeout\n            let existingByPatientId = null;\n            let existingByName = null;\n            \n            try {\n              existingByPatientId = await Promise.race([\n                storage.getPatientByPatientId(patientData.patientId),\n                new Promise((_, reject) => setTimeout(() => reject(new Error('Query timeout')), 2000)) // Reasonable timeout\n              ]) as any;\n            } catch (error: any) {\n              console.log(`Patient ID lookup timeout/error for ${patientData.patientId}:`, error.message);\n              // Skip duplicate check on timeout to prevent hanging\n              existingByPatientId = null;\n            }\n            \n            try {\n              existingByName = await Promise.race([\n                storage.getPatientByName(patientData.firstName, patientData.lastName, patientData.dateOfBirth),\n                new Promise((_, reject) => setTimeout(() => reject(new Error('Query timeout')), 2000)) // Reasonable timeout\n              ]) as any;\n            } catch (error: any) {\n              console.log(`Patient name lookup timeout/error for ${patientData.firstName} ${patientData.lastName}:`, error.message);\n              // Skip duplicate check on timeout to prevent hanging\n              existingByName = null;\n            }\n            \n            let existingPatient = existingByPatientId || existingByName;\n            \n            if (existingPatient) {\n              // Check if data has changed\n              const hasChanges = (\n                existingPatient.firstName !== patientData.firstName ||\n                existingPatient.lastName !== patientData.lastName ||\n                existingPatient.phone !== patientData.phone ||\n                existingPatient.email !== patientData.email ||\n                existingPatient.address !== patientData.address ||\n                existingPatient.emergencyContact !== patientData.emergencyContact ||\n                existingPatient.gender !== patientData.gender ||\n                new Date(existingPatient.dateOfBirth).getTime() !== patientData.dateOfBirth.getTime()\n              );\n\n              if (hasChanges) {\n                const duplicateInfo = {\n                  rowNumber: i + 1,\n                  patientId: patientData.patientId,\n                  existing: {\n                    id: existingPatient.id,\n                    patientId: existingPatient.patientId,\n                    name: `${existingPatient.firstName} ${existingPatient.lastName}`,\n                    dateOfBirth: existingPatient.dateOfBirth,\n                    phone: existingPatient.phone,\n                    email: existingPatient.email,\n                    address: existingPatient.address\n                  },\n                  incoming: {\n                    name: `${patientData.firstName} ${patientData.lastName}`,\n                    dateOfBirth: patientData.dateOfBirth,\n                    phone: patientData.phone,\n                    email: patientData.email,\n                    address: patientData.address\n                  },\n                  changes: {\n                    firstName: existingPatient.firstName !== patientData.firstName,\n                    lastName: existingPatient.lastName !== patientData.lastName,\n                    phone: existingPatient.phone !== patientData.phone,\n                    email: existingPatient.email !== patientData.email,\n                    address: existingPatient.address !== patientData.address,\n                    dateOfBirth: new Date(existingPatient.dateOfBirth).getTime() !== patientData.dateOfBirth.getTime(),\n                    gender: existingPatient.gender !== patientData.gender,\n                    emergencyContact: existingPatient.emergencyContact !== patientData.emergencyContact\n                  }\n                };\n\n                if (options.updateExisting) {\n                  try {\n                    await Promise.race([\n                      storage.updatePatient(existingPatient.id, patientData),\n                      new Promise((_, reject) => setTimeout(() => reject(new Error('Update timeout')), 5000)) // Standard timeout\n                    ]);\n                    recordsUpdated++;\n                    updates.push(duplicateInfo);\n                    console.log(`Updated patient: ${patientData.firstName} ${patientData.lastName}`);\n                  } catch (error: any) {\n                    console.error(`Failed to update patient ${patientData.firstName} ${patientData.lastName}:`, error.message);\n                    errors.push(`Row ${i + 1}: Update failed - ${error.message}`);\n                  }\n                } else {\n                  duplicates.push(duplicateInfo);\n                  duplicatesSkipped++;\n                  console.log(`Duplicate found: ${patientData.firstName} ${patientData.lastName}`);\n                }\n              } else {\n                // Exact duplicate - skip\n                duplicatesSkipped++;\n                console.log(`Exact duplicate skipped: ${patientData.firstName} ${patientData.lastName}`);\n              }\n            } else {\n              // New patient - create it\n              try {\n                await Promise.race([\n                  storage.createPatient(patientData),\n                  new Promise((_, reject) => setTimeout(() => reject(new Error('Create timeout')), 5000)) // Standard timeout\n                ]);\n                recordsImported++;\n                console.log(`Created new patient: ${patientData.firstName} ${patientData.lastName}`);\n              } catch (error: any) {\n                console.error(`Failed to create patient ${patientData.firstName} ${patientData.lastName}:`, error.message);\n                errors.push(`Row ${i + 1}: Create failed - ${error.message}`);\n              }\n            }\n          } catch (error: any) {\n            const errorMsg = `Row ${i + 1}: ${error.message}`;\n            errors.push(errorMsg);\n            console.error(`CSV processing error on row ${i + 1}:`, error);\n            console.error('Failed row data:', csvRecords[i]);\n          }\n        }\n        \n        // Small delay between batches to prevent overwhelming the database\n        if (batchEnd <= recordsToProcess) {\n          await new Promise(resolve => setTimeout(resolve, 100)); // Efficient delay for production\n        }\n      }\n\n      return {\n        recordsProcessed,\n        recordsImported,\n        recordsUpdated,\n        duplicatesSkipped,\n        errors: errors.length,\n        errorDetails: errors.slice(0, 10),\n        duplicates: duplicates.slice(0, 20), // Limit duplicates shown\n        updates: updates.slice(0, 20) // Show what was updated if updateExisting was true\n      };\n    } catch (error: any) {\n      console.error('CSV processing failed:', error);\n      throw new Error(`CSV processing failed: ${error.message}`);\n    }\n  }\n\n  async function processAuthorizationCSV(csvContent: string, userId: number) {\n    // Similar implementation for authorization CSV processing\n    return {\n      recordsProcessed: 0,\n      recordsImported: 0,\n      errors: 0,\n      errorDetails: [],\n    };\n  }\n\n  // System Configuration API\n  app.get(\"/api/system-config\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const configs = await storage.getAllSystemConfig();\n      \n      await auditService.log(req.user!.id, 'SYSTEM_CONFIG_LIST_VIEW', 'system_config', null, {\n        configCount: configs.length,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(configs);\n    } catch (error) {\n      appLogger.error(\"Failed to fetch system configuration\", { userId: req.user?.id }, error as Error);\n      res.status(500).json({ error: \"Failed to fetch system configuration\" });\n    }\n  });\n\n  app.get(\"/api/system-config/:key\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { key } = req.params;\n      const config = await storage.getSystemConfig(key);\n      if (!config) {\n        return res.status(404).json({ error: \"Configuration not found\" });\n      }\n      \n      await auditService.log(req.user!.id, 'SYSTEM_CONFIG_VIEW', 'system_config', config.id, {\n        key,\n        value: config.value,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(config);\n    } catch (error) {\n      appLogger.error(\"Failed to fetch system configuration\", { userId: req.user?.id }, error as Error);\n      res.status(500).json({ error: \"Failed to fetch system configuration\" });\n    }\n  });\n\n  app.put(\"/api/system-config/:key\", authenticate, authorize([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { key } = req.params;\n      const { value, description } = req.body;\n      \n      if (!value) {\n        return res.status(400).json({ error: \"Value is required\" });\n      }\n\n      const existingConfig = await storage.getSystemConfig(key);\n      const config = await storage.setSystemConfig(key, value, description);\n      \n      await auditService.log(req.user!.id, 'SYSTEM_CONFIG_UPDATE', 'system_config', config.id, {\n        key,\n        previousValue: existingConfig?.value,\n        newValue: value,\n        description,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      appLogger.info(`System configuration updated: ${key}`, { userId: req.user?.id, key, value });\n      res.json(config);\n    } catch (error) {\n      appLogger.error(\"Failed to update system configuration\", { userId: req.user?.id }, error as Error);\n      res.status(500).json({ error: \"Failed to update system configuration\" });\n    }\n  });\n\n  // Document Routes\n  app.get(\"/api/documents\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { patientId, authorizationId } = req.query;\n      let documents;\n      \n      if (patientId) {\n        documents = await storage.getDocumentsByPatient(parseInt(patientId as string));\n      } else if (authorizationId) {\n        documents = await storage.getDocumentsByAuthorization(parseInt(authorizationId as string));\n      } else {\n        // Get all documents - implement this method in storage\n        documents = await storage.getAllDocuments();\n      }\n      \n      await auditService.log(req.user!.id, 'DOCUMENT_LIST_VIEW', 'document', null, {\n        patientId: patientId as string,\n        authorizationId: authorizationId as string,\n        documentCount: documents.length,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(documents);\n    } catch (error) {\n      appLogger.error(\"Failed to fetch documents\", { userId: req.user?.id }, error as Error);\n      res.status(500).json({ error: \"Failed to fetch documents\" });\n    }\n  });\n\n  app.post(\"/api/documents/upload\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { fileName, fileType, fileSize, patientId, authorizationId, fileContent } = req.body;\n      \n      if (!fileName || !fileType || !fileSize || !fileContent) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      // In a real implementation, you would save the file to a secure storage location\n      // For now, we'll create a simulated encrypted path\n      const encryptedPath = `/secure/documents/${Date.now()}_${fileName}`;\n      \n      const documentData = {\n        fileName,\n        fileType,\n        fileSize,\n        encryptedPath,\n        uploadedBy: req.user!.id,\n        patientId: patientId ? parseInt(patientId) : null,\n        authorizationId: authorizationId ? parseInt(authorizationId) : null,\n      };\n\n      const document = await storage.createDocument(documentData);\n      \n      await auditService.log(req.user!.id, 'DOCUMENT_UPLOAD', 'document', document.id, {\n        fileName,\n        fileType,\n        fileSize,\n        patientId: documentData.patientId,\n        authorizationId: documentData.authorizationId,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      appLogger.info(\"Document uploaded\", { \n        userId: req.user?.id, \n        documentId: document.id, \n        fileName \n      });\n      \n      res.status(201).json(document);\n    } catch (error) {\n      appLogger.error(\"Failed to upload document\", { userId: req.user?.id }, error as Error);\n      res.status(500).json({ error: \"Failed to upload document\" });\n    }\n  });\n\n  app.get(\"/api/documents/:id\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const document = await storage.getDocument(parseInt(req.params.id));\n      \n      if (!document) {\n        return res.status(404).json({ error: \"Document not found\" });\n      }\n      \n      // For viewing, serve the file content with proper content type\n      // In a real implementation, you would read from the encrypted storage\n      // For now, create sample content based on file type\n      let content: string;\n      let contentType: string;\n      \n      if (document.fileType.includes('text') || document.fileType.includes('txt')) {\n        content = `Sample text document: ${document.fileName}\\n\\nThis is a demonstration of the ${document.fileName} file.\\nDocument ID: ${document.id}\\nUploaded by User ID: ${document.uploadedBy}\\nUpload Date: ${document.createdAt}`;\n        contentType = 'text/plain';\n      } else if (document.fileType.includes('pdf')) {\n        content = `%PDF-1.4\\n1 0 obj\\n<<\\n/Type /Catalog\\n/Pages 2 0 R\\n>>\\nendobj\\n\\nSample PDF content for ${document.fileName}`;\n        contentType = 'application/pdf';\n      } else {\n        content = `Sample content for ${document.fileName}\\nDocument Type: ${document.fileType}\\nDocument ID: ${document.id}`;\n        contentType = document.fileType || 'application/octet-stream';\n      }\n      \n      await auditService.log(req.user!.id, 'DOCUMENT_VIEW', 'document', document.id, {\n        fileName: document.fileName,\n        fileType: document.fileType,\n        patientId: document.patientId,\n        authorizationId: document.authorizationId,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.setHeader('Content-Type', contentType);\n      res.setHeader('Content-Disposition', `inline; filename=\"${document.fileName}\"`);\n      res.send(content);\n      \n      appLogger.info(\"Document viewed\", { \n        userId: req.user?.id, \n        documentId: document.id, \n        fileName: document.fileName \n      });\n    } catch (error) {\n      appLogger.error(\"Failed to fetch document\", { userId: req.user?.id }, error as Error);\n      res.status(500).json({ error: \"Failed to fetch document\" });\n    }\n  });\n\n  app.get(\"/api/documents/:id/download\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const document = await storage.getDocument(parseInt(req.params.id));\n      \n      if (!document) {\n        return res.status(404).json({ error: \"Document not found\" });\n      }\n      \n      // In a real implementation, you would read from the encrypted storage\n      // For now, create more realistic sample content based on file type\n      let content: string;\n      let contentType: string;\n      \n      if (document.fileType.includes('text') || document.fileType.includes('txt')) {\n        content = `Sample Medical Document: ${document.fileName}\\n\\nPatient Information and Authorization Details\\n\\nThis is a demonstration of the ${document.fileName} file.\\n\\nDocument Details:\\n- Document ID: ${document.id}\\n- File Type: ${document.fileType}\\n- File Size: ${document.fileSize} bytes\\n- Uploaded by User ID: ${document.uploadedBy}\\n- Upload Date: ${document.createdAt}\\n\\nThis document contains sample medical information for demonstration purposes.`;\n        contentType = 'text/plain';\n      } else if (document.fileType.includes('pdf')) {\n        content = `%PDF-1.4\\n1 0 obj\\n<<\\n/Type /Catalog\\n/Pages 2 0 R\\n>>\\nendobj\\n\\n2 0 obj\\n<<\\n/Type /Pages\\n/Kids [3 0 R]\\n/Count 1\\n>>\\nendobj\\n\\n3 0 obj\\n<<\\n/Type /Page\\n/Parent 2 0 R\\n/Contents 4 0 R\\n>>\\nendobj\\n\\n4 0 obj\\n<<\\n/Length 44\\n>>\\nstream\\nBT\\n/F1 12 Tf\\n72 720 Td\\n(Sample PDF: ${document.fileName}) Tj\\nET\\nendstream\\nendobj\\n\\nxref\\n0 5\\n0000000000 65535 f\\n0000000010 00000 n\\n0000000079 00000 n\\n0000000173 00000 n\\n0000000301 00000 n\\ntrailer\\n<<\\n/Size 5\\n/Root 1 0 R\\n>>\\nstartxref\\n380\\n%%EOF`;\n        contentType = 'application/pdf';\n      } else if (document.fileType.includes('word') || document.fileType.includes('doc')) {\n        content = `Sample Microsoft Word Document: ${document.fileName}\\n\\nMedical Authorization Document\\n\\nThis is a demonstration Word document for ${document.fileName}.\\n\\nDocument Information:\\n- ID: ${document.id}\\n- Type: ${document.fileType}\\n- Size: ${document.fileSize} bytes\\n- Created: ${document.createdAt}`;\n        contentType = document.fileType;\n      } else {\n        content = `Sample Medical Document: ${document.fileName}\\n\\nDocument Type: ${document.fileType}\\nDocument ID: ${document.id}\\nFile Size: ${document.fileSize} bytes\\nUpload Date: ${document.createdAt}\\n\\nThis is a sample document for demonstration purposes.`;\n        contentType = document.fileType || 'application/octet-stream';\n      }\n      \n      await auditService.log(req.user!.id, 'DOCUMENT_DOWNLOAD', 'document', document.id, {\n        fileName: document.fileName,\n        fileType: document.fileType,\n        fileSize: document.fileSize,\n        patientId: document.patientId,\n        authorizationId: document.authorizationId,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.setHeader('Content-Disposition', `attachment; filename=\"${document.fileName}\"`);\n      res.setHeader('Content-Type', contentType);\n      res.setHeader('Content-Length', Buffer.byteLength(content).toString());\n      res.send(content);\n      \n      appLogger.info(\"Document downloaded\", { \n        userId: req.user?.id, \n        documentId: document.id, \n        fileName: document.fileName \n      });\n    } catch (error) {\n      appLogger.error(\"Failed to download document\", { userId: req.user?.id }, error as Error);\n      res.status(500).json({ error: \"Failed to download document\" });\n    }\n  });\n\n  app.delete(\"/api/documents/:id\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const documentId = parseInt(req.params.id);\n      const document = await storage.getDocument(documentId);\n      \n      if (!document) {\n        return res.status(404).json({ error: \"Document not found\" });\n      }\n      \n      const deleted = await storage.deleteDocument(documentId);\n      \n      if (!deleted) {\n        return res.status(500).json({ error: \"Failed to delete document\" });\n      }\n      \n      await auditService.log(req.user!.id, 'DOCUMENT_DELETE', 'document', documentId, {\n        fileName: document.fileName,\n        fileType: document.fileType,\n        fileSize: document.fileSize,\n        patientId: document.patientId,\n        authorizationId: document.authorizationId,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      appLogger.info(\"Document deleted\", { \n        userId: req.user?.id, \n        documentId, \n        fileName: document.fileName \n      });\n      \n      res.json({ message: \"Document deleted successfully\" });\n    } catch (error) {\n      appLogger.error(\"Failed to delete document\", { userId: req.user?.id }, error as Error);\n      res.status(500).json({ error: \"Failed to delete document\" });\n    }\n  });\n\n  // Register prior authorization workflow routes\n  registerPriorAuthWorkflowRoutes(app);\n\n  // Register prior authorization generator routes  \n  app.use(\"/api/prior-auth\", priorAuthGeneratorRoutes);\n  \n  // Initialize ICD-10 codes and add API endpoints\n  await storage.seedIcd10Codes();\n  \n  // Register ICD-10 codes routes\n  app.use(\"/api/icd10-codes\", icd10CodesRoutes);\n  \n  // Register Insurance provider routes\n  app.use(\"/api/insurance\", insuranceRoutes);\n  \n  // Register ModMed EMA integration routes\n  app.use(\"/api/modmed-ema\", modmedEmaRoutes);\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":59489},"server/storage.ts":{"content":"import { \n  medicalSpecialties, users, patients, insuranceProviders, patientInsurance, \n  priorAuthorizations, documents, auditLogs, systemConfig, procedureCodes,\n  priorAuthWorkflowSteps, stateFormTemplates, icd10Codes,\n  type MedicalSpecialty, type InsertMedicalSpecialty,\n  type User, type InsertUser, type Patient, type InsertPatient,\n  type InsuranceProvider, type InsertInsuranceProvider,\n  type PatientInsurance, type InsertPatientInsurance,\n  type PriorAuthorization, type InsertPriorAuthorization,\n  type Document, type InsertDocument,\n  type AuditLog, type InsertAuditLog,\n  type SystemConfig, type InsertSystemConfig,\n  type ProcedureCode, type InsertProcedureCode,\n  type Icd10Code, type InsertIcd10Code,\n  type PriorAuthWorkflowStep, type InsertPriorAuthWorkflowStep,\n  type StateFormTemplate, type InsertStateFormTemplate\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, like, count, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Medical Specialties\n  getMedicalSpecialties(): Promise<MedicalSpecialty[]>;\n  getMedicalSpecialty(id: number): Promise<MedicalSpecialty | undefined>;\n  createMedicalSpecialty(specialty: InsertMedicalSpecialty): Promise<MedicalSpecialty>;\n  seedMedicalSpecialties(): Promise<void>;\n  seedDefaultUsers(): Promise<void>;\n  seedInsuranceProviders(): Promise<void>;\n  \n  // Users\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined>;\n  \n  // Patients\n  getPatient(id: number): Promise<Patient | undefined>;\n  getPatientByPatientId(patientId: string): Promise<Patient | undefined>;\n  getPatients(limit?: number, offset?: number): Promise<Patient[]>;\n  getPatientsCount(): Promise<number>;\n  createPatient(patient: InsertPatient): Promise<Patient>;\n  updatePatient(id: number, updates: Partial<InsertPatient>): Promise<Patient | undefined>;\n  deletePatient(id: number): Promise<boolean>;\n  deleteAllPatients(): Promise<number>;\n  searchPatients(query: string): Promise<Patient[]>;\n  \n  // Insurance Providers\n  getInsuranceProviders(): Promise<InsuranceProvider[]>;\n  getInsuranceProvider(id: number): Promise<InsuranceProvider | undefined>;\n  createInsuranceProvider(provider: InsertInsuranceProvider): Promise<InsuranceProvider>;\n  updateInsuranceProvider(id: number, updates: Partial<InsertInsuranceProvider>): Promise<InsuranceProvider | undefined>;\n  deleteInsuranceProvider(id: number): Promise<boolean>;\n  \n  // Patient Insurance\n  getPatientInsurance(patientId: number): Promise<PatientInsurance[]>;\n  createPatientInsurance(insurance: InsertPatientInsurance): Promise<PatientInsurance>;\n  updatePatientInsurance(id: number, updates: Partial<InsertPatientInsurance>): Promise<PatientInsurance | undefined>;\n  \n  // Prior Authorizations\n  getPriorAuthorization(id: number): Promise<PriorAuthorization | undefined>;\n  getPriorAuthorizationByAuthId(authId: string): Promise<PriorAuthorization | undefined>;\n  getPriorAuthorizations(limit?: number, offset?: number): Promise<PriorAuthorization[]>;\n  getPriorAuthorizationsByPatient(patientId: number): Promise<PriorAuthorization[]>;\n  getPriorAuthorizationsByStatus(status: string): Promise<PriorAuthorization[]>;\n  createPriorAuthorization(authorization: InsertPriorAuthorization): Promise<PriorAuthorization>;\n  updatePriorAuthorization(id: number, updates: Partial<InsertPriorAuthorization>): Promise<PriorAuthorization | undefined>;\n  updatePriorAuthorizationStatus(id: number, status: string): Promise<boolean>;\n  getAuthorizationStats(): Promise<{\n    pending: number;\n    approved: number;\n    denied: number;\n    total: number;\n  }>;\n  \n  // Documents\n  getDocument(id: number): Promise<Document | undefined>;\n  getAllDocuments(): Promise<Document[]>;\n  getDocumentsByAuthorization(authId: number): Promise<Document[]>;\n  getDocumentsByPatient(patientId: number): Promise<Document[]>;\n  createDocument(document: InsertDocument): Promise<Document>;\n  deleteDocument(id: number): Promise<boolean>;\n  \n  // Audit Logs\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(limit?: number, offset?: number): Promise<AuditLog[]>;\n  getAuditLogsByUser(userId: number): Promise<AuditLog[]>;\n  getAuditLogsByResource(resourceType: string, resourceId: number): Promise<AuditLog[]>;\n  \n  // System Configuration\n  getSystemConfig(key: string): Promise<SystemConfig | undefined>;\n  setSystemConfig(key: string, value: string, description?: string): Promise<SystemConfig>;\n  getAllSystemConfig(): Promise<SystemConfig[]>;\n  seedSystemConfig(): Promise<void>;\n\n  // Procedure Codes\n  getProcedureCode(id: number): Promise<ProcedureCode | undefined>;\n  getProcedureCodeByCPT(cptCode: string): Promise<ProcedureCode | undefined>;\n  getAllProcedureCodes(): Promise<ProcedureCode[]>;\n  getProcedureCodes(limit?: number, offset?: number): Promise<ProcedureCode[]>;\n  searchProcedureCodes(query: string, category?: string): Promise<ProcedureCode[]>;\n  getProceduresByCategory(category: string): Promise<ProcedureCode[]>;\n  getProcedureCategories(): Promise<string[]>;\n  createProcedureCode(procedure: InsertProcedureCode): Promise<ProcedureCode>;\n  updateProcedureCode(id: number, updates: Partial<InsertProcedureCode>): Promise<ProcedureCode | undefined>;\n\n  // Prior Auth Workflow Steps\n  getPriorAuthWorkflowStep(authorizationId: number, stepNumber: number): Promise<PriorAuthWorkflowStep | undefined>;\n  getPriorAuthWorkflowSteps(authorizationId: number): Promise<PriorAuthWorkflowStep[]>;\n  createPriorAuthWorkflowStep(step: InsertPriorAuthWorkflowStep): Promise<PriorAuthWorkflowStep>;\n  updatePriorAuthWorkflowStep(id: number, updates: Partial<InsertPriorAuthWorkflowStep>): Promise<PriorAuthWorkflowStep | undefined>;\n\n  // State Form Templates\n  getStateFormTemplate(state: string, formType: string): Promise<StateFormTemplate | undefined>;\n  getStateFormTemplates(): Promise<StateFormTemplate[]>;\n  createStateFormTemplate(template: InsertStateFormTemplate): Promise<StateFormTemplate>;\n  updateStateFormTemplate(id: number, updates: Partial<InsertStateFormTemplate>): Promise<StateFormTemplate | undefined>;\n  \n  // ICD-10 Codes\n  getIcd10Codes(limit?: number): Promise<Icd10Code[]>;\n  getIcd10CodeByCode(code: string): Promise<Icd10Code | undefined>;\n  createIcd10Code(code: InsertIcd10Code): Promise<Icd10Code>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Medical Specialties\n  async getMedicalSpecialties(): Promise<MedicalSpecialty[]> {\n    return await db.select().from(medicalSpecialties).where(eq(medicalSpecialties.isActive, true));\n  }\n\n  async getMedicalSpecialty(id: number): Promise<MedicalSpecialty | undefined> {\n    const [specialty] = await db.select().from(medicalSpecialties).where(eq(medicalSpecialties.id, id));\n    return specialty || undefined;\n  }\n\n  async createMedicalSpecialty(insertSpecialty: InsertMedicalSpecialty): Promise<MedicalSpecialty> {\n    const [specialty] = await db.insert(medicalSpecialties).values(insertSpecialty).returning();\n    return specialty;\n  }\n\n  async seedMedicalSpecialties(): Promise<void> {\n    const specialtiesData = [\n      { specialty: \"Allergy & Immunology\", subspecialty: null },\n      { specialty: \"Anesthesiology\", subspecialty: \"Adult Cardiac Anesthesiology\" },\n      { specialty: \"Anesthesiology\", subspecialty: \"Critical Care Medicine\" },\n      { specialty: \"Anesthesiology\", subspecialty: \"Health Care Administration, Leadership, and Management\" },\n      { specialty: \"Anesthesiology\", subspecialty: \"Hospice and Palliative Medicine\" },\n      { specialty: \"Anesthesiology\", subspecialty: \"Neurocritical Care\" },\n      { specialty: \"Anesthesiology\", subspecialty: \"Pain Medicine\" },\n      { specialty: \"Anesthesiology\", subspecialty: \"Pediatric Anesthesiology\" },\n      { specialty: \"Anesthesiology\", subspecialty: \"Sleep Medicine\" },\n      { specialty: \"Colon & Rectal Surgery\", subspecialty: null },\n      { specialty: \"Dermatology\", subspecialty: \"Dermatopathology\" },\n      { specialty: \"Dermatology\", subspecialty: \"Micrographic Dermatologic Surgery\" },\n      { specialty: \"Dermatology\", subspecialty: \"Pediatric Dermatology\" },\n      { specialty: \"Emergency Medicine\", subspecialty: \"Anesthesiology Critical Care Medicine\" },\n      { specialty: \"Emergency Medicine\", subspecialty: \"Emergency Medical Services\" },\n      { specialty: \"Emergency Medicine\", subspecialty: \"Health Care Administration, Leadership, and Management\" },\n      { specialty: \"Emergency Medicine\", subspecialty: \"Hospice and Palliative Medicine\" },\n      { specialty: \"Emergency Medicine\", subspecialty: \"Internal Medicine–Critical Care Medicine\" },\n      { specialty: \"Emergency Medicine\", subspecialty: \"Medical Toxicology\" },\n      { specialty: \"Emergency Medicine\", subspecialty: \"Neurocritical Care\" },\n      { specialty: \"Emergency Medicine\", subspecialty: \"Pain Medicine\" },\n      { specialty: \"Emergency Medicine\", subspecialty: \"Pediatric Emergency Medicine\" },\n      { specialty: \"Emergency Medicine\", subspecialty: \"Sports Medicine\" },\n      { specialty: \"Emergency Medicine\", subspecialty: \"Undersea and Hyperbaric Medicine\" },\n      { specialty: \"Family Medicine\", subspecialty: \"Adolescent Medicine\" },\n      { specialty: \"Family Medicine\", subspecialty: \"Geriatric Medicine\" },\n      { specialty: \"Family Medicine\", subspecialty: \"Health Care Administration, Leadership, and Management\" },\n      { specialty: \"Family Medicine\", subspecialty: \"Hospice and Palliative Medicine\" },\n      { specialty: \"Family Medicine\", subspecialty: \"Pain Medicine\" },\n      { specialty: \"Family Medicine\", subspecialty: \"Sleep Medicine\" },\n      { specialty: \"Family Medicine\", subspecialty: \"Sports Medicine\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Adolescent Medicine\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Adult Congenital Heart Disease\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Advanced Heart Failure & Transplant Cardiology\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Cardiovascular Disease\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Clinical Cardiac Electrophysiology\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Critical Care Medicine\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Endocrinology, Diabetes & Metabolism\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Gastroenterology\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Geriatric Medicine\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Hematology\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Hospice & Palliative Medicine\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Infectious Disease\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Interventional Cardiology\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Medical Oncology\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Complex General Surgical Oncology\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Pediatric Surgery\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Surgery of the Hand\" },\n      { specialty: \"Internal Medicine\", subspecialty: \"Surgical Critical Care\" },\n      { specialty: \"Medical Genetics & Genomics\", subspecialty: \"Clinical Genetics\" },\n      { specialty: \"Medical Genetics & Genomics\", subspecialty: \"Laboratory Genetics & Genomics\" },\n      { specialty: \"Neurological Surgery\", subspecialty: null },\n      { specialty: \"Nuclear Medicine\", subspecialty: null },\n      { specialty: \"Obstetrics & Gynecology\", subspecialty: \"Maternal–Fetal Medicine\" },\n      { specialty: \"Obstetrics & Gynecology\", subspecialty: \"Reproductive Endocrinology & Infertility\" },\n      { specialty: \"Obstetrics & Gynecology\", subspecialty: \"Gynecologic Oncology\" },\n      { specialty: \"Obstetrics & Gynecology\", subspecialty: \"Urogynecology & Reconstructive Pelvic Surgery\" },\n      { specialty: \"Obstetrics & Gynecology\", subspecialty: \"Complex Family Planning\" },\n      { specialty: \"Obstetrics & Gynecology\", subspecialty: \"Critical Care Medicine\" },\n      { specialty: \"Ophthalmology\", subspecialty: \"Retina\" },\n      { specialty: \"Ophthalmology\", subspecialty: \"Glaucoma\" },\n      { specialty: \"Ophthalmology\", subspecialty: \"Pediatric Ophthalmology\" },\n      { specialty: \"Ophthalmology\", subspecialty: \"Oculoplastics\" },\n      { specialty: \"Ophthalmology\", subspecialty: \"Neuro‑Ophthalmology\" },\n      { specialty: \"Orthopaedic Surgery\", subspecialty: \"Orthopaedic Sports Medicine\" },\n      { specialty: \"Orthopaedic Surgery\", subspecialty: \"Hand Surgery\" },\n      { specialty: \"Otolaryngology – Head & Neck Surgery\", subspecialty: \"Neurotology\" },\n      { specialty: \"Otolaryngology – Head & Neck Surgery\", subspecialty: \"Pediatric ENT\" },\n      { specialty: \"Otolaryngology – Head & Neck Surgery\", subspecialty: \"Sleep Medicine\" },\n      { specialty: \"Pathology\", subspecialty: \"(see Molecular, Cytopathology, Forensic, etc.)\" },\n      { specialty: \"Pediatrics\", subspecialty: \"(see Neonatology, Cardio, Endo, GI, Heme-Onc, ID, etc.)\" },\n      { specialty: \"Physical Medicine & Rehabilitation\", subspecialty: \"Brain Injury Medicine\" },\n      { specialty: \"Physical Medicine & Rehabilitation\", subspecialty: \"Spinal Cord Injury Medicine\" },\n      { specialty: \"Physical Medicine & Rehabilitation\", subspecialty: \"Sports Medicine\" },\n      { specialty: \"Physical Medicine & Rehabilitation\", subspecialty: \"Pain Medicine\" },\n      { specialty: \"Physical Medicine & Rehabilitation\", subspecialty: \"Pediatric Rehabilitation\" },\n      { specialty: \"Plastic Surgery\", subspecialty: null },\n      { specialty: \"Preventive Medicine\", subspecialty: null },\n      { specialty: \"Psychiatry\", subspecialty: \"Child & Adolescent Psychiatry\" },\n      { specialty: \"Psychiatry\", subspecialty: \"Geriatric Psychiatry\" },\n      { specialty: \"Psychiatry\", subspecialty: \"Addiction Psychiatry\" },\n      { specialty: \"Psychiatry\", subspecialty: \"Consultation‑Liaison Psychiatry\" },\n      { specialty: \"Psychiatry\", subspecialty: \"Forensic Psychiatry\" },\n      { specialty: \"Psychiatry\", subspecialty: \"Neuropsychiatry\" },\n      { specialty: \"Psychiatry\", subspecialty: \"Sleep Medicine\" },\n      { specialty: \"Psychiatry\", subspecialty: \"Hospice & Palliative Medicine\" },\n      { specialty: \"Radiation Oncology\", subspecialty: null },\n      { specialty: \"Radiology\", subspecialty: \"Interventional Radiology\" },\n      { specialty: \"Radiology\", subspecialty: \"Neuroradiology\" },\n      { specialty: \"Radiology\", subspecialty: \"Nuclear Radiology\" },\n      { specialty: \"Radiology\", subspecialty: \"Pediatric Radiology\" },\n      { specialty: \"General Surgery\", subspecialty: \"Colorectal Surgery\" },\n      { specialty: \"General Surgery\", subspecialty: \"Trauma Surgery\" },\n      { specialty: \"General Surgery\", subspecialty: \"Transplant Surgery\" },\n      { specialty: \"Thoracic Surgery\", subspecialty: \"Cardiothoracic Surgery\" },\n      { specialty: \"Urology\", subspecialty: \"Pediatric Urology\" },\n      { specialty: \"Urology\", subspecialty: \"Urologic Oncology\" },\n      { specialty: \"Urology\", subspecialty: \"Endourology\" }\n    ];\n\n    // Check if specialties already exist\n    const existingSpecialties = await db.select().from(medicalSpecialties).limit(1);\n    if (existingSpecialties.length === 0) {\n      await db.insert(medicalSpecialties).values(specialtiesData);\n    }\n  }\n\n  async seedDefaultUsers(): Promise<void> {\n    // Check if users already exist\n    const existingUsers = await db.select().from(users).limit(1);\n    if (existingUsers.length === 0) {\n      const { hashPassword } = await import(\"./middleware/auth\");\n      \n      const defaultUsers = [\n        {\n          username: \"admin\",\n          email: \"admin@medauthpro.com\",\n          password: await hashPassword(\"admin123\"),\n          role: \"admin\",\n          firstName: \"System\",\n          lastName: \"Administrator\",\n          specialtyId: null,\n          isActive: true,\n        },\n        {\n          username: \"doctor\",\n          email: \"doctor@medauthpro.com\", \n          password: await hashPassword(\"doctor123\"),\n          role: \"doctor\",\n          firstName: \"Dr. Sarah\",\n          lastName: \"Johnson\",\n          specialtyId: null,\n          isActive: true,\n        },\n        {\n          username: \"staff\",\n          email: \"staff@medauthpro.com\",\n          password: await hashPassword(\"staff123\"),\n          role: \"staff\",\n          firstName: \"Mary\",\n          lastName: \"Williams\",\n          specialtyId: null,\n          isActive: true,\n        }\n      ];\n      \n      await db.insert(users).values(defaultUsers);\n    }\n  }\n\n  async seedInsuranceProviders(): Promise<void> {\n    // Check if insurance providers already exist\n    const existingProviders = await db.select().from(insuranceProviders).limit(1);\n    if (existingProviders.length === 0) {\n      const providers = [\n        {\n          name: \"Aetna\",\n          code: \"AETNA\",\n          contactInfo: { \n            phone: \"1-800-872-3862\",\n            website: \"https://www.aetna.com\",\n            priorAuthPhone: \"1-855-240-0546\"\n          },\n          priorAuthPhone: \"1-855-240-0546\",\n          averageProcessingDays: 5,\n          urgentProcessingDays: 2,\n          isActive: true\n        },\n        {\n          name: \"Blue Cross Blue Shield\",\n          code: \"BCBS\",\n          contactInfo: { \n            phone: \"1-888-630-2583\",\n            website: \"https://www.bcbs.com\",\n            priorAuthPhone: \"1-800-810-2583\"\n          },\n          priorAuthPhone: \"1-800-810-2583\",\n          averageProcessingDays: 7,\n          urgentProcessingDays: 2,\n          isActive: true\n        },\n        {\n          name: \"Cigna\",\n          code: \"CIGNA\",\n          contactInfo: { \n            phone: \"1-800-244-6224\",\n            website: \"https://www.cigna.com\",\n            priorAuthPhone: \"1-800-88-CIGNA\"\n          },\n          priorAuthPhone: \"1-800-88-CIGNA\",\n          averageProcessingDays: 5,\n          urgentProcessingDays: 1,\n          isActive: true\n        },\n        {\n          name: \"UnitedHealth\",\n          code: \"UHC\",\n          contactInfo: { \n            phone: \"1-877-842-3210\",\n            website: \"https://www.uhc.com\",\n            priorAuthPhone: \"1-866-889-7339\"\n          },\n          priorAuthPhone: \"1-866-889-7339\",\n          averageProcessingDays: 6,\n          urgentProcessingDays: 2,\n          isActive: true\n        },\n        {\n          name: \"Humana\",\n          code: \"HUMANA\",\n          contactInfo: { \n            phone: \"1-800-448-6262\",\n            website: \"https://www.humana.com\",\n            priorAuthPhone: \"1-800-555-1234\"\n          },\n          priorAuthPhone: \"1-800-555-1234\",\n          averageProcessingDays: 5,\n          urgentProcessingDays: 2,\n          isActive: true\n        },\n        {\n          name: \"Kaiser Permanente\",\n          code: \"KAISER\",\n          contactInfo: { \n            phone: \"1-800-464-4000\",\n            website: \"https://www.kaiserpermanente.org\",\n            priorAuthPhone: \"1-800-777-7902\"\n          },\n          priorAuthPhone: \"1-800-777-7902\",\n          averageProcessingDays: 4,\n          urgentProcessingDays: 1,\n          isActive: true\n        },\n        {\n          name: \"Medicare\",\n          code: \"MEDICARE\",\n          contactInfo: { \n            phone: \"1-800-633-4227\",\n            website: \"https://www.medicare.gov\",\n            priorAuthPhone: \"1-800-Medicare\"\n          },\n          priorAuthPhone: \"1-800-Medicare\",\n          averageProcessingDays: 10,\n          urgentProcessingDays: 3,\n          isActive: true\n        },\n        {\n          name: \"Medicaid\",\n          code: \"MEDICAID\",\n          contactInfo: { \n            phone: \"1-800-318-2596\",\n            website: \"https://www.medicaid.gov\",\n            priorAuthPhone: \"1-800-538-9295\"\n          },\n          priorAuthPhone: \"1-800-538-9295\",\n          averageProcessingDays: 14,\n          urgentProcessingDays: 5,\n          isActive: true\n        }\n      ];\n      \n      await db.insert(insuranceProviders).values(providers);\n    }\n  }\n\n  // Users\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return user || undefined;\n  }\n\n  // Patients\n  async getPatient(id: number): Promise<Patient | undefined> {\n    const [patient] = await db.select().from(patients).where(eq(patients.id, id));\n    return patient || undefined;\n  }\n\n  async getPatientByPatientId(patientId: string): Promise<Patient | undefined> {\n    const [patient] = await db.select().from(patients).where(eq(patients.patientId, patientId));\n    return patient || undefined;\n  }\n\n  async getPatientByName(firstName: string, lastName: string, dateOfBirth: Date): Promise<Patient | undefined> {\n    const [patient] = await db.select().from(patients).where(\n      and(\n        eq(patients.firstName, firstName),\n        eq(patients.lastName, lastName),\n        eq(patients.dateOfBirth, dateOfBirth)\n      )\n    );\n    return patient || undefined;\n  }\n\n  async getPatients(limit = 50, offset = 0): Promise<Patient[]> {\n    return await db.select().from(patients).limit(limit).offset(offset).orderBy(desc(patients.createdAt));\n  }\n\n  async getPatientsCount(): Promise<number> {\n    const [result] = await db.select({ count: count() }).from(patients);\n    return result.count;\n  }\n\n  async createPatient(insertPatient: InsertPatient): Promise<Patient> {\n    const [patient] = await db.insert(patients).values(insertPatient).returning();\n    return patient;\n  }\n\n  async updatePatient(id: number, updates: Partial<InsertPatient>): Promise<Patient | undefined> {\n    const [patient] = await db.update(patients).set(updates).where(eq(patients.id, id)).returning();\n    return patient || undefined;\n  }\n\n  async deletePatient(id: number): Promise<boolean> {\n    const result = await db.delete(patients).where(eq(patients.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async deleteAllPatients(): Promise<number> {\n    try {\n      // First check if there are any patients\n      const count = await this.getPatientsCount();\n      if (count === 0) {\n        return 0;\n      }\n      \n      // Use raw SQL to delete all patients (more reliable than ORM)\n      const result = await db.execute(sql`DELETE FROM patients`);\n      return result.rowCount || 0;\n    } catch (error) {\n      console.error(\"Error in deleteAllPatients:\", error);\n      throw error;\n    }\n  }\n\n  async searchPatients(query: string): Promise<Patient[]> {\n    return await db.select().from(patients).where(\n      or(\n        like(patients.firstName, `%${query}%`),\n        like(patients.lastName, `%${query}%`),\n        like(patients.patientId, `%${query}%`)\n      )\n    ).limit(20);\n  }\n\n  // Insurance Providers\n  async getInsuranceProviders(): Promise<InsuranceProvider[]> {\n    return await db.select().from(insuranceProviders).where(eq(insuranceProviders.isActive, true));\n  }\n\n  async getInsuranceProvider(id: number): Promise<InsuranceProvider | undefined> {\n    const [provider] = await db.select().from(insuranceProviders).where(eq(insuranceProviders.id, id));\n    return provider || undefined;\n  }\n\n  async createInsuranceProvider(insertProvider: InsertInsuranceProvider): Promise<InsuranceProvider> {\n    const [provider] = await db.insert(insuranceProviders).values(insertProvider).returning();\n    return provider;\n  }\n\n  async updateInsuranceProvider(id: number, updates: Partial<InsertInsuranceProvider>): Promise<InsuranceProvider | undefined> {\n    const [provider] = await db.update(insuranceProviders)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(insuranceProviders.id, id))\n      .returning();\n    return provider || undefined;\n  }\n\n  async deleteInsuranceProvider(id: number): Promise<boolean> {\n    // Soft delete by setting isActive to false\n    const [provider] = await db.update(insuranceProviders)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(insuranceProviders.id, id))\n      .returning();\n    return !!provider;\n  }\n\n  // Patient Insurance\n  async getPatientInsurance(patientId: number): Promise<PatientInsurance[]> {\n    return await db.select().from(patientInsurance).where(\n      and(\n        eq(patientInsurance.patientId, patientId),\n        eq(patientInsurance.isActive, true)\n      )\n    );\n  }\n\n  async createPatientInsurance(insertInsurance: InsertPatientInsurance): Promise<PatientInsurance> {\n    const [insurance] = await db.insert(patientInsurance).values(insertInsurance).returning();\n    return insurance;\n  }\n\n  async updatePatientInsurance(id: number, updates: Partial<InsertPatientInsurance>): Promise<PatientInsurance | undefined> {\n    const [insurance] = await db.update(patientInsurance).set(updates).where(eq(patientInsurance.id, id)).returning();\n    return insurance || undefined;\n  }\n\n  // Prior Authorizations\n  async getPriorAuthorization(id: number): Promise<PriorAuthorization | undefined> {\n    const [authorization] = await db.select().from(priorAuthorizations).where(eq(priorAuthorizations.id, id));\n    return authorization || undefined;\n  }\n\n  async getPriorAuthorizationByAuthId(authId: string): Promise<PriorAuthorization | undefined> {\n    const [authorization] = await db.select().from(priorAuthorizations).where(eq(priorAuthorizations.authorizationId, authId));\n    return authorization || undefined;\n  }\n\n  async getPriorAuthorizations(limit = 50, offset = 0): Promise<PriorAuthorization[]> {\n    return await db.select().from(priorAuthorizations).limit(limit).offset(offset).orderBy(desc(priorAuthorizations.createdAt));\n  }\n\n  async getPriorAuthorizationsByPatient(patientId: number): Promise<PriorAuthorization[]> {\n    return await db.select().from(priorAuthorizations).where(eq(priorAuthorizations.patientId, patientId));\n  }\n\n  async getPriorAuthorizationsByStatus(status: string): Promise<PriorAuthorization[]> {\n    return await db.select().from(priorAuthorizations).where(eq(priorAuthorizations.status, status));\n  }\n\n  async createPriorAuthorization(insertAuthorization: InsertPriorAuthorization): Promise<PriorAuthorization> {\n    const [authorization] = await db.insert(priorAuthorizations).values(insertAuthorization).returning();\n    return authorization;\n  }\n\n  async updatePriorAuthorization(id: number, updates: Partial<InsertPriorAuthorization>): Promise<PriorAuthorization | undefined> {\n    const [authorization] = await db.update(priorAuthorizations).set(updates).where(eq(priorAuthorizations.id, id)).returning();\n    return authorization || undefined;\n  }\n\n  async deletePriorAuthorization(id: number): Promise<boolean> {\n    const result = await db.delete(priorAuthorizations).where(eq(priorAuthorizations.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async updatePriorAuthorizationStatus(id: number, status: string): Promise<boolean> {\n    const result = await db.update(priorAuthorizations)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(priorAuthorizations.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async getAuthorizationStats(): Promise<{ pending: number; approved: number; denied: number; total: number; }> {\n    const [pendingCount] = await db.select({ count: count() }).from(priorAuthorizations).where(eq(priorAuthorizations.status, 'pending'));\n    const [approvedCount] = await db.select({ count: count() }).from(priorAuthorizations).where(eq(priorAuthorizations.status, 'approved'));\n    const [deniedCount] = await db.select({ count: count() }).from(priorAuthorizations).where(eq(priorAuthorizations.status, 'denied'));\n    const [totalCount] = await db.select({ count: count() }).from(priorAuthorizations);\n\n    return {\n      pending: pendingCount.count,\n      approved: approvedCount.count,\n      denied: deniedCount.count,\n      total: totalCount.count,\n    };\n  }\n\n  // Documents\n  async getDocument(id: number): Promise<Document | undefined> {\n    const [document] = await db.select().from(documents).where(eq(documents.id, id));\n    return document || undefined;\n  }\n\n  async getAllDocuments(): Promise<Document[]> {\n    return await db.select().from(documents).orderBy(desc(documents.createdAt));\n  }\n\n  async getDocumentsByAuthorization(authId: number): Promise<Document[]> {\n    return await db.select().from(documents).where(eq(documents.authorizationId, authId));\n  }\n\n  async getDocumentsByPatient(patientId: number): Promise<Document[]> {\n    return await db.select().from(documents).where(eq(documents.patientId, patientId));\n  }\n\n  async createDocument(insertDocument: InsertDocument): Promise<Document> {\n    const [document] = await db.insert(documents).values(insertDocument).returning();\n    return document;\n  }\n\n  async deleteDocument(id: number): Promise<boolean> {\n    const result = await db.delete(documents).where(eq(documents.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Audit Logs\n  async createAuditLog(insertLog: InsertAuditLog): Promise<AuditLog> {\n    const [log] = await db.insert(auditLogs).values(insertLog).returning();\n    return log;\n  }\n\n  async getAuditLogs(limit = 100, offset = 0): Promise<AuditLog[]> {\n    return await db.select().from(auditLogs).limit(limit).offset(offset).orderBy(desc(auditLogs.timestamp));\n  }\n\n  async getAuditLogsByUser(userId: number): Promise<AuditLog[]> {\n    return await db.select().from(auditLogs).where(eq(auditLogs.userId, userId)).orderBy(desc(auditLogs.timestamp));\n  }\n\n  async getAuditLogsByResource(resourceType: string, resourceId: number): Promise<AuditLog[]> {\n    return await db.select().from(auditLogs).where(\n      and(\n        eq(auditLogs.resourceType, resourceType),\n        eq(auditLogs.resourceId, resourceId)\n      )\n    ).orderBy(desc(auditLogs.timestamp));\n  }\n\n  // System Configuration Methods\n  async getSystemConfig(key: string): Promise<SystemConfig | undefined> {\n    const [config] = await db.select().from(systemConfig)\n      .where(and(eq(systemConfig.key, key), eq(systemConfig.isActive, true)));\n    return config || undefined;\n  }\n\n  async setSystemConfig(key: string, value: string, description?: string): Promise<SystemConfig> {\n    const existingConfig = await this.getSystemConfig(key);\n    \n    if (existingConfig) {\n      const [updated] = await db.update(systemConfig)\n        .set({ \n          value, \n          description: description || existingConfig.description,\n          updatedAt: new Date()\n        })\n        .where(eq(systemConfig.key, key))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db.insert(systemConfig)\n        .values({ key, value, description })\n        .returning();\n      return created;\n    }\n  }\n\n  async getAllSystemConfig(): Promise<SystemConfig[]> {\n    return await db.select().from(systemConfig)\n      .where(eq(systemConfig.isActive, true))\n      .orderBy(systemConfig.key);\n  }\n\n  async seedIcd10Codes(): Promise<void> {\n    // Import and use the ICD-10 seeding service\n    const { icd10CodeService } = await import(\"./services/icd10-codes\");\n    await icd10CodeService.seedIcd10Codes();\n  }\n\n  async seedSystemConfig(): Promise<void> {\n    const configs = [\n      {\n        key: \"client_name\",\n        value: \"Demo Medical Practice\",\n        description: \"The name of the medical practice or client organization\"\n      },\n      {\n        key: \"app_version\",\n        value: \"2.0.0\",\n        description: \"Current application version\"\n      },\n      {\n        key: \"admin_email\",\n        value: \"admin@example.com\",\n        description: \"System administrator email address\"\n      }\n    ];\n\n    for (const config of configs) {\n      const exists = await this.getSystemConfig(config.key);\n      if (!exists) {\n        await this.setSystemConfig(config.key, config.value, config.description);\n      }\n    }\n  }\n\n  async seedSamplePatients(): Promise<void> {\n    // Check if patients already exist\n    const existingPatients = await db.select().from(patients).limit(1);\n    if (existingPatients.length === 0) {\n      const samplePatients = [\n        {\n          patientId: \"P001\",\n          firstName: \"John\",\n          lastName: \"Doe\",\n          dateOfBirth: new Date(\"1985-03-15\"),\n          gender: \"male\",\n          phone: \"555-123-4567\",\n          email: \"john.doe@example.com\",\n          address: \"123 Main St, Anytown, ST 12345\",\n          emergencyContact: \"Jane Doe - 555-987-6543\"\n        },\n        {\n          patientId: \"P002\",\n          firstName: \"Jane\",\n          lastName: \"Smith\",\n          dateOfBirth: new Date(\"1978-07-22\"),\n          gender: \"female\",\n          phone: \"555-234-5678\",\n          email: \"jane.smith@example.com\",\n          address: \"456 Oak Ave, Somewhere, ST 67890\",\n          emergencyContact: \"Bob Smith - 555-876-5432\"\n        },\n        {\n          patientId: \"P003\",\n          firstName: \"Michael\",\n          lastName: \"Johnson\",\n          dateOfBirth: new Date(\"1992-11-08\"),\n          gender: \"male\",\n          phone: \"555-345-6789\",\n          email: \"michael.johnson@example.com\",\n          address: \"789 Pine Rd, Elsewhere, ST 54321\",\n          emergencyContact: \"Lisa Johnson - 555-765-4321\"\n        }\n      ];\n      \n      await db.insert(patients).values(samplePatients);\n    }\n  }\n\n  async seedSampleAuthorizations(): Promise<void> {\n    // Check if authorizations already exist\n    const existingAuthorizations = await db.select().from(priorAuthorizations).limit(1);\n    if (existingAuthorizations.length === 0) {\n      // Get sample patients and users for foreign keys\n      const samplePatients = await db.select().from(patients).limit(3);\n      const adminUser = await db.select().from(users).where(eq(users.username, \"admin\")).limit(1);\n      \n      if (samplePatients.length > 0 && adminUser.length > 0) {\n        // Get insurance providers for foreign keys\n        const insuranceProvidersList = await db.select().from(insuranceProviders).limit(3);\n        const firstInsuranceId = insuranceProvidersList.length > 0 ? insuranceProvidersList[0].id : 1;\n        \n        const sampleAuthorizations = [\n          {\n            authorizationId: \"AUTH-2024-001\",\n            patientId: samplePatients[0].id,\n            insuranceId: firstInsuranceId,\n            treatmentType: \"MRI Scan\",\n            cptCode: \"72148\",\n            icd10Code: \"M54.5\",\n            clinicalJustification: \"Patient experiencing chronic lower back pain for 3 months\",\n            requestedDate: new Date(\"2024-01-15T10:30:00Z\"),\n            submittedDate: new Date(\"2024-01-15T10:30:00Z\"),\n            status: \"pending\",\n            submittedBy: adminUser[0].id\n          },\n          {\n            authorizationId: \"AUTH-2024-002\",\n            patientId: samplePatients[1].id,\n            insuranceId: firstInsuranceId,\n            treatmentType: \"Physical Therapy\",\n            cptCode: \"97110\",\n            icd10Code: \"M75.3\",\n            clinicalJustification: \"Patient needs 12 sessions of physical therapy for shoulder impingement\",\n            requestedDate: new Date(\"2024-01-14T14:15:00Z\"),\n            submittedDate: new Date(\"2024-01-14T14:15:00Z\"),\n            status: \"approved\",\n            approvalDate: new Date(\"2024-01-15T09:20:00Z\"),\n            authorizationNumber: \"AUTH-APPR-002\",\n            submittedBy: adminUser[0].id\n          },\n          {\n            authorizationId: \"AUTH-2024-003\",\n            patientId: samplePatients[2].id,\n            insuranceId: firstInsuranceId,\n            treatmentType: \"CT Scan\",\n            cptCode: \"74176\",\n            icd10Code: \"R10.9\",\n            clinicalJustification: \"Patient has persistent abdominal pain requiring imaging\",\n            requestedDate: new Date(\"2024-01-13T11:45:00Z\"),\n            submittedDate: new Date(\"2024-01-13T11:45:00Z\"),\n            status: \"denied\",\n            denialReason: \"Insufficient clinical documentation\",\n            submittedBy: adminUser[0].id\n          },\n          {\n            authorizationId: \"AUTH-2024-004\",\n            patientId: samplePatients[0].id,\n            insuranceId: firstInsuranceId,\n            treatmentType: \"Specialist Consultation\",\n            cptCode: \"99243\",\n            icd10Code: \"R53.1\",\n            clinicalJustification: \"Referral to endocrinologist for chronic fatigue evaluation\",\n            requestedDate: new Date(\"2024-01-16T08:00:00Z\"),\n            submittedDate: new Date(\"2024-01-16T08:00:00Z\"),\n            status: \"pending\",\n            submittedBy: adminUser[0].id\n          },\n          {\n            authorizationId: \"AUTH-2024-005\",\n            patientId: samplePatients[1].id,\n            insuranceId: firstInsuranceId,\n            treatmentType: \"Surgery\",\n            cptCode: \"47562\",\n            icd10Code: \"K80.2\",\n            clinicalJustification: \"Laparoscopic cholecystectomy indicated for gallbladder stones\",\n            requestedDate: new Date(\"2024-01-12T13:20:00Z\"),\n            submittedDate: new Date(\"2024-01-12T13:20:00Z\"),\n            status: \"approved\",\n            approvalDate: new Date(\"2024-01-13T10:15:00Z\"),\n            authorizationNumber: \"AUTH-APPR-005\",\n            submittedBy: adminUser[0].id\n          }\n        ];\n        \n        await db.insert(priorAuthorizations).values(sampleAuthorizations);\n      }\n    }\n  }\n\n  // Procedure Codes Implementation\n  async getAllProcedureCodes(): Promise<ProcedureCode[]> {\n    return await db.select().from(procedureCodes).where(eq(procedureCodes.isActive, true)).orderBy(procedureCodes.cptCode);\n  }\n\n  async getProcedureCode(id: number): Promise<ProcedureCode | undefined> {\n    const [procedure] = await db.select().from(procedureCodes).where(eq(procedureCodes.id, id));\n    return procedure || undefined;\n  }\n\n  async getProcedureCodeByCPT(cptCode: string): Promise<ProcedureCode | undefined> {\n    const [procedure] = await db.select().from(procedureCodes).where(eq(procedureCodes.cptCode, cptCode));\n    return procedure || undefined;\n  }\n\n  async getProcedureCodes(limit = 100, offset = 0): Promise<ProcedureCode[]> {\n    return await db.select().from(procedureCodes)\n      .where(eq(procedureCodes.isActive, true))\n      .limit(limit).offset(offset);\n  }\n\n  async searchProcedureCodes(query: string, category?: string): Promise<ProcedureCode[]> {\n    let queryBuilder = db.select().from(procedureCodes)\n      .where(\n        and(\n          eq(procedureCodes.isActive, true),\n          or(\n            like(procedureCodes.cptCode, `%${query}%`),\n            like(procedureCodes.description, `%${query}%`)\n          )\n        )\n      );\n\n    if (category) {\n      return await db.select().from(procedureCodes)\n        .where(\n          and(\n            eq(procedureCodes.isActive, true),\n            eq(procedureCodes.category, category),\n            or(\n              like(procedureCodes.cptCode, `%${query}%`),\n              like(procedureCodes.description, `%${query}%`)\n            )\n          )\n        )\n        .limit(50);\n    }\n\n    return await queryBuilder.limit(50);\n  }\n\n  async getProceduresByCategory(category: string): Promise<ProcedureCode[]> {\n    return await db.select().from(procedureCodes)\n      .where(\n        and(\n          eq(procedureCodes.isActive, true),\n          eq(procedureCodes.category, category)\n        )\n      );\n  }\n\n  async getProcedureCategories(): Promise<string[]> {\n    const result = await db\n      .selectDistinct({ category: procedureCodes.category })\n      .from(procedureCodes)\n      .where(eq(procedureCodes.isActive, true));\n    \n    return result.map(r => r.category);\n  }\n\n  async createProcedureCode(procedure: InsertProcedureCode): Promise<ProcedureCode> {\n    const [newProcedure] = await db.insert(procedureCodes).values(procedure).returning();\n    return newProcedure;\n  }\n\n  async updateProcedureCode(id: number, updates: Partial<InsertProcedureCode>): Promise<ProcedureCode | undefined> {\n    const [updated] = await db.update(procedureCodes)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(procedureCodes.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  // ICD-10 Codes Implementation\n  async getAllIcd10Codes(): Promise<Icd10Code[]> {\n    return await db.select().from(icd10Codes).where(eq(icd10Codes.isActive, true)).orderBy(icd10Codes.icd10Code);\n  }\n\n  async getIcd10Code(id: number): Promise<Icd10Code | undefined> {\n    const [code] = await db.select().from(icd10Codes).where(eq(icd10Codes.id, id));\n    return code || undefined;\n  }\n\n  async getIcd10CodeByCode(icd10Code: string): Promise<Icd10Code | undefined> {\n    const [code] = await db.select().from(icd10Codes).where(eq(icd10Codes.icd10Code, icd10Code));\n    return code || undefined;\n  }\n\n  async getIcd10Codes(limit = 100, offset = 0): Promise<Icd10Code[]> {\n    return await db.select().from(icd10Codes)\n      .where(eq(icd10Codes.isActive, true))\n      .limit(limit).offset(offset);\n  }\n\n  async searchIcd10Codes(query: string, category?: string): Promise<Icd10Code[]> {\n    let queryBuilder = db.select().from(icd10Codes)\n      .where(\n        and(\n          eq(icd10Codes.isActive, true),\n          or(\n            like(icd10Codes.icd10Code, `%${query}%`),\n            like(icd10Codes.description, `%${query}%`)\n          )\n        )\n      );\n\n    if (category) {\n      return await db.select().from(icd10Codes)\n        .where(\n          and(\n            eq(icd10Codes.isActive, true),\n            eq(icd10Codes.category, category),\n            or(\n              like(icd10Codes.icd10Code, `%${query}%`),\n              like(icd10Codes.description, `%${query}%`)\n            )\n          )\n        )\n        .limit(50);\n    }\n\n    return await queryBuilder.limit(50);\n  }\n\n  async getIcd10CodesByCategory(category: string): Promise<Icd10Code[]> {\n    return await db.select().from(icd10Codes)\n      .where(\n        and(\n          eq(icd10Codes.isActive, true),\n          eq(icd10Codes.category, category)\n        )\n      );\n  }\n\n  async getIcd10CodesByChapter(chapterCode: string): Promise<Icd10Code[]> {\n    return await db.select().from(icd10Codes)\n      .where(\n        and(\n          eq(icd10Codes.isActive, true),\n          eq(icd10Codes.chapterCode, chapterCode)\n        )\n      );\n  }\n\n  async getIcd10Categories(): Promise<string[]> {\n    const result = await db\n      .selectDistinct({ category: icd10Codes.category })\n      .from(icd10Codes)\n      .where(eq(icd10Codes.isActive, true));\n    \n    return result.map(r => r.category).filter((category): category is string => Boolean(category));\n  }\n\n  async createIcd10Code(code: InsertIcd10Code): Promise<Icd10Code> {\n    const [newCode] = await db.insert(icd10Codes).values(code).returning();\n    return newCode;\n  }\n\n  async updateIcd10Code(id: number, updates: Partial<InsertIcd10Code>): Promise<Icd10Code | undefined> {\n    const [updated] = await db.update(icd10Codes)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(icd10Codes.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  // Prior Auth Workflow Steps Implementation\n  async getPriorAuthWorkflowStep(authorizationId: number, stepNumber: number): Promise<PriorAuthWorkflowStep | undefined> {\n    const [step] = await db.select().from(priorAuthWorkflowSteps)\n      .where(\n        and(\n          eq(priorAuthWorkflowSteps.authorizationId, authorizationId),\n          eq(priorAuthWorkflowSteps.stepNumber, stepNumber)\n        )\n      );\n    return step || undefined;\n  }\n\n  async getPriorAuthWorkflowSteps(authorizationId: number): Promise<PriorAuthWorkflowStep[]> {\n    return await db.select().from(priorAuthWorkflowSteps)\n      .where(eq(priorAuthWorkflowSteps.authorizationId, authorizationId))\n      .orderBy(priorAuthWorkflowSteps.stepNumber);\n  }\n\n  async createPriorAuthWorkflowStep(step: InsertPriorAuthWorkflowStep): Promise<PriorAuthWorkflowStep> {\n    const [newStep] = await db.insert(priorAuthWorkflowSteps).values(step).returning();\n    return newStep;\n  }\n\n  async updatePriorAuthWorkflowStep(id: number, updates: Partial<InsertPriorAuthWorkflowStep>): Promise<PriorAuthWorkflowStep | undefined> {\n    const [updated] = await db.update(priorAuthWorkflowSteps)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(priorAuthWorkflowSteps.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  // State Form Templates Implementation\n  async getStateFormTemplate(state: string, formType: string): Promise<StateFormTemplate | undefined> {\n    const [template] = await db.select().from(stateFormTemplates)\n      .where(\n        and(\n          eq(stateFormTemplates.state, state),\n          eq(stateFormTemplates.formType, formType),\n          eq(stateFormTemplates.isActive, true)\n        )\n      );\n    return template || undefined;\n  }\n\n  async getStateFormTemplates(): Promise<StateFormTemplate[]> {\n    return await db.select().from(stateFormTemplates)\n      .where(eq(stateFormTemplates.isActive, true));\n  }\n\n  async createStateFormTemplate(template: InsertStateFormTemplate): Promise<StateFormTemplate> {\n    const [newTemplate] = await db.insert(stateFormTemplates).values(template).returning();\n    return newTemplate;\n  }\n\n  async updateStateFormTemplate(id: number, updates: Partial<InsertStateFormTemplate>): Promise<StateFormTemplate | undefined> {\n    const [updated] = await db.update(stateFormTemplates)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(stateFormTemplates.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  constructor() {\n    this.seedSampleData();\n  }\n\n  async seedSampleData(): Promise<void> {\n    await this.seedMedicalSpecialties();\n    await this.seedDefaultUsers();\n    await this.seedInsuranceProviders();\n    await this.seedSystemConfig();\n    // Disabled sample data creation for production\n    // await this.seedSamplePatients();\n    // await this.seedSampleAuthorizations();\n    \n    // Initialize procedure codes\n    const { procedureCodeService } = await import('./services/procedure-codes');\n    await procedureCodeService.seedProcedureCodes();\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":46883},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, json, varchar, date } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const medicalSpecialties = pgTable(\"medical_specialties\", {\n  id: serial(\"id\").primaryKey(),\n  specialty: text(\"specialty\").notNull(),\n  subspecialty: text(\"subspecialty\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n});\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"staff\"), // admin, doctor, staff\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  specialtyId: integer(\"specialty_id\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Enhanced patients table to match EMR import formats\nexport const patients = pgTable(\"patients\", {\n  id: serial(\"id\").primaryKey(),\n  patientId: text(\"patient_id\").notNull().unique(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  dateOfBirth: timestamp(\"date_of_birth\").notNull(),\n  gender: text(\"gender\"),\n  race: text(\"race\"),\n  ethnicity: text(\"ethnicity\"),\n  ssn: text(\"ssn\"), // Encrypted\n  driversLicense: text(\"drivers_license\"),\n  passport: text(\"passport\"),\n  prefix: text(\"prefix\"),\n  suffix: text(\"suffix\"),\n  maidenName: text(\"maiden_name\"),\n  maritalStatus: text(\"marital_status\"),\n  phone: text(\"phone\"),\n  email: text(\"email\"),\n  address: text(\"address\"),\n  city: text(\"city\"),\n  state: text(\"state\"),\n  county: text(\"county\"),\n  zipCode: text(\"zip_code\"),\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n  birthplace: text(\"birthplace\"),\n  emergencyContact: text(\"emergency_contact\"),\n  emergencyPhone: text(\"emergency_phone\"),\n  // Insurance information (primary insurance on patient record)\n  primaryInsuranceProvider: text(\"primary_insurance_provider\"),\n  policyNumber: text(\"policy_number\"),\n  memberId: text(\"member_id\"),\n  groupNumber: text(\"group_number\"),\n  insuranceEffectiveDate: timestamp(\"insurance_effective_date\"),\n  insuranceExpirationDate: timestamp(\"insurance_expiration_date\"),\n  // Primary Care Provider information\n  pcpName: text(\"pcp_name\"),\n  pcpNpi: text(\"pcp_npi\"),\n  pcpPhone: text(\"pcp_phone\"),\n  pcpAddress: text(\"pcp_address\"),\n  // Import tracking\n  sourceSystem: text(\"source_system\"), // \"Epic\", \"CSV\", \"Manual\", etc.\n  lastImportDate: timestamp(\"last_import_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insuranceProviders = pgTable(\"insurance_providers\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  code: text(\"code\").notNull().unique(),\n  contactInfo: json(\"contact_info\"),\n  // Prior authorization workflow steps\n  priorAuthSteps: json(\"prior_auth_steps\"), // Array of step definitions\n  priorAuthRequirements: json(\"prior_auth_requirements\"), // Special requirements\n  // Contact details for prior auth\n  priorAuthPhone: text(\"prior_auth_phone\"),\n  priorAuthFax: text(\"prior_auth_fax\"),\n  priorAuthEmail: text(\"prior_auth_email\"),\n  priorAuthWebsite: text(\"prior_auth_website\"),\n  // Processing details\n  averageProcessingDays: integer(\"average_processing_days\").default(5),\n  urgentProcessingDays: integer(\"urgent_processing_days\").default(2),\n  // Additional info\n  notes: text(\"notes\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const patientInsurance = pgTable(\"patient_insurance\", {\n  id: serial(\"id\").primaryKey(),\n  patientId: integer(\"patient_id\").notNull(),\n  insuranceProviderId: integer(\"insurance_provider_id\").notNull(),\n  memberId: text(\"member_id\").notNull(),\n  groupNumber: text(\"group_number\"),\n  effectiveDate: timestamp(\"effective_date\").notNull(),\n  expirationDate: timestamp(\"expiration_date\"),\n  isPrimary: boolean(\"is_primary\").notNull().default(true),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Enhanced prior authorizations with complete workflow support\nexport const priorAuthorizations = pgTable(\"prior_authorizations\", {\n  id: serial(\"id\").primaryKey(),\n  authorizationId: text(\"authorization_id\").notNull().unique(),\n  patientId: integer(\"patient_id\").notNull(),\n  insuranceId: integer(\"insurance_id\").notNull(),\n  treatmentType: text(\"treatment_type\").notNull(),\n  cptCodes: text(\"cpt_codes\").array().notNull(), // Array of CPT codes\n  icd10Codes: text(\"icd10_codes\").array().notNull(), // Array of ICD-10 codes\n  clinicalJustification: text(\"clinical_justification\").notNull(),\n  // Enhanced workflow fields\n  requestedDate: timestamp(\"requested_date\").notNull(),\n  submittedDate: timestamp(\"submitted_date\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, in_review, approved, denied, appealed, expired\n  currentStep: integer(\"current_step\").notNull().default(1),\n  totalSteps: integer(\"total_steps\").notNull().default(10),\n  // Prior auth specific fields\n  urgentRequest: boolean(\"urgent_request\").notNull().default(false),\n  previousTreatments: json(\"previous_treatments\"), // Step therapy documentation\n  clinicalEvidence: json(\"clinical_evidence\"), // Lab results, imaging, etc.\n  providerNotes: text(\"provider_notes\"),\n  // Response tracking\n  approvalDate: timestamp(\"approval_date\"),\n  denialReason: text(\"denial_reason\"),\n  authorizationNumber: text(\"authorization_number\"),\n  expirationDate: timestamp(\"expiration_date\"),\n  appealDeadline: timestamp(\"appeal_deadline\"),\n  // State form generation\n  stateFormTemplateId: integer(\"state_form_template_id\"),\n  generatedFormData: json(\"generated_form_data\"),\n  formPackagePath: text(\"form_package_path\"), // Path to generated form package\n  // Assignment and tracking\n  submittedBy: integer(\"submitted_by\").notNull(),\n  assignedTo: integer(\"assigned_to\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const documents = pgTable(\"documents\", {\n  id: serial(\"id\").primaryKey(),\n  authorizationId: integer(\"authorization_id\"),\n  patientId: integer(\"patient_id\"),\n  fileName: text(\"file_name\").notNull(),\n  fileType: text(\"file_type\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  encryptedPath: text(\"encrypted_path\").notNull(),\n  uploadedBy: integer(\"uploaded_by\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Enhanced audit logs with before/after data tracking\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  action: text(\"action\").notNull(),\n  resourceType: text(\"resource_type\").notNull(),\n  resourceId: integer(\"resource_id\"),\n  details: json(\"details\"),\n  // Critical: Store actual data changes for medical/legal compliance\n  beforeData: json(\"before_data\"), // Original data before change\n  afterData: json(\"after_data\"),   // New data after change\n  fieldChanges: json(\"field_changes\"), // Specific field-by-field changes\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\n// Procedure codes table for prior authorization\nexport const procedureCodes = pgTable(\"procedure_codes\", {\n  id: serial(\"id\").primaryKey(),\n  cptCode: text(\"cpt_code\").notNull().unique(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  treatmentType: text(\"treatment_type\").notNull(),\n  subcategory: text(\"subcategory\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  requiresPriorAuth: boolean(\"requires_prior_auth\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// ICD-10 Diagnosis Codes from CMS.gov official source\nexport const icd10Codes = pgTable(\"icd10_codes\", {\n  id: serial(\"id\").primaryKey(),\n  icd10Code: varchar(\"icd10_code\", { length: 10 }).notNull().unique(),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\", { length: 100 }),\n  subcategory: varchar(\"subcategory\", { length: 100 }),\n  chapterCode: varchar(\"chapter_code\", { length: 5 }),\n  chapterDescription: text(\"chapter_description\"),\n  blockCode: varchar(\"block_code\", { length: 10 }),\n  blockDescription: text(\"block_description\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  fiscalYear: varchar(\"fiscal_year\", { length: 10 }).notNull().default(\"2026\"),\n  effectiveDate: date(\"effective_date\"),\n  terminationDate: date(\"termination_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Prior authorization workflow steps tracking\nexport const priorAuthWorkflowSteps = pgTable(\"prior_auth_workflow_steps\", {\n  id: serial(\"id\").primaryKey(),\n  authorizationId: integer(\"authorization_id\").notNull(),\n  stepNumber: integer(\"step_number\").notNull(),\n  stepName: text(\"step_name\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, in_progress, completed, skipped\n  assignedTo: integer(\"assigned_to\"),\n  completedBy: integer(\"completed_by\"),\n  completedAt: timestamp(\"completed_at\"),\n  notes: text(\"notes\"),\n  formData: json(\"form_data\"), // Store form responses for this step\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// State-specific form templates for prior authorization\nexport const stateFormTemplates = pgTable(\"state_form_templates\", {\n  id: serial(\"id\").primaryKey(),\n  state: text(\"state\").notNull(),\n  formType: text(\"form_type\").notNull(), // \"prior_auth\", \"appeal\", etc.\n  formName: text(\"form_name\").notNull(),\n  templatePath: text(\"template_path\").notNull(),\n  fields: json(\"fields\").notNull(), // Form field definitions\n  isActive: boolean(\"is_active\").notNull().default(true),\n  version: text(\"version\").notNull().default(\"1.0\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const appEventLogs = pgTable(\"app_event_logs\", {\n  id: serial(\"id\").primaryKey(),\n  level: varchar(\"level\", { length: 10 }).notNull(), // DEBUG, INFO, WARN, ERROR, FATAL\n  message: text(\"message\").notNull(),\n  component: varchar(\"component\", { length: 50 }).notNull(),\n  userId: integer(\"user_id\").references(() => users.id),\n  sessionId: varchar(\"session_id\", { length: 100 }),\n  requestId: varchar(\"request_id\", { length: 100 }),\n  metadata: text(\"metadata\"), // JSON string\n  stack: text(\"stack\"),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\nexport const systemConfig = pgTable(\"system_config\", {\n  id: serial(\"id\").primaryKey(),\n  key: text(\"key\").notNull().unique(),\n  value: text(\"value\").notNull(),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const medicalSpecialtiesRelations = relations(medicalSpecialties, ({ many }) => ({\n  users: many(users),\n}));\n\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  specialty: one(medicalSpecialties, {\n    fields: [users.specialtyId],\n    references: [medicalSpecialties.id],\n  }),\n  priorAuthorizations: many(priorAuthorizations),\n  documents: many(documents),\n  auditLogs: many(auditLogs),\n}));\n\nexport const patientsRelations = relations(patients, ({ many }) => ({\n  insurance: many(patientInsurance),\n  priorAuthorizations: many(priorAuthorizations),\n  documents: many(documents),\n}));\n\nexport const insuranceProvidersRelations = relations(insuranceProviders, ({ many }) => ({\n  patientInsurance: many(patientInsurance),\n}));\n\nexport const patientInsuranceRelations = relations(patientInsurance, ({ one, many }) => ({\n  patient: one(patients, {\n    fields: [patientInsurance.patientId],\n    references: [patients.id],\n  }),\n  insuranceProvider: one(insuranceProviders, {\n    fields: [patientInsurance.insuranceProviderId],\n    references: [insuranceProviders.id],\n  }),\n  priorAuthorizations: many(priorAuthorizations),\n}));\n\nexport const priorAuthorizationsRelations = relations(priorAuthorizations, ({ one, many }) => ({\n  patient: one(patients, {\n    fields: [priorAuthorizations.patientId],\n    references: [patients.id],\n  }),\n  insurance: one(patientInsurance, {\n    fields: [priorAuthorizations.insuranceId],\n    references: [patientInsurance.id],\n  }),\n  submittedByUser: one(users, {\n    fields: [priorAuthorizations.submittedBy],\n    references: [users.id],\n  }),\n  assignedToUser: one(users, {\n    fields: [priorAuthorizations.assignedTo],\n    references: [users.id],\n  }),\n  stateFormTemplate: one(stateFormTemplates, {\n    fields: [priorAuthorizations.stateFormTemplateId],\n    references: [stateFormTemplates.id],\n  }),\n  documents: many(documents),\n  workflowSteps: many(priorAuthWorkflowSteps),\n}));\n\nexport const documentsRelations = relations(documents, ({ one }) => ({\n  authorization: one(priorAuthorizations, {\n    fields: [documents.authorizationId],\n    references: [priorAuthorizations.id],\n  }),\n  patient: one(patients, {\n    fields: [documents.patientId],\n    references: [patients.id],\n  }),\n  uploadedByUser: one(users, {\n    fields: [documents.uploadedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const auditLogsRelations = relations(auditLogs, ({ one }) => ({\n  user: one(users, {\n    fields: [auditLogs.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const appEventLogsRelations = relations(appEventLogs, ({ one }) => ({\n  user: one(users, {\n    fields: [appEventLogs.userId],\n    references: [users.id],\n  }),\n}));\n\n// New table relations\nexport const procedureCodesRelations = relations(procedureCodes, ({ many }) => ({\n  priorAuthorizations: many(priorAuthorizations),\n}));\n\nexport const priorAuthWorkflowStepsRelations = relations(priorAuthWorkflowSteps, ({ one }) => ({\n  authorization: one(priorAuthorizations, {\n    fields: [priorAuthWorkflowSteps.authorizationId],\n    references: [priorAuthorizations.id],\n  }),\n  assignedToUser: one(users, {\n    fields: [priorAuthWorkflowSteps.assignedTo],\n    references: [users.id],\n  }),\n  completedByUser: one(users, {\n    fields: [priorAuthWorkflowSteps.completedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const stateFormTemplatesRelations = relations(stateFormTemplates, ({ many }) => ({\n  priorAuthorizations: many(priorAuthorizations),\n}));\n\n// Insert schemas\nexport const insertMedicalSpecialtySchema = createInsertSchema(medicalSpecialties).omit({\n  id: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  primaryInsuranceProvider: z.string().optional(),\n  policyNumber: z.string().optional(),\n  memberId: z.string().optional(),\n  groupNumber: z.string().optional(),\n  insuranceEffectiveDate: z.string().optional(),\n  insuranceExpirationDate: z.string().optional(),\n  pcpName: z.string().optional(),\n  pcpNpi: z.string().regex(/^\\d{10}$/, \"NPI must be exactly 10 digits\").optional(),\n  pcpPhone: z.string().optional(),\n  pcpAddress: z.string().optional(),\n});\n\nexport const insertInsuranceProviderSchema = createInsertSchema(insuranceProviders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPatientInsuranceSchema = createInsertSchema(patientInsurance).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPriorAuthorizationSchema = createInsertSchema(priorAuthorizations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertProcedureCodeSchema = createInsertSchema(procedureCodes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPriorAuthWorkflowStepSchema = createInsertSchema(priorAuthWorkflowSteps).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStateFormTemplateSchema = createInsertSchema(stateFormTemplates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAppEventLogSchema = createInsertSchema(appEventLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertSystemConfigSchema = createInsertSchema(systemConfig).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type MedicalSpecialty = typeof medicalSpecialties.$inferSelect;\nexport type InsertMedicalSpecialty = z.infer<typeof insertMedicalSpecialtySchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Patient = typeof patients.$inferSelect;\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\nexport type InsuranceProvider = typeof insuranceProviders.$inferSelect;\nexport type InsertInsuranceProvider = z.infer<typeof insertInsuranceProviderSchema>;\nexport type PatientInsurance = typeof patientInsurance.$inferSelect;\nexport type InsertPatientInsurance = z.infer<typeof insertPatientInsuranceSchema>;\nexport type PriorAuthorization = typeof priorAuthorizations.$inferSelect;\nexport type InsertPriorAuthorization = z.infer<typeof insertPriorAuthorizationSchema>;\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type AppEventLog = typeof appEventLogs.$inferSelect;\nexport type InsertAppEventLog = z.infer<typeof insertAppEventLogSchema>;\nexport type SystemConfig = typeof systemConfig.$inferSelect;\nexport type InsertSystemConfig = z.infer<typeof insertSystemConfigSchema>;\n\n// ICD-10 codes schemas and types\nexport const insertIcd10CodeSchema = createInsertSchema(icd10Codes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// New table types\nexport type ProcedureCode = typeof procedureCodes.$inferSelect;\nexport type InsertProcedureCode = z.infer<typeof insertProcedureCodeSchema>;\nexport type Icd10Code = typeof icd10Codes.$inferSelect;\nexport type InsertIcd10Code = z.infer<typeof insertIcd10CodeSchema>;\nexport type PriorAuthWorkflowStep = typeof priorAuthWorkflowSteps.$inferSelect;\nexport type InsertPriorAuthWorkflowStep = z.infer<typeof insertPriorAuthWorkflowStepSchema>;\nexport type StateFormTemplate = typeof stateFormTemplates.$inferSelect;\nexport type InsertStateFormTemplate = z.infer<typeof insertStateFormTemplateSchema>;\n","size_bytes":19295},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Patients from \"@/pages/patients\";\nimport Authorizations from \"@/pages/authorizations\";\n\nimport Documents from \"@/pages/documents\";\nimport Reports from \"@/pages/reports\";\nimport Audit from \"@/pages/audit\";\nimport AppLogs from \"@/pages/app-logs\";\nimport Profile from \"@/pages/profile\";\nimport Settings from \"@/pages/settings\";\nimport ImportPage from \"@/pages/import\";\nimport Insurance from \"@/pages/insurance\";\n\nimport PriorAuthGenerator from \"@/pages/prior-auth-generator\";\nimport ExternalConnections from \"@/pages/external-connections\";\nimport NotFound from \"@/pages/not-found\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { user, isLoading } = useAuth();\n  \n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-screen\">Loading...</div>;\n  }\n  \n  if (!user) {\n    return <Login />;\n  }\n  \n  return <MainLayout>{children}</MainLayout>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/patients\">\n        <ProtectedRoute>\n          <Patients />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/authorizations\">\n        <ProtectedRoute>\n          <Authorizations />\n        </ProtectedRoute>\n      </Route>\n\n      <Route path=\"/documents\">\n        <ProtectedRoute>\n          <Documents />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/reports\">\n        <ProtectedRoute>\n          <Reports />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/audit\">\n        <ProtectedRoute>\n          <Audit />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/app-logs\">\n        <ProtectedRoute>\n          <AppLogs />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/profile\">\n        <ProtectedRoute>\n          <Profile />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/settings\">\n        <ProtectedRoute>\n          <Settings />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/import\">\n        <ProtectedRoute>\n          <ImportPage />\n        </ProtectedRoute>\n      </Route>\n\n      <Route path=\"/insurance\">\n        <ProtectedRoute>\n          <Insurance />\n        </ProtectedRoute>\n      </Route>\n\n      <Route path=\"/external-connections\">\n        <ProtectedRoute>\n          <ExternalConnections />\n        </ProtectedRoute>\n      </Route>\n\n      <Route path=\"/prior-auth-generator\">\n        <ProtectedRoute>\n          <PriorAuthGenerator />\n        </ProtectedRoute>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3429},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Custom healthcare colors */\n  --healthcare-primary: hsl(207, 90%, 54%);\n  --healthcare-secondary: hsl(122, 39%, 49%);\n  --healthcare-accent: hsl(36, 100%, 66%);\n  --healthcare-error: hsl(0, 65%, 51%);\n  --healthcare-surface: hsl(210, 40%, 98%);\n  --healthcare-neutral: hsl(0, 0%, 26%);\n  --healthcare-success: hsl(122, 39%, 49%);\n  --healthcare-warning: hsl(36, 100%, 66%);\n  --healthcare-pending: hsl(36, 100%, 66%);\n  --healthcare-approved: hsl(122, 39%, 49%);\n  --healthcare-denied: hsl(0, 65%, 51%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n  \n  /* Mobile-first responsive design utilities */\n  html {\n    font-size: 16px;\n  }\n  \n  @media (max-width: 640px) {\n    html {\n      font-size: 14px;\n    }\n  }\n}\n\n@layer components {\n  /* Responsive grid utilities */\n  .responsive-grid {\n    @apply grid gap-4 grid-cols-1;\n  }\n  \n  @media (min-width: 640px) {\n    .responsive-grid {\n      @apply gap-6;\n    }\n  }\n  \n  @media (min-width: 768px) {\n    .responsive-grid {\n      @apply grid-cols-2;\n    }\n  }\n  \n  @media (min-width: 1024px) {\n    .responsive-grid {\n      @apply grid-cols-3;\n    }\n  }\n\n  /* Mobile-friendly card spacing */\n  .mobile-card {\n    @apply p-3 sm:p-4 md:p-6;\n  }\n  \n  /* Responsive text sizing */\n  .responsive-text {\n    @apply text-sm sm:text-base;\n  }\n  \n  .responsive-heading {\n    @apply text-lg sm:text-xl lg:text-2xl;\n  }\n  \n  /* Touch-friendly buttons on mobile */\n  .touch-target {\n    @apply min-h-[44px] min-w-[44px];\n  }\n\n  .status-badge {\n    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;\n  }\n  \n  .status-pending {\n    @apply bg-yellow-100 text-yellow-800;\n  }\n  \n  .status-approved {\n    @apply bg-green-100 text-green-800;\n  }\n  \n  .status-denied {\n    @apply bg-red-100 text-red-800;\n  }\n  \n  .status-appealed {\n    @apply bg-blue-100 text-blue-800;\n  }\n  \n  .healthcare-card {\n    @apply bg-white rounded-lg shadow-sm border border-gray-200 p-6;\n  }\n  \n  .healthcare-button-primary {\n    @apply bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500;\n  }\n  \n  .healthcare-button-secondary {\n    @apply bg-green-600 text-white hover:bg-green-700 focus:ring-green-500;\n  }\n  \n  .healthcare-button-accent {\n    @apply bg-orange-500 text-white hover:bg-orange-600 focus:ring-orange-500;\n  }\n  \n  .hipaa-compliant {\n    @apply bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium;\n  }\n  \n  .audit-logged {\n    @apply bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-medium;\n  }\n  \n  .encrypted {\n    @apply bg-gray-100 text-gray-800 px-2 py-1 rounded-full text-xs font-medium;\n  }\n}\n","size_bytes":4236},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport { storage } from \"../storage\";\nimport { auditService } from \"../services/audit\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    id: number;\n    username: string;\n    email: string;\n    role: string;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nexport const authenticate = async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  try {\n    console.log(\"AUTH: Starting authentication...\");\n    const token = req.headers.authorization?.replace(\"Bearer \", \"\");\n    \n    if (!token) {\n      console.log(\"AUTH: No token provided\");\n      return res.status(401).json({ message: \"No token provided\" });\n    }\n\n    console.log(\"AUTH: Token found, verifying...\");\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    console.log(\"AUTH: Token decoded, getting user...\");\n    const user = await storage.getUser(decoded.id);\n\n    if (!user || !user.isActive) {\n      console.log(\"AUTH: User not found or inactive\");\n      return res.status(401).json({ message: \"Invalid token\" });\n    }\n\n    console.log(\"AUTH: User found, setting req.user...\");\n    req.user = {\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      role: user.role,\n      firstName: user.firstName,\n      lastName: user.lastName,\n    };\n\n    console.log(\"AUTH: Authentication successful, calling next()\");\n    next();\n  } catch (error) {\n    console.log(\"AUTH: Authentication error:\", error);\n    return res.status(401).json({ message: \"Invalid token\" });\n  }\n};\n\nexport const authorize = (roles: string[]) => {\n  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    console.log(\"AUTHORIZE: Starting authorization check...\");\n    if (!req.user) {\n      console.log(\"AUTHORIZE: No user found\");\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    console.log(\"AUTHORIZE: User found, checking role...\");\n    if (!roles.includes(req.user.role)) {\n      console.log(\"AUTHORIZE: Insufficient permissions\");\n      // Temporarily disable audit logging to isolate the issue\n      // auditService.log(req.user.id, \"UNAUTHORIZED_ACCESS\", \"authorization\", null, {\n      //   requiredRoles: roles,\n      //   userRole: req.user.role,\n      //   path: req.path,\n      // }, req.ip, req.get(\"User-Agent\") || \"\");\n      \n      return res.status(403).json({ message: \"Insufficient permissions\" });\n    }\n\n    console.log(\"AUTHORIZE: Authorization successful\");\n    next();\n  };\n};\n\nexport const generateToken = (user: any) => {\n  return jwt.sign(\n    { \n      id: user.id, \n      username: user.username, \n      email: user.email, \n      role: user.role \n    },\n    JWT_SECRET,\n    { expiresIn: \"24h\" }\n  );\n};\n\nexport const verifyToken = (token: string) => {\n  try {\n    return jwt.verify(token, JWT_SECRET) as any;\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const hashPassword = async (password: string): Promise<string> => {\n  return await bcrypt.hash(password, 12);\n};\n\nexport const comparePassword = async (password: string, hash: string): Promise<boolean> => {\n  return await bcrypt.compare(password, hash);\n};\n","size_bytes":3301},"server/middleware/encryption.ts":{"content":"import crypto from \"crypto\";\n\nconst ENCRYPTION_KEY = process.env.ENCRYPTION_KEY || crypto.randomBytes(32).toString('hex');\nconst ALGORITHM = 'aes-256-gcm';\n\nexport const encrypt = (text: string): { encrypted: string; authTag: string; iv: string } => {\n  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipher(ALGORITHM, ENCRYPTION_KEY);\n  cipher.setAAD(Buffer.from('medauth-pro', 'utf8'));\n  \n  let encrypted = cipher.update(text, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  \n  const authTag = cipher.getAuthTag();\n  \n  return {\n    encrypted,\n    authTag: authTag.toString('hex'),\n    iv: iv.toString('hex')\n  };\n};\n\nexport const decrypt = (encrypted: string, authTag: string, iv: string): string => {\n  const decipher = crypto.createDecipher(ALGORITHM, ENCRYPTION_KEY);\n  decipher.setAAD(Buffer.from('medauth-pro', 'utf8'));\n  decipher.setAuthTag(Buffer.from(authTag, 'hex'));\n  \n  let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  \n  return decrypted;\n};\n\nexport const encryptPHI = (data: any): string => {\n  const jsonString = JSON.stringify(data);\n  const result = encrypt(jsonString);\n  return JSON.stringify(result);\n};\n\nexport const decryptPHI = (encryptedData: string): any => {\n  const { encrypted, authTag, iv } = JSON.parse(encryptedData);\n  const decrypted = decrypt(encrypted, authTag, iv);\n  return JSON.parse(decrypted);\n};\n\nexport const hashSensitiveData = (data: string): string => {\n  return crypto.createHash('sha256').update(data).digest('hex');\n};\n","size_bytes":1547},"server/services/audit.ts":{"content":"import { storage } from \"../storage\";\nimport { InsertAuditLog } from \"@shared/schema\";\n\nclass AuditService {\n  // Enhanced audit logging with before/after data tracking for medical/legal compliance\n  async log(\n    userId: number,\n    action: string,\n    resourceType: string,\n    resourceId: number | null,\n    details: any = {},\n    ipAddress: string = '',\n    userAgent: string = '',\n    beforeData: any = null,\n    afterData: any = null\n  ): Promise<void> {\n    try {\n      // Calculate field-by-field changes for detailed audit trail\n      const fieldChanges = this.calculateFieldChanges(beforeData, afterData);\n      \n      const auditLog: InsertAuditLog = {\n        userId,\n        action,\n        resourceType,\n        resourceId,\n        details: {\n          ...details,\n          timestamp: new Date().toISOString(),\n          actionDescription: this.getActionDescription(action, resourceType),\n        },\n        beforeData,\n        afterData,\n        fieldChanges,\n        ipAddress,\n        userAgent,\n      };\n\n      await storage.createAuditLog(auditLog);\n    } catch (error) {\n      console.error('Failed to create audit log:', error);\n      // Don't throw - audit logging failures shouldn't break the main operation\n    }\n  }\n\n  // Calculate detailed field changes for compliance tracking\n  private calculateFieldChanges(beforeData: any, afterData: any): any {\n    if (!beforeData && !afterData) return null;\n    if (!beforeData) return { type: 'CREATE', newFields: Object.keys(afterData || {}) };\n    if (!afterData) return { type: 'DELETE', removedFields: Object.keys(beforeData) };\n\n    const changes: any = { type: 'UPDATE', modifiedFields: {} };\n    \n    // Track all field changes\n    const beforeKeys = Object.keys(beforeData);\n    const afterKeys = Object.keys(afterData);\n    const allKeys = Array.from(new Set([...beforeKeys, ...afterKeys]));\n    \n    for (const key of allKeys) {\n      const oldValue = beforeData[key];\n      const newValue = afterData[key];\n      \n      if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {\n        changes.modifiedFields[key] = {\n          oldValue,\n          newValue,\n          changeType: oldValue === undefined ? 'ADDED' : \n                     newValue === undefined ? 'REMOVED' : 'MODIFIED'\n        };\n      }\n    }\n\n    return Object.keys(changes.modifiedFields).length > 0 ? changes : null;\n  }\n\n  private getActionDescription(action: string, resourceType: string): string {\n    const actionMap: Record<string, string> = {\n      'CREATE': `Created new ${resourceType}`,\n      'UPDATE': `Updated ${resourceType}`,\n      'DELETE': `Deleted ${resourceType}`,\n      'VIEW': `Viewed ${resourceType}`,\n      'DOWNLOAD': `Downloaded ${resourceType}`,\n      'EXPORT': `Exported ${resourceType} data`,\n      'LOGIN_SUCCESS': 'Successful login',\n      'LOGIN_FAILURE': 'Failed login attempt',\n      'LOGOUT': 'User logged out',\n    };\n    \n    return actionMap[action] || `${action} on ${resourceType}`;\n  }\n\n  // Enhanced PHI access logging with data tracking\n  async logPatientAccess(userId: number, patientId: number, action: string, beforeData: any, afterData: any, ipAddress: string, userAgent: string): Promise<void> {\n    await this.log(userId, action, 'patient', patientId, {\n      type: 'PHI_ACCESS',\n      action,\n      patientId,\n      complianceNote: 'HIPAA-tracked PHI access',\n    }, beforeData, afterData, ipAddress, userAgent);\n  }\n\n  // Enhanced data modification logging\n  async logDataModification(userId: number, resourceType: string, resourceId: number, action: string, beforeData: any, afterData: any, ipAddress: string, userAgent: string): Promise<void> {\n    await this.log(userId, action, resourceType, resourceId, {\n      type: 'DATA_MODIFICATION',\n      modificationReason: 'User data entry/update',\n      medicalRecordUpdate: resourceType.includes('patient') || resourceType.includes('authorization'),\n    }, beforeData, afterData, ipAddress, userAgent);\n  }\n\n  // Prior authorization specific logging\n  async logPriorAuthActivity(userId: number, authId: number, action: string, step: string, beforeData: any, afterData: any, ipAddress: string, userAgent: string): Promise<void> {\n    await this.log(userId, action, 'prior_authorization', authId, {\n      type: 'PRIOR_AUTH_WORKFLOW',\n      workflowStep: step,\n      action,\n      medicalNecessity: true,\n    }, beforeData, afterData, ipAddress, userAgent);\n  }\n\n  async logAuthorizationAccess(userId: number, authId: number, action: string, ipAddress: string, userAgent: string): Promise<void> {\n    await this.log(userId, action, 'authorization', authId, {\n      type: 'AUTHORIZATION_ACCESS',\n      action,\n    }, ipAddress, userAgent);\n  }\n\n  async logDocumentAccess(userId: number, documentId: number, action: string, ipAddress: string, userAgent: string): Promise<void> {\n    await this.log(userId, action, 'document', documentId, {\n      type: 'DOCUMENT_ACCESS',\n      action,\n    }, ipAddress, userAgent);\n  }\n\n  async logLogin(userId: number, success: boolean, ipAddress: string, userAgent: string): Promise<void> {\n    await this.log(userId, success ? 'LOGIN_SUCCESS' : 'LOGIN_FAILURE', 'user', userId, {\n      type: 'AUTHENTICATION',\n      success,\n    }, ipAddress, userAgent);\n  }\n\n  async logLogout(userId: number, ipAddress: string, userAgent: string): Promise<void> {\n    await this.log(userId, 'LOGOUT', 'user', userId, {\n      type: 'AUTHENTICATION',\n    }, ipAddress, userAgent);\n  }\n\n  async logDataExport(userId: number, resourceType: string, resourceId: number, ipAddress: string, userAgent: string): Promise<void> {\n    await this.log(userId, 'DATA_EXPORT', resourceType, resourceId, {\n      type: 'DATA_EXPORT',\n      exportedAt: new Date().toISOString(),\n    }, ipAddress, userAgent);\n  }\n\n  async getAuditReport(startDate: Date, endDate: Date, resourceType?: string, userId?: number) {\n    const logs = await storage.getAuditLogs(1000, 0);\n    \n    return logs.filter(log => {\n      const logDate = new Date(log.timestamp);\n      const inDateRange = logDate >= startDate && logDate <= endDate;\n      const matchesResourceType = !resourceType || log.resourceType === resourceType;\n      const matchesUser = !userId || log.userId === userId;\n      \n      return inDateRange && matchesResourceType && matchesUser;\n    });\n  }\n}\n\nexport const auditService = new AuditService();\n","size_bytes":6345},"server/services/insurance.ts":{"content":"import { PatientInsurance, InsuranceProvider } from \"@shared/schema\";\n\nexport interface InsuranceVerificationResult {\n  isValid: boolean;\n  isActive: boolean;\n  coverageDetails: {\n    deductible: number;\n    copay: number;\n    coinsurance: number;\n    outOfPocketMax: number;\n  };\n  priorAuthRequired: boolean;\n  effectiveDate: string;\n  expirationDate: string;\n  memberStatus: string;\n  message: string;\n}\n\nexport interface PriorAuthSubmission {\n  patientId: number;\n  insuranceId: number;\n  treatmentType: string;\n  cptCode: string;\n  icd10Code: string;\n  clinicalJustification: string;\n  requestedDate: string;\n  documents: string[];\n}\n\nexport interface PriorAuthResponse {\n  authorizationId: string;\n  status: 'pending' | 'approved' | 'denied';\n  referenceNumber: string;\n  message: string;\n  expirationDate?: string;\n  denialReason?: string;\n  appealDeadline?: string;\n}\n\nclass InsuranceService {\n  // Mock insurance verification - in production, this would integrate with real insurance APIs\n  async verifyInsurance(insurance: PatientInsurance, provider: InsuranceProvider): Promise<InsuranceVerificationResult> {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Mock different responses based on provider\n    const mockResponses = {\n      'BCBS': {\n        isValid: true,\n        isActive: true,\n        coverageDetails: {\n          deductible: 1000,\n          copay: 25,\n          coinsurance: 20,\n          outOfPocketMax: 5000,\n        },\n        priorAuthRequired: true,\n        memberStatus: 'Active',\n        message: 'Coverage verified successfully',\n      },\n      'AETNA': {\n        isValid: true,\n        isActive: true,\n        coverageDetails: {\n          deductible: 1500,\n          copay: 30,\n          coinsurance: 25,\n          outOfPocketMax: 6000,\n        },\n        priorAuthRequired: true,\n        memberStatus: 'Active',\n        message: 'Coverage verified successfully',\n      },\n      'UNITED': {\n        isValid: true,\n        isActive: true,\n        coverageDetails: {\n          deductible: 2000,\n          copay: 35,\n          coinsurance: 30,\n          outOfPocketMax: 7000,\n        },\n        priorAuthRequired: false,\n        memberStatus: 'Active',\n        message: 'Coverage verified successfully',\n      },\n    };\n\n    const response = mockResponses[provider.code as keyof typeof mockResponses] || mockResponses['BCBS'];\n\n    return {\n      ...response,\n      effectiveDate: insurance.effectiveDate.toISOString(),\n      expirationDate: insurance.expirationDate?.toISOString() || '',\n    };\n  }\n\n  // Mock prior authorization submission\n  async submitPriorAuthorization(submission: PriorAuthSubmission): Promise<PriorAuthResponse> {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    const referenceNumber = `PA-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Mock different responses based on treatment type\n    const mockResponses = {\n      'MRI': {\n        status: 'pending' as const,\n        message: 'Prior authorization request submitted successfully. Review in progress.',\n      },\n      'Physical Therapy': {\n        status: 'approved' as const,\n        message: 'Prior authorization approved. Valid for 90 days.',\n        expirationDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString(),\n      },\n      'Specialty Medication': {\n        status: 'denied' as const,\n        message: 'Prior authorization denied. Alternative treatment required.',\n        denialReason: 'Medical necessity not established. Please provide additional clinical documentation.',\n        appealDeadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n      },\n    };\n\n    const response = mockResponses[submission.treatmentType as keyof typeof mockResponses] || mockResponses['MRI'];\n\n    return {\n      authorizationId: `AUTH-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      referenceNumber,\n      ...response,\n    };\n  }\n\n  // Mock status check\n  async checkAuthorizationStatus(authorizationId: string): Promise<PriorAuthResponse> {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Mock status update\n    const statuses = ['pending', 'approved', 'denied'] as const;\n    const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];\n\n    return {\n      authorizationId,\n      status: randomStatus,\n      referenceNumber: `PA-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      message: `Authorization status: ${randomStatus}`,\n      ...(randomStatus === 'approved' && {\n        expirationDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString(),\n      }),\n      ...(randomStatus === 'denied' && {\n        denialReason: 'Medical necessity not established',\n        appealDeadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n      }),\n    };\n  }\n\n  // Get supported insurance providers\n  getSupportedProviders(): InsuranceProvider[] {\n    return [\n      { id: 1, name: 'Blue Cross Blue Shield', code: 'BCBS', contactInfo: { phone: '1-800-BCBS-INFO' }, isActive: true },\n      { id: 2, name: 'Aetna', code: 'AETNA', contactInfo: { phone: '1-800-AETNA-HELP' }, isActive: true },\n      { id: 3, name: 'UnitedHealth', code: 'UNITED', contactInfo: { phone: '1-800-UNITED-1' }, isActive: true },\n      { id: 4, name: 'Cigna', code: 'CIGNA', contactInfo: { phone: '1-800-CIGNA-24' }, isActive: true },\n    ];\n  }\n\n  // Get treatment types that require prior authorization\n  getTreatmentTypes(): { code: string; name: string; requiresPriorAuth: boolean }[] {\n    return [\n      { code: 'MRI', name: 'MRI Brain w/ Contrast', requiresPriorAuth: true },\n      { code: 'CT', name: 'CT Scan', requiresPriorAuth: true },\n      { code: 'PT', name: 'Physical Therapy', requiresPriorAuth: true },\n      { code: 'SPECIALTY_MED', name: 'Specialty Medication', requiresPriorAuth: true },\n      { code: 'SURGERY', name: 'Surgery', requiresPriorAuth: true },\n      { code: 'ROUTINE_VISIT', name: 'Routine Office Visit', requiresPriorAuth: false },\n    ];\n  }\n}\n\nexport const insuranceService = new InsuranceService();\n","size_bytes":6189},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const storedToken = localStorage.getItem(\"token\");\n    if (storedToken) {\n      setToken(storedToken);\n      fetchUser(storedToken);\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const fetchUser = async (authToken: string) => {\n    try {\n      const response = await fetch(\"/api/users/me\", {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n      } else {\n        localStorage.removeItem(\"token\");\n        setToken(null);\n      }\n    } catch (error) {\n      localStorage.removeItem(\"token\");\n      setToken(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (username: string, password: string) => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", {\n        username,\n        password,\n      });\n\n      const data = await response.json();\n      \n      setToken(data.token);\n      setUser(data.user);\n      localStorage.setItem(\"token\", data.token);\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      throw new Error(\"Login failed\");\n    }\n  };\n\n  const logout = async () => {\n    try {\n      if (token) {\n        await apiRequest(\"POST\", \"/api/auth/logout\", {});\n      }\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    } finally {\n      setUser(null);\n      setToken(null);\n      localStorage.removeItem(\"token\");\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, token, login, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2610},"client/src/hooks/use-mobile.tsx":{"content":"import { useState, useEffect } from \"react\";\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = useState(false);\n\n  useEffect(() => {\n    const checkDevice = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n    \n    checkDevice();\n    window.addEventListener(\"resize\", checkDevice);\n    \n    return () => {\n      window.removeEventListener(\"resize\", checkDevice);\n    };\n  }, []);\n\n  return isMobile;\n}","size_bytes":428},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface LoginCredentials {\n  username: string;\n  password: string;\n}\n\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n}\n\nexport interface AuthResponse {\n  token: string;\n  user: User;\n}\n\nexport const login = async (credentials: LoginCredentials): Promise<AuthResponse> => {\n  const response = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n  return response.json();\n};\n\nexport const logout = async (): Promise<void> => {\n  await apiRequest(\"POST\", \"/api/auth/logout\", {});\n};\n\nexport const getCurrentUser = async (): Promise<User> => {\n  const response = await apiRequest(\"GET\", \"/api/users/me\");\n  return response.json();\n};\n\nexport const getAuthToken = (): string | null => {\n  return localStorage.getItem(\"token\");\n};\n\nexport const setAuthToken = (token: string): void => {\n  localStorage.setItem(\"token\", token);\n};\n\nexport const removeAuthToken = (): void => {\n  localStorage.removeItem(\"token\");\n};\n\nexport const hasRole = (user: User | null, roles: string[]): boolean => {\n  if (!user) return false;\n  return roles.includes(user.role);\n};\n","size_bytes":1195},"client/src/lib/encryption.ts":{"content":"// Client-side encryption utilities for additional security\nexport const hashSensitiveData = async (data: string): Promise<string> => {\n  const encoder = new TextEncoder();\n  const dataBuffer = encoder.encode(data);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n};\n\nexport const generateSecureId = (): string => {\n  const array = new Uint8Array(16);\n  crypto.getRandomValues(array);\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n};\n\nexport const sanitizeInput = (input: string): string => {\n  return input.replace(/[<>]/g, '');\n};\n\nexport const maskSensitiveData = (data: string, visibleChars: number = 4): string => {\n  if (data.length <= visibleChars) return data;\n  const masked = '*'.repeat(data.length - visibleChars);\n  return masked + data.slice(-visibleChars);\n};\n","size_bytes":964},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: any,\n  headers?: Record<string, string>\n): Promise<Response> {\n  const requestHeaders: Record<string, string> = { ...headers };\n  let body: string | undefined;\n  \n  if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n    requestHeaders[\"Content-Type\"] = \"application/json\";\n    body = JSON.stringify(data);\n  }\n  \n  const res = await fetch(url, {\n    method,\n    headers: requestHeaders,\n    body,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1601},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/audit.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { History, Download, Filter, Search, Shield, Eye, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function Audit() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [actionFilter, setActionFilter] = useState(\"all\");\n  const [resourceFilter, setResourceFilter] = useState(\"all\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const { data: auditLogs, isLoading } = useQuery({\n    queryKey: [\"/api/audit/logs\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/audit/logs\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch audit logs\");\n      return response.json();\n    },\n    enabled: user?.role === \"admin\",\n  });\n\n  const handleExportAudit = () => {\n    toast({\n      title: \"Exporting Audit Log\",\n      description: \"Audit log export functionality would be implemented here\",\n    });\n  };\n\n  const handleGenerateReport = () => {\n    if (!startDate || !endDate) {\n      toast({\n        title: \"Date Range Required\",\n        description: \"Please select both start and end dates for the audit report\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    toast({\n      title: \"Generating Audit Report\",\n      description: `Generating audit report for ${startDate} to ${endDate}`,\n    });\n  };\n\n  const getActionIcon = (action: string) => {\n    switch (action) {\n      case \"LOGIN_SUCCESS\":\n      case \"LOGIN_FAILURE\":\n        return <User className=\"h-4 w-4\" />;\n      case \"PATIENT_VIEW\":\n      case \"PATIENT_CREATE\":\n      case \"PATIENT_UPDATE\":\n        return <Eye className=\"h-4 w-4\" />;\n      case \"AUTHORIZATION_VIEW\":\n      case \"AUTHORIZATION_CREATE\":\n      case \"AUTHORIZATION_UPDATE\":\n        return <Shield className=\"h-4 w-4\" />;\n      default:\n        return <History className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getActionColor = (action: string) => {\n    if (action.includes(\"CREATE\")) return \"bg-green-100 text-green-800\";\n    if (action.includes(\"UPDATE\")) return \"bg-blue-100 text-blue-800\";\n    if (action.includes(\"DELETE\")) return \"bg-red-100 text-red-800\";\n    if (action.includes(\"VIEW\")) return \"bg-gray-100 text-gray-800\";\n    if (action.includes(\"LOGIN\")) return \"bg-purple-100 text-purple-800\";\n    return \"bg-yellow-100 text-yellow-800\";\n  };\n\n  const filteredLogs = auditLogs?.filter((log: any) => {\n    const matchesSearch = !searchQuery.trim() || \n      log.action.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      log.resourceType.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesAction = actionFilter === \"all\" || log.action === actionFilter;\n    const matchesResource = resourceFilter === \"all\" || log.resourceType === resourceFilter;\n    \n    return matchesSearch && matchesAction && matchesResource;\n  });\n\n  if (user?.role !== \"admin\") {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <Shield className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Access Restricted</h3>\n              <p className=\"text-sm text-gray-600\">\n                You don't have permission to view audit logs. Contact your administrator.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Audit Trail</h2>\n          <p className=\"text-gray-600\">Monitor system access and user activities</p>\n        </div>\n        <Button onClick={handleExportAudit} className=\"healthcare-button-primary\">\n          <Download className=\"h-4 w-4 mr-2\" />\n          Export Audit Log\n        </Button>\n      </div>\n\n      {/* Audit Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card className=\"healthcare-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Events</p>\n                <p className=\"text-3xl font-bold text-blue-600\">{auditLogs?.length || 0}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                <History className=\"h-6 w-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"healthcare-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Patient Access</p>\n                <p className=\"text-3xl font-bold text-green-600\">\n                  {auditLogs?.filter((log: any) => log.resourceType === \"patient\").length || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                <User className=\"h-6 w-6 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"healthcare-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Auth Events</p>\n                <p className=\"text-3xl font-bold text-purple-600\">\n                  {auditLogs?.filter((log: any) => log.resourceType === \"authorization\").length || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\n                <Shield className=\"h-6 w-6 text-purple-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"healthcare-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Login Events</p>\n                <p className=\"text-3xl font-bold text-orange-600\">\n                  {auditLogs?.filter((log: any) => log.action.includes(\"LOGIN\")).length || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center\">\n                <Eye className=\"h-6 w-6 text-orange-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Report Generation */}\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle>Generate Audit Report</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"startDate\">Start Date</Label>\n              <Input\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"endDate\">End Date</Label>\n              <Input\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n              />\n            </div>\n            \n            <div className=\"flex items-end\">\n              <Button onClick={handleGenerateReport} className=\"healthcare-button-primary\">\n                Generate Report\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Filters */}\n      <Card className=\"healthcare-card\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search by action or resource type...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={actionFilter} onValueChange={setActionFilter}>\n                <SelectTrigger className=\"w-[200px]\">\n                  <SelectValue placeholder=\"Filter by action\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Actions</SelectItem>\n                  <SelectItem value=\"LOGIN_SUCCESS\">Login Success</SelectItem>\n                  <SelectItem value=\"LOGIN_FAILURE\">Login Failure</SelectItem>\n                  <SelectItem value=\"PATIENT_VIEW\">Patient View</SelectItem>\n                  <SelectItem value=\"PATIENT_CREATE\">Patient Create</SelectItem>\n                  <SelectItem value=\"AUTHORIZATION_VIEW\">Authorization View</SelectItem>\n                  <SelectItem value=\"AUTHORIZATION_CREATE\">Authorization Create</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={resourceFilter} onValueChange={setResourceFilter}>\n                <SelectTrigger className=\"w-[200px]\">\n                  <SelectValue placeholder=\"Filter by resource\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Resources</SelectItem>\n                  <SelectItem value=\"user\">User</SelectItem>\n                  <SelectItem value=\"patient\">Patient</SelectItem>\n                  <SelectItem value=\"authorization\">Authorization</SelectItem>\n                  <SelectItem value=\"document\">Document</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Audit Log Table */}\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle>Audit Log Entries</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {Array.from({ length: 10 }).map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"h-4 bg-gray-200 rounded w-full mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Timestamp</TableHead>\n                    <TableHead>User</TableHead>\n                    <TableHead>Action</TableHead>\n                    <TableHead>Resource</TableHead>\n                    <TableHead>IP Address</TableHead>\n                    <TableHead>Details</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredLogs?.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"text-center py-8\">\n                        <div className=\"text-gray-500\">\n                          {searchQuery.trim() ? \"No audit logs found matching your search.\" : \"No audit logs found.\"}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredLogs?.map((log: any) => (\n                      <TableRow key={log.id} className=\"hover:bg-gray-50\">\n                        <TableCell className=\"text-sm\">\n                          {new Date(log.timestamp).toLocaleString()}\n                        </TableCell>\n                        <TableCell className=\"text-sm\">\n                          {user?.username || `User #${log.userId}`}\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={`${getActionColor(log.action)} flex items-center gap-1`}>\n                            {getActionIcon(log.action)}\n                            {log.action}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-sm\">\n                          {log.resourceType}\n                          {log.resourceId && ` #${log.resourceId}`}\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-500\">\n                          {log.ipAddress || \"N/A\"}\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-500\">\n                          {log.details ? (() => {\n                            try {\n                              const details = typeof log.details === 'string' ? JSON.parse(log.details) : log.details;\n                              if (log.action === 'LOGIN_SUCCESS') return 'User logged in successfully';\n                              if (log.action === 'LOGIN_FAILURE') return 'Failed login attempt';\n                              if (log.action === 'PATIENT_VIEW') return `Viewed patient record ${details.patientId || ''}`;\n                              if (log.action === 'PATIENT_CREATE') return `Created new patient record`;\n                              if (log.action === 'AUTHORIZATION_VIEW') return `Viewed authorization ${details.authorizationId || ''}`;\n                              if (log.action === 'AUTHORIZATION_CREATE') return `Created new authorization request`;\n                              if (log.action === 'DASHBOARD_VIEW') return 'Accessed dashboard';\n                              if (log.action === 'AUTHORIZATION_LIST_VIEW') return 'Viewed authorization list';\n                              if (log.action === 'INSURANCE_VERIFICATION') return `Verified insurance for patient ${details.patientId || ''}`;\n                              return Object.keys(details).map(key => `${key}: ${details[key]}`).join(', ');\n                            } catch (e) {\n                              return log.details.toString();\n                            }\n                          })() : \"N/A\"}\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":15524},"client/src/pages/authorizations.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, Filter, Eye, Edit, Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport AuthorizationModal from \"@/components/authorization/authorization-modal\";\nimport StatusBadge from \"@/components/authorization/status-badge\";\nimport StatusDropdown from \"@/components/authorization/status-dropdown\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Authorizations() {\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const { toast } = useToast();\n\n  const { data: authorizations, isLoading } = useQuery({\n    queryKey: [\"/api/authorizations\", page, statusFilter],\n    queryFn: async () => {\n      let url = `/api/authorizations?page=${page}&limit=50`;\n      if (statusFilter !== \"all\") {\n        url = `/api/authorizations/status/${statusFilter}`;\n      }\n      const response = await fetch(url, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch authorizations\");\n      return response.json();\n    },\n  });\n\n  const handleViewAuthorization = (authorization: any) => {\n    // Create modal or navigate to detailed view\n    const cptCodes = authorization.cptCodes || [authorization.cptCode].filter(Boolean);\n    const icd10Codes = authorization.icd10Codes || [authorization.icd10Code].filter(Boolean);\n    \n    const authDetails = `\nAuthorization ID: ${authorization.authorizationId}\nPatient: ${authorization.patient?.firstName || 'N/A'} ${authorization.patient?.lastName || 'N/A'}\nTreatment: ${authorization.treatmentType}\nCPT Codes: ${cptCodes.join(', ') || 'None'}\nICD-10 Codes: ${icd10Codes.join(', ') || 'None'}\nStatus: ${authorization.status}\nSubmitted: ${authorization.submittedDate ? new Date(authorization.submittedDate).toLocaleDateString() : 'Not submitted'}\nInsurance: ${authorization.insurance?.insuranceProvider?.name || 'N/A'}\nClinical Justification: ${authorization.clinicalJustification || 'None provided'}\n    `;\n    \n    alert(`Authorization Details:\\n\\n${authDetails}`);\n  };\n\n  const [editingAuth, setEditingAuth] = useState<any>(null);\n  const [editModalOpen, setEditModalOpen] = useState(false);\n\n  const handleEditAuthorization = (authorization: any) => {\n    console.log(\"Edit authorization:\", authorization);\n    setEditingAuth(authorization);\n    setEditModalOpen(true);\n  };\n\n  const handleAppeal = (authorization: any) => {\n    toast({\n      title: \"Appeal Authorization\",\n      description: `Starting appeal process for ${authorization.authorizationId}`,\n    });\n  };\n\n  const filteredAuthorizations = authorizations?.filter((auth: any) => {\n    if (!searchQuery.trim()) return true;\n    const searchLower = searchQuery.toLowerCase();\n    return (\n      auth.authorizationId.toLowerCase().includes(searchLower) ||\n      auth.treatmentType.toLowerCase().includes(searchLower) ||\n      auth.cptCode.toLowerCase().includes(searchLower)\n    );\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Prior Authorizations</h2>\n          <p className=\"text-gray-600\">Manage and track authorization requests</p>\n        </div>\n        <AuthorizationModal\n          trigger={\n            <Button className=\"healthcare-button-primary\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Authorization Request\n            </Button>\n          }\n        />\n      </div>\n\n      {/* Filters and Search */}\n      <Card className=\"healthcare-card\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search by authorization ID, treatment, or CPT code...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"approved\">Approved</SelectItem>\n                  <SelectItem value=\"denied\">Denied</SelectItem>\n                  <SelectItem value=\"appealed\">Appealed</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                More Filters\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Authorizations Table */}\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle>Authorization Requests</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {Array.from({ length: 5 }).map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"h-4 bg-gray-200 rounded w-full mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Authorization ID</TableHead>\n                    <TableHead>Patient</TableHead>\n                    <TableHead>Treatment</TableHead>\n                    <TableHead>Insurance</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Submitted</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredAuthorizations?.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={7} className=\"text-center py-8\">\n                        <div className=\"text-gray-500\">\n                          {searchQuery.trim() ? \"No authorizations found matching your search.\" : \"No authorizations found.\"}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredAuthorizations?.map((auth: any) => (\n                      <TableRow key={auth.id} className=\"hover:bg-gray-50\">\n                        <TableCell>\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {auth.authorizationId}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            ID: {auth.id}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center\">\n                            <Avatar className=\"h-8 w-8 mr-3\">\n                              <AvatarFallback className=\"bg-gray-300 text-gray-600\">\n                                P\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-900\">\n                                Patient #{auth.patientId}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-gray-900\">\n                            {auth.treatmentType}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            CPT: {auth.cptCodes ? auth.cptCodes.join(', ') : auth.cptCode || 'N/A'}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-gray-900\">\n                            Insurance #{auth.insuranceId}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <StatusDropdown \n                            authorizationId={auth.id}\n                            currentStatus={auth.status}\n                          />\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-500\">\n                          {auth.submittedDate ? new Date(auth.submittedDate).toLocaleDateString() : \"Not submitted\"}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleViewAuthorization(auth)}\n                              className=\"text-blue-600 hover:text-blue-900\"\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditAuthorization(auth)}\n                              className=\"text-gray-600 hover:text-gray-900\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            {auth.status === \"denied\" && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleAppeal(auth)}\n                                className=\"text-orange-600 hover:text-orange-900\"\n                              >\n                                Appeal\n                              </Button>\n                            )}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      \n      {/* Edit Modal */}\n      {editingAuth && (\n        <AuthorizationModal\n          trigger={<div />}\n          isOpen={editModalOpen}\n          onOpenChange={setEditModalOpen}\n          editData={editingAuth}\n          mode=\"edit\"\n          onSuccess={() => {\n            setEditingAuth(null);\n            setEditModalOpen(false);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":11793},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Clock, CheckCircle, XCircle, Timer } from \"lucide-react\";\nimport StatsCard from \"@/components/dashboard/stats-card\";\nimport QuickActions from \"@/components/dashboard/quick-actions\";\nimport AuthorizationTable from \"@/components/authorization/authorization-table\";\nimport AuthorizationModal from \"@/components/authorization/authorization-modal\";\nimport PatientForm from \"@/components/patients/patient-form\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Dashboard() {\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const [showPatientModal, setShowPatientModal] = useState(false);\n  const { toast } = useToast();\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/dashboard/stats\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch stats\");\n      return response.json();\n    },\n  });\n\n  const handleNewAuthorization = () => {\n    setShowAuthModal(true);\n  };\n\n  const handleNewPatient = () => {\n    setShowPatientModal(true);\n  };\n\n  const handleGenerateAuthorization = () => {\n    // Navigate to the Generate PA Package page\n    window.location.href = '/prior-auth-generator';\n  };\n\n  const handleViewAuthorization = (authorization: any) => {\n    toast({\n      title: \"Authorization Details\",\n      description: `Viewing authorization ${authorization.authorizationId}`,\n    });\n  };\n\n  const handleEditAuthorization = (authorization: any) => {\n    toast({\n      title: \"Edit Authorization\",\n      description: `Editing authorization ${authorization.authorizationId}`,\n    });\n  };\n\n  if (statsLoading) {\n    return (\n      <div className=\"space-y-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Dashboard Overview</h2>\n          <p className=\"text-gray-600\">Manage prior authorizations and patient data efficiently</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <div key={i} className=\"healthcare-card animate-pulse\">\n              <div className=\"h-24 bg-gray-200 rounded\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Dashboard Header */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Dashboard Overview</h2>\n        <p className=\"text-gray-600\">Manage prior authorizations and patient data efficiently</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatsCard\n          title=\"Pending Authorizations\"\n          value={stats?.pending || 0}\n          icon={Clock}\n          iconColor=\"text-orange-500\"\n          iconBgColor=\"bg-orange-100\"\n        />\n        <StatsCard\n          title=\"Approved Today\"\n          value={stats?.approved || 0}\n          icon={CheckCircle}\n          iconColor=\"text-green-500\"\n          iconBgColor=\"bg-green-100\"\n        />\n        <StatsCard\n          title=\"Denied/Rejected\"\n          value={stats?.denied || 0}\n          icon={XCircle}\n          iconColor=\"text-red-500\"\n          iconBgColor=\"bg-red-100\"\n        />\n        <StatsCard\n          title=\"Average Processing Time\"\n          value=\"2.4\"\n          subtitle=\"days\"\n          icon={Timer}\n          iconColor=\"text-blue-500\"\n          iconBgColor=\"bg-blue-100\"\n        />\n      </div>\n\n      {/* Quick Actions */}\n      <QuickActions\n        onNewAuthorization={handleNewAuthorization}\n        onNewPatient={handleNewPatient}\n        onGenerateAuthorization={handleGenerateAuthorization}\n      />\n\n      {/* Recent Authorizations Table */}\n      <AuthorizationTable\n        onView={handleViewAuthorization}\n        onEdit={handleEditAuthorization}\n      />\n\n      {/* Modals */}\n      <AuthorizationModal\n        trigger={<div />}\n        isOpen={showAuthModal}\n        onOpenChange={setShowAuthModal}\n        onSuccess={() => setShowAuthModal(false)}\n      />\n      \n      <PatientForm\n        trigger={<div />}\n        isOpen={showPatientModal}\n        onOpenChange={setShowPatientModal}\n        onSuccess={() => setShowPatientModal(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":4574},"client/src/pages/documents.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Search,\n  Upload,\n  FileText,\n  Filter,\n  Eye,\n  Download,\n  Trash2,\n  Calendar,\n} from \"lucide-react\";\n\nexport default function Documents() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filterType, setFilterType] = useState(\"all\");\n  const [selectedPatient, setSelectedPatient] = useState(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch documents from API\n  const { data: documents = [], isLoading: documentsLoading } = useQuery({\n    queryKey: [\"/api/documents\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/documents\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch documents\");\n      return response.json();\n    },\n  });\n\n  // Fetch patients for filter dropdown\n  const { data: patientsData } = useQuery({\n    queryKey: [\"/api/patients\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/patients\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch patients\");\n      return response.json();\n    },\n  });\n\n  const patients = patientsData?.patients || [];\n\n  // Upload mutation\n  const uploadMutation = useMutation({\n    mutationFn: async (fileData: any) => {\n      console.log(\"🌐 [DURING-UPLOAD] Starting API request\", {\n        fileName: fileData.fileName,\n        endpoint: \"/api/documents/upload\",\n        method: \"POST\",\n        hasToken: !!localStorage.getItem(\"token\"),\n        payloadSize: JSON.stringify(fileData).length,\n      });\n\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        console.error(\"❌ [DURING-UPLOAD] Authentication token missing\");\n        throw new Error(\"Authentication required\");\n      }\n      \n      console.log(\"📡 [DURING-UPLOAD] Sending request to server\");\n      \n      const response = await fetch(\"/api/documents/upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`,\n        },\n        body: JSON.stringify(fileData),\n      });\n      \n      console.log(\"📡 [DURING-UPLOAD] Server response received\", {\n        status: response.status,\n        statusText: response.statusText,\n        ok: response.ok,\n        contentType: response.headers.get(\"content-type\"),\n      });\n      \n      if (!response.ok) {\n        console.error(\"❌ [DURING-UPLOAD] Server error response\", {\n          status: response.status,\n          statusText: response.statusText,\n        });\n        \n        const errorText = await response.text();\n        console.error(\"❌ [DURING-UPLOAD] Server error details\", {\n          errorText,\n          errorLength: errorText.length,\n        });\n        \n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n          console.error(\"❌ [DURING-UPLOAD] Parsed error data\", errorData);\n        } catch {\n          errorData = { error: `Upload failed: ${response.status} ${response.statusText}` };\n          console.error(\"❌ [DURING-UPLOAD] Could not parse error response, using fallback\");\n        }\n        throw new Error(errorData.error || errorData.message || \"Upload failed\");\n      }\n      \n      console.log(\"📄 [DURING-UPLOAD] Parsing successful response\");\n      const result = await response.json();\n      \n      console.log(\"✅ [POST-UPLOAD] Document upload completed successfully\", {\n        fileName: fileData.fileName,\n        documentId: result.id,\n        encryptedPath: result.encryptedPath,\n        uploadedBy: result.uploadedBy,\n        timestamp: new Date().toISOString(),\n      });\n      \n      return result;\n    },\n    onSuccess: (result) => {\n      console.log(\"🎉 [POST-UPLOAD] Upload mutation completed successfully\", {\n        documentId: result.id,\n        fileName: result.fileName,\n        completedAt: new Date().toISOString(),\n      });\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\"] });\n      toast({\n        title: \"Upload Complete\",\n        description: \"Document has been uploaded successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      console.error(\"❌ [POST-UPLOAD] Upload mutation failed\", {\n        errorMessage: error.message,\n        errorStack: error.stack,\n        errorName: error.name,\n        timestamp: new Date().toISOString(),\n      });\n      \n      toast({\n        title: \"Upload Failed\",\n        description: error.message || \"Failed to upload document.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (documentId: number) => {\n      const response = await fetch(`/api/documents/${documentId}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to delete document\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\"] });\n      toast({\n        title: \"Document Deleted\",\n        description: \"Document has been deleted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Delete Failed\",\n        description: \"Failed to delete document.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  const handleUpload = (file?: File) => {\n    if (file) {\n      console.log(\"📄 [PRE-UPLOAD] Document upload initiated\", {\n        fileName: file.name,\n        fileSize: file.size,\n        fileType: file.type,\n        selectedPatient,\n        timestamp: new Date().toISOString(),\n      });\n\n      // Validate file size (max 25MB to account for base64 encoding overhead)\n      const maxSize = 25 * 1024 * 1024; // 25MB in bytes\n      if (file.size > maxSize) {\n        console.error(\"❌ [PRE-UPLOAD] File size validation failed\", {\n          fileName: file.name,\n          fileSize: file.size,\n          maxSize,\n          exceeded: file.size - maxSize,\n        });\n        toast({\n          title: \"File Too Large\",\n          description: \"File size must be less than 25MB.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      console.log(\"✅ [PRE-UPLOAD] File size validation passed\");\n\n      // Validate file type\n      const allowedTypes = [\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'application/rtf',\n        'text/plain',\n        'application/vnd.ms-excel',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'application/vnd.ms-excel.sheet.macroEnabled.12',\n        'text/csv',\n        'image/jpeg',\n        'image/jpg',\n        'image/png'\n      ];\n      \n      if (!allowedTypes.includes(file.type) && file.type !== \"\") {\n        console.error(\"❌ [PRE-UPLOAD] File type validation failed\", {\n          fileName: file.name,\n          fileType: file.type,\n          allowedTypes,\n        });\n        toast({\n          title: \"Invalid File Type\",\n          description: \"Please upload a supported file format.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      console.log(\"✅ [PRE-UPLOAD] File type validation passed\");\n      console.log(\"📖 [DURING-UPLOAD] Starting file content reading\");\n\n      // Convert file to base64 for sending to API\n      const reader = new FileReader();\n      reader.onload = () => {\n        console.log(\"✅ [DURING-UPLOAD] File content read successfully\", {\n          contentLength: reader.result ? reader.result.toString().length : 0,\n          encoding: \"base64\",\n        });\n\n        const fileData = {\n          fileName: file.name,\n          fileType: file.type || \"application/octet-stream\",\n          fileSize: file.size,\n          fileContent: reader.result,\n          patientId: selectedPatient !== \"all\" && selectedPatient ? parseInt(selectedPatient) : null,\n          authorizationId: null,\n        };\n        \n        console.log(\"🚀 [DURING-UPLOAD] Initiating upload mutation\", { \n          fileName: file.name, \n          fileType: file.type, \n          fileSize: file.size,\n          patientId: fileData.patientId,\n          base64Length: reader.result ? reader.result.toString().length : 0,\n          timestamp: new Date().toISOString(),\n        });\n        \n        uploadMutation.mutate(fileData);\n      };\n      \n      reader.onerror = (error) => {\n        console.error(\"❌ [DURING-UPLOAD] File reading failed\", {\n          fileName: file.name,\n          error: error,\n          timestamp: new Date().toISOString(),\n        });\n        toast({\n          title: \"File Read Error\",\n          description: \"Failed to read the selected file.\",\n          variant: \"destructive\",\n        });\n      };\n      \n      reader.readAsDataURL(file);\n    } else {\n      // Trigger file input\n      const input = document.createElement('input');\n      input.type = 'file';\n      input.accept = '.pdf,.doc,.docx,.rtf,.txt,.xls,.xlsx,.csv,.jpg,.jpeg,.png';\n      input.onchange = (e) => {\n        const selectedFile = (e.target as HTMLInputElement).files?.[0];\n        if (selectedFile) {\n          handleUpload(selectedFile);\n        }\n      };\n      input.click();\n    }\n  };\n\n  const handleView = async (document: any) => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        toast({\n          title: \"Authentication Error\",\n          description: \"Please log in to view documents\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Fetch document with proper authentication\n      const response = await fetch(`/api/documents/${document.id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch document\");\n      }\n\n      // Create blob URL and open in new tab\n      const blob = await response.blob();\n      const url = URL.createObjectURL(blob);\n      window.open(url, '_blank');\n      \n      toast({\n        title: \"Opening Document\",\n        description: `Opening ${document.fileName} in new tab`,\n      });\n    } catch (error) {\n      toast({\n        title: \"View Error\",\n        description: \"Failed to open the document\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDownload = async (document: any) => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        toast({\n          title: \"Authentication Error\",\n          description: \"Please log in to download documents\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Fetch document with proper authentication\n      const response = await fetch(`/api/documents/${document.id}/download`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to download document\");\n      }\n\n      // Create blob and download\n      const blob = await response.blob();\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = document.fileName;\n      link.style.display = 'none';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      // Clean up the blob URL\n      URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Download Started\",\n        description: `Downloading ${document.fileName}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Download Error\",\n        description: \"Failed to download the document\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDelete = (document: any) => {\n    if (confirm(`Are you sure you want to delete ${document.fileName}?`)) {\n      deleteMutation.mutate(document.id);\n    }\n  };\n\n  const filteredDocuments = documents.filter((doc: any) => {\n    const matchesSearch = !searchQuery.trim() || \n      doc.fileName.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = filterType === \"all\" || doc.fileType.toLowerCase().includes(filterType.toLowerCase());\n    const matchesPatient = selectedPatient === \"all\" || !selectedPatient || doc.patientId?.toString() === selectedPatient;\n    \n    return matchesSearch && matchesType && matchesPatient;\n  });\n\n  const getPatientName = (patientId: number) => {\n    const patient = patients.find((p: any) => p.id === patientId);\n    return patient ? `${patient.firstName} ${patient.lastName}` : \"Unknown Patient\";\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold text-gray-900\">Document Management</h1>\n        <p className=\"text-gray-600 mt-1\">Manage and organize patient documents and authorization files</p>\n      </div>\n\n      {/* Upload Section */}\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle>Upload New Document</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n            <Upload className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-600 mb-2\">Drag and drop files here or click to browse</p>\n            <p className=\"text-sm text-gray-500 mb-4\">\n              Supported formats: PDF, DOC, DOCX, RTF, TXT, XLS, XLSX, JPG, PNG (Max 25MB)\n            </p>\n            <input\n              type=\"file\"\n              accept=\".pdf,.doc,.docx,.rtf,.txt,.xls,.xlsx,.jpg,.jpeg,.png\"\n              onChange={(e) => {\n                const file = e.target.files?.[0];\n                if (file) handleUpload(file);\n              }}\n              className=\"hidden\"\n              id=\"document-upload\"\n            />\n            <label htmlFor=\"document-upload\">\n              <Button \n                asChild \n                variant=\"outline\" \n                disabled={uploadMutation.isPending}\n              >\n                <span>\n                  {uploadMutation.isPending ? \"Uploading...\" : \"Browse Files\"}\n                </span>\n              </Button>\n            </label>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Search and Filter Section */}\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            Document Library\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search documents...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-4\">\n              <Select value={filterType} onValueChange={setFilterType}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"File Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"pdf\">PDF</SelectItem>\n                  <SelectItem value=\"doc\">Document</SelectItem>\n                  <SelectItem value=\"image\">Image</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={selectedPatient} onValueChange={setSelectedPatient}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"All Patients\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Patients</SelectItem>\n                  {patients.map((patient: any) => (\n                    <SelectItem key={patient.id} value={patient.id.toString()}>\n                      {patient.firstName} {patient.lastName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Documents Table */}\n          {documentsLoading ? (\n            <div className=\"text-center py-8\">Loading documents...</div>\n          ) : filteredDocuments.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              {documents.length === 0 ? \"No documents uploaded yet.\" : \"No documents match your filters.\"}\n            </div>\n          ) : (\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>File Name</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Size</TableHead>\n                    <TableHead>Patient</TableHead>\n                    <TableHead>Upload Date</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredDocuments.map((doc: any) => (\n                    <TableRow key={doc.id}>\n                      <TableCell className=\"font-medium\">{doc.fileName}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{doc.fileType}</Badge>\n                      </TableCell>\n                      <TableCell>{formatFileSize(doc.fileSize)}</TableCell>\n                      <TableCell>\n                        {doc.patientId ? getPatientName(doc.patientId) : \"N/A\"}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center text-sm text-gray-500\">\n                          <Calendar className=\"h-4 w-4 mr-1\" />\n                          {new Date(doc.createdAt).toLocaleDateString()}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleView(doc)}\n                            className=\"text-blue-600 hover:text-blue-900\"\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDownload(doc)}\n                            className=\"text-green-600 hover:text-green-900\"\n                          >\n                            <Download className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(doc)}\n                            className=\"text-red-600 hover:text-red-900\"\n                            disabled={deleteMutation.isPending}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":20722},"client/src/pages/insurance.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Edit, Trash2, Building, Phone, Mail, Globe } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle, \n  DialogTrigger \n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { \n  Form, \n  FormControl, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Form schema for insurance providers\nconst insuranceProviderSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  code: z.string().min(2, \"Code must be at least 2 characters\").max(10, \"Code must be less than 10 characters\"),\n  priorAuthPhone: z.string().optional(),\n  priorAuthFax: z.string().optional(),\n  priorAuthEmail: z.string().email().optional().or(z.literal(\"\")),\n  priorAuthWebsite: z.string().url().optional().or(z.literal(\"\")),\n  averageProcessingDays: z.number().min(1).max(30).default(5),\n  urgentProcessingDays: z.number().min(1).max(10).default(2),\n  notes: z.string().optional(),\n  priorAuthSteps: z.array(z.object({\n    stepNumber: z.number(),\n    stepName: z.string(),\n    description: z.string().optional(),\n    required: z.boolean().default(true),\n  })).optional(),\n});\n\ntype InsuranceProviderFormData = z.infer<typeof insuranceProviderSchema>;\n\ninterface InsuranceProvider {\n  id: number;\n  name: string;\n  code: string;\n  priorAuthPhone?: string;\n  priorAuthFax?: string;\n  priorAuthEmail?: string;\n  priorAuthWebsite?: string;\n  averageProcessingDays?: number;\n  urgentProcessingDays?: number;\n  notes?: string;\n  priorAuthSteps?: any[];\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function Insurance() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [editingProvider, setEditingProvider] = useState<InsuranceProvider | null>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: providers, isLoading } = useQuery({\n    queryKey: [\"/api/insurance/providers\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/insurance/providers\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch insurance providers\");\n      return response.json();\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsuranceProviderFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/insurance/providers\", data, {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/insurance/providers\"] });\n      setIsDialogOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Insurance provider created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create insurance provider\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<InsuranceProviderFormData> }) => {\n      const response = await apiRequest(\"PUT\", `/api/insurance/providers/${id}`, data, {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/insurance/providers\"] });\n      setIsDialogOpen(false);\n      setEditingProvider(null);\n      toast({\n        title: \"Success\",\n        description: \"Insurance provider updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update insurance provider\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(\"DELETE\", `/api/insurance/providers/${id}`, undefined, {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/insurance/providers\"] });\n      toast({\n        title: \"Success\",\n        description: \"Insurance provider deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete insurance provider\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<InsuranceProviderFormData>({\n    resolver: zodResolver(insuranceProviderSchema),\n    defaultValues: {\n      name: \"\",\n      code: \"\",\n      priorAuthPhone: \"\",\n      priorAuthFax: \"\",\n      priorAuthEmail: \"\",\n      priorAuthWebsite: \"\",\n      averageProcessingDays: 5,\n      urgentProcessingDays: 2,\n      notes: \"\",\n      priorAuthSteps: [\n        { stepNumber: 1, stepName: \"Initial Review\", description: \"Review request for completeness\", required: true },\n        { stepNumber: 2, stepName: \"Clinical Review\", description: \"Medical necessity review\", required: true },\n        { stepNumber: 3, stepName: \"Decision\", description: \"Approve or deny request\", required: true },\n      ],\n    },\n  });\n\n  const onSubmit = (data: InsuranceProviderFormData) => {\n    if (editingProvider) {\n      updateMutation.mutate({ id: editingProvider.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (provider: InsuranceProvider) => {\n    setEditingProvider(provider);\n    form.reset({\n      name: provider.name,\n      code: provider.code,\n      priorAuthPhone: provider.priorAuthPhone || \"\",\n      priorAuthFax: provider.priorAuthFax || \"\",\n      priorAuthEmail: provider.priorAuthEmail || \"\",\n      priorAuthWebsite: provider.priorAuthWebsite || \"\",\n      averageProcessingDays: provider.averageProcessingDays || 5,\n      urgentProcessingDays: provider.urgentProcessingDays || 2,\n      notes: provider.notes || \"\",\n      priorAuthSteps: provider.priorAuthSteps || [],\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: number) => {\n    deleteMutation.mutate(id);\n  };\n\n  const filteredProviders = providers?.filter((provider: InsuranceProvider) =>\n    provider.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    provider.code.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  const closeDialog = () => {\n    setIsDialogOpen(false);\n    setEditingProvider(null);\n    form.reset();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Insurance Providers</h2>\n          <p className=\"text-gray-600\">Manage insurance provider profiles and prior authorization workflows</p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button \n              className=\"healthcare-button-primary\"\n              onClick={() => {\n                setEditingProvider(null);\n                form.reset();\n              }}\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Insurance Provider\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingProvider ? \"Edit Insurance Provider\" : \"New Insurance Provider\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Provider Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., Blue Cross Blue Shield\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"code\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Provider Code</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., BCBS\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"priorAuthPhone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Prior Auth Phone</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"1-800-XXX-XXXX\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"priorAuthFax\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Prior Auth Fax</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"1-800-XXX-XXXX\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"priorAuthEmail\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Prior Auth Email</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"priorauth@insurance.com\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"priorAuthWebsite\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Prior Auth Website</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"https://provider.com/priorauth\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"averageProcessingDays\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Average Processing Days</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            min=\"1\" \n                            max=\"30\" \n                            {...field} \n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"urgentProcessingDays\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Urgent Processing Days</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            min=\"1\" \n                            max=\"10\" \n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Additional Notes</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Special requirements, processing notes, etc.\" \n                          rows={3}\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={closeDialog}>\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending || updateMutation.isPending}\n                    className=\"healthcare-button-primary\"\n                  >\n                    {createMutation.isPending || updateMutation.isPending ? \"Saving...\" : \"Save Provider\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search */}\n      <Card className=\"healthcare-card\">\n        <CardContent className=\"p-4\">\n          <Input\n            placeholder=\"Search insurance providers...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"max-w-md\"\n          />\n        </CardContent>\n      </Card>\n\n      {/* Providers Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {isLoading ? (\n          Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i} className=\"healthcare-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"animate-pulse space-y-4\">\n                  <div className=\"h-6 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-full\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          filteredProviders.map((provider: InsuranceProvider) => (\n            <Card key={provider.id} className=\"healthcare-card hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <Building className=\"h-5 w-5 text-blue-600\" />\n                      {provider.name}\n                    </CardTitle>\n                    <Badge variant=\"secondary\" className=\"mt-1\">\n                      {provider.code}\n                    </Badge>\n                  </div>\n                  <div className=\"flex space-x-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(provider)}\n                      className=\"text-blue-600 hover:text-blue-900\"\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-red-600 hover:text-red-900\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>Delete Insurance Provider</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            Are you sure you want to delete {provider.name}? This will deactivate the provider but preserve historical data.\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                          <AlertDialogAction \n                            onClick={() => handleDelete(provider.id)}\n                            className=\"bg-red-600 hover:bg-red-700\"\n                          >\n                            Delete\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"space-y-3\">\n                  {provider.priorAuthPhone && (\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Phone className=\"h-4 w-4 text-gray-500\" />\n                      <span>{provider.priorAuthPhone}</span>\n                    </div>\n                  )}\n                  {provider.priorAuthEmail && (\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Mail className=\"h-4 w-4 text-gray-500\" />\n                      <span>{provider.priorAuthEmail}</span>\n                    </div>\n                  )}\n                  {provider.priorAuthWebsite && (\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Globe className=\"h-4 w-4 text-gray-500\" />\n                      <a \n                        href={provider.priorAuthWebsite} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"text-blue-600 hover:underline\"\n                      >\n                        Prior Auth Portal\n                      </a>\n                    </div>\n                  )}\n                  <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                    <div>\n                      <span className=\"text-gray-500\">Avg Processing:</span>\n                      <span className=\"ml-1 font-medium\">{provider.averageProcessingDays || 5} days</span>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">Urgent:</span>\n                      <span className=\"ml-1 font-medium\">{provider.urgentProcessingDays || 2} days</span>\n                    </div>\n                  </div>\n                  {provider.notes && (\n                    <div className=\"text-sm text-gray-600 border-t pt-2\">\n                      {provider.notes}\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {filteredProviders.length === 0 && !isLoading && (\n        <Card className=\"healthcare-card\">\n          <CardContent className=\"p-8 text-center\">\n            <Building className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              {searchQuery ? \"No providers found\" : \"No insurance providers\"}\n            </h3>\n            <p className=\"text-gray-600 mb-4\">\n              {searchQuery \n                ? \"Try adjusting your search terms.\"\n                : \"Get started by adding your first insurance provider.\"\n              }\n            </p>\n            {!searchQuery && (\n              <Button \n                className=\"healthcare-button-primary\"\n                onClick={() => setIsDialogOpen(true)}\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Insurance Provider\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":21644},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Shield, Eye, Tag, Lock } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Login() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const { login } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    setIsLoading(true);\n\n    try {\n      await login(username, password);\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome to MedAuth Pro\",\n      });\n      setLocation(\"/\");\n    } catch (err) {\n      setError(\"Invalid username or password\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"flex justify-center\">\n          <Shield className=\"h-12 w-12 text-blue-600\" />\n        </div>\n        <h2 className=\"mt-6 text-center text-3xl font-bold text-gray-900\">\n          MedAuth Pro\n        </h2>\n        <p className=\"mt-2 text-center text-sm text-gray-600\">\n          Prior Authorization Management System\n        </p>\n      </div>\n\n      <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Sign in to your account</CardTitle>\n            <CardDescription>\n              Access your secure healthcare management portal\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n              \n              <div>\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  required\n                  className=\"mt-1\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  className=\"mt-1\"\n                />\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"w-full healthcare-button-primary\"\n              >\n                {isLoading ? \"Signing in...\" : \"Sign in\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Security indicators */}\n        <div className=\"mt-6 flex justify-center space-x-6 text-sm text-gray-600\">\n          <div className=\"flex items-center\">\n            <Lock className=\"h-4 w-4 text-green-600 mr-1\" />\n            <span>End-to-End Encrypted</span>\n          </div>\n          <div className=\"flex items-center\">\n            <Eye className=\"h-4 w-4 text-blue-600 mr-1\" />\n            <span>Audit Logged</span>\n          </div>\n          <div className=\"flex items-center\">\n            <Tag className=\"h-4 w-4 text-green-600 mr-1\" />\n            <span>HIPAA Compliant</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4102},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/patients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Search, UserPlus, Eye, Edit, Trash2, AlertTriangle, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport PatientForm from \"@/components/patients/patient-form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport default function Patients() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const { toast } = useToast();\n  const { token } = useAuth();\n\n  // Delete single patient mutation\n  const deletePatientMutation = useMutation({\n    mutationFn: async (patientId: number) => {\n      const response = await fetch(`/api/patients/${patientId}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to delete patient');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      toast({\n        title: \"Patient Deleted\",\n        description: \"Patient record has been successfully deleted.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete patient. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete all patients mutation\n  const deleteAllPatientsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/patients-deleteall', {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to delete all patients');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      toast({\n        title: \"All Patients Deleted\",\n        description: \"All patient records have been successfully deleted.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete all patients. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const { data: patientsData, isLoading } = useQuery({\n    queryKey: [\"/api/patients\", page],\n    queryFn: async () => {\n      const response = await fetch(`/api/patients?page=${page}&limit=50`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch patients\");\n      return response.json();\n    },\n  });\n\n  const patients = patientsData?.patients || [];\n  const totalPages = patientsData?.totalPages || 1;\n  const totalCount = patientsData?.totalCount || 0;\n\n  const { data: searchResults, isLoading: searchLoading } = useQuery({\n    queryKey: [\"/api/patients/search\", searchQuery],\n    queryFn: async () => {\n      if (!searchQuery.trim()) return [];\n      const response = await fetch(`/api/patients/search?q=${encodeURIComponent(searchQuery)}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to search patients\");\n      return response.json();\n    },\n    enabled: searchQuery.trim().length > 0,\n  });\n\n  const [viewingPatient, setViewingPatient] = useState<any>(null);\n  const [editingPatient, setEditingPatient] = useState<any>(null);\n  const [viewModalOpen, setViewModalOpen] = useState(false);\n  const [editModalOpen, setEditModalOpen] = useState(false);\n\n  const handleViewPatient = (patient: any) => {\n    setViewingPatient(patient);\n    setViewModalOpen(true);\n  };\n\n  const handleEditPatient = (patient: any) => {\n    setEditingPatient(patient);\n    setEditModalOpen(true);\n  };\n\n  const handleDeletePatient = (patient: any) => {\n    deletePatientMutation.mutate(patient.id);\n  };\n\n  const handleDeleteAllPatients = () => {\n    deleteAllPatientsMutation.mutate();\n  };\n\n  const displayedPatients = searchQuery.trim() ? (searchResults || []) : (patients || []);\n  const loading = searchQuery.trim() ? searchLoading : isLoading;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Patient Management</h2>\n          <p className=\"text-gray-600\">Manage patient records and information ({totalCount} total patients)</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <AlertDialog>\n            <AlertDialogTrigger asChild>\n              <Button variant=\"destructive\" disabled={totalCount === 0}>\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                Delete All Records\n              </Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle>Delete All Patient Records</AlertDialogTitle>\n                <AlertDialogDescription>\n                  This action cannot be undone. This will permanently delete all {totalCount} patient records and remove all data from our servers.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                <AlertDialogAction onClick={handleDeleteAllPatients} className=\"bg-red-600 hover:bg-red-700\">\n                  Delete All Records\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n          <PatientForm\n            trigger={\n              <Button className=\"healthcare-button-primary\">\n                <UserPlus className=\"h-4 w-4 mr-2\" />\n                Add New Patient\n              </Button>\n            }\n          />\n        </div>\n      </div>\n\n      {/* Search Bar */}\n      <Card className=\"healthcare-card\">\n        <CardContent className=\"p-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <Input\n              placeholder=\"Search patients by name or ID...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Patients Table */}\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <CardTitle>\n              {searchQuery.trim() ? \"Search Results\" : `All Patients (Page ${page} of ${totalPages})`}\n            </CardTitle>\n            {!searchQuery.trim() && totalPages > 1 && (\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setPage(p => Math.max(1, p - 1))}\n                  disabled={page === 1}\n                >\n                  <ChevronLeft className=\"h-4 w-4\" />\n                  Previous\n                </Button>\n                <span className=\"text-sm text-gray-600\">\n                  Page {page} of {totalPages}\n                </span>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setPage(p => Math.min(totalPages, p + 1))}\n                  disabled={page === totalPages}\n                >\n                  Next\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            )}\n          </div>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"space-y-4\">\n              {Array.from({ length: 5 }).map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"h-4 bg-gray-200 rounded w-full mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Patient</TableHead>\n                    <TableHead>Date of Birth</TableHead>\n                    <TableHead>Phone</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Emergency Contact</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {!Array.isArray(displayedPatients) || displayedPatients.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"text-center py-8\">\n                        <div className=\"text-gray-500\">\n                          {searchQuery.trim() ? \"No patients found matching your search.\" : \"No patients found.\"}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    Array.isArray(displayedPatients) && displayedPatients.map((patient: any) => (\n                      <TableRow key={patient.id} className=\"hover:bg-gray-50\">\n                        <TableCell>\n                          <div className=\"flex items-center\">\n                            <Avatar className=\"h-10 w-10 mr-3\">\n                              <AvatarFallback className=\"bg-blue-100 text-blue-600\">\n                                {patient.firstName.charAt(0)}{patient.lastName.charAt(0)}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-900\">\n                                {patient.firstName} {patient.lastName}\n                              </div>\n                              <div className=\"text-sm text-gray-500\">\n                                ID: {patient.patientId}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-500\">\n                          {new Date(patient.dateOfBirth).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-500\">\n                          {patient.phone || \"N/A\"}\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-500\">\n                          {patient.email || \"N/A\"}\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-500\">\n                          {patient.emergencyContact || \"N/A\"}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleViewPatient(patient)}\n                              className=\"text-blue-600 hover:text-blue-900\"\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditPatient(patient)}\n                              className=\"text-gray-600 hover:text-gray-900\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <AlertDialog>\n                              <AlertDialogTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"text-red-600 hover:text-red-900\"\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </AlertDialogTrigger>\n                              <AlertDialogContent>\n                                <AlertDialogHeader>\n                                  <AlertDialogTitle>Delete Patient</AlertDialogTitle>\n                                  <AlertDialogDescription>\n                                    Are you sure you want to delete {patient.firstName} {patient.lastName}? This action cannot be undone.\n                                  </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                  <AlertDialogAction onClick={() => handleDeletePatient(patient)} className=\"bg-red-600 hover:bg-red-700\">\n                                    Delete Patient\n                                  </AlertDialogAction>\n                                </AlertDialogFooter>\n                              </AlertDialogContent>\n                            </AlertDialog>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      \n      {/* View Patient Modal */}\n      {viewingPatient && (\n        <Dialog open={viewModalOpen} onOpenChange={setViewModalOpen}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Patient Details</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">First Name</label>\n                  <div className=\"text-sm text-gray-900 mt-1\">{viewingPatient.firstName}</div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Last Name</label>\n                  <div className=\"text-sm text-gray-900 mt-1\">{viewingPatient.lastName}</div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Date of Birth</label>\n                  <div className=\"text-sm text-gray-900 mt-1\">\n                    {new Date(viewingPatient.dateOfBirth).toLocaleDateString()}\n                  </div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Patient ID</label>\n                  <div className=\"text-sm text-gray-900 mt-1\">{viewingPatient.patientId}</div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Phone</label>\n                  <div className=\"text-sm text-gray-900 mt-1\">{viewingPatient.phone || 'N/A'}</div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Email</label>\n                  <div className=\"text-sm text-gray-900 mt-1\">{viewingPatient.email || 'N/A'}</div>\n                </div>\n                <div className=\"md:col-span-2\">\n                  <label className=\"text-sm font-medium text-gray-700\">Address</label>\n                  <div className=\"text-sm text-gray-900 mt-1\">{viewingPatient.address || 'N/A'}</div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Emergency Contact</label>\n                  <div className=\"text-sm text-gray-900 mt-1\">{viewingPatient.emergencyContact || 'N/A'}</div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Emergency Phone</label>\n                  <div className=\"text-sm text-gray-900 mt-1\">{viewingPatient.emergencyPhone || 'N/A'}</div>\n                </div>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n      \n      {/* Edit Patient Modal */}\n      {editingPatient && (\n        <PatientForm\n          trigger={<div />}\n          isOpen={editModalOpen}\n          onOpenChange={setEditModalOpen}\n          editData={editingPatient}\n          mode=\"edit\"\n          onSuccess={() => {\n            setEditingPatient(null);\n            setEditModalOpen(false);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":17412},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { BarChart3, Download, Calendar, TrendingUp, Users, ClipboardCheck } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Reports() {\n  const [reportType, setReportType] = useState(\"authorizations\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/dashboard/stats\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch stats\");\n      return response.json();\n    },\n  });\n\n  const { data: authorizations } = useQuery({\n    queryKey: [\"/api/authorizations\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/authorizations\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch authorizations\");\n      return response.json();\n    },\n  });\n\n  const handleGenerateReport = () => {\n    if (!startDate || !endDate) {\n      toast({\n        title: \"Date Range Required\",\n        description: \"Please select both start and end dates\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    toast({\n      title: \"Generating Report\",\n      description: `Generating ${reportType} report for ${startDate} to ${endDate}`,\n    });\n  };\n\n  const handleExportReport = () => {\n    toast({\n      title: \"Exporting Report\",\n      description: \"Report export functionality would be implemented here\",\n    });\n  };\n\n  // Mock performance data\n  const performanceData = [\n    { month: \"Jan\", pending: 45, approved: 32, denied: 8 },\n    { month: \"Feb\", pending: 52, approved: 38, denied: 12 },\n    { month: \"Mar\", pending: 48, approved: 41, denied: 7 },\n    { month: \"Apr\", pending: 61, approved: 45, denied: 14 },\n    { month: \"May\", pending: 55, approved: 48, denied: 9 },\n    { month: \"Jun\", pending: 67, approved: 52, denied: 11 },\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\": return \"bg-yellow-100 text-yellow-800\";\n      case \"approved\": return \"bg-green-100 text-green-800\";\n      case \"denied\": return \"bg-red-100 text-red-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Reports & Analytics</h2>\n          <p className=\"text-gray-600\">Generate reports and analyze practice performance</p>\n        </div>\n        <Button onClick={handleExportReport} className=\"healthcare-button-primary\">\n          <Download className=\"h-4 w-4 mr-2\" />\n          Export Report\n        </Button>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"healthcare-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Authorizations</p>\n                <p className=\"text-3xl font-bold text-blue-600\">{stats?.total || 0}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                <ClipboardCheck className=\"h-6 w-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"healthcare-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Approval Rate</p>\n                <p className=\"text-3xl font-bold text-green-600\">\n                  {stats?.total > 0 ? Math.round((stats.approved / stats.total) * 100) : 0}%\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                <TrendingUp className=\"h-6 w-6 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"healthcare-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Avg Processing Time</p>\n                <p className=\"text-3xl font-bold text-purple-600\">2.4</p>\n                <p className=\"text-sm text-gray-500\">days</p>\n              </div>\n              <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\n                <BarChart3 className=\"h-6 w-6 text-purple-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Report Generation */}\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle>Generate Custom Report</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"reportType\">Report Type</Label>\n              <Select value={reportType} onValueChange={setReportType}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select report type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"authorizations\">Authorization Summary</SelectItem>\n                  <SelectItem value=\"patients\">Patient Activity</SelectItem>\n                  <SelectItem value=\"insurance\">Insurance Performance</SelectItem>\n                  <SelectItem value=\"financial\">Financial Analysis</SelectItem>\n                  <SelectItem value=\"compliance\">Compliance Report</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"startDate\">Start Date</Label>\n              <Input\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"endDate\">End Date</Label>\n              <Input\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end\">\n            <Button onClick={handleGenerateReport} className=\"healthcare-button-primary\">\n              Generate Report\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Performance Chart */}\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle>Authorization Performance (Last 6 Months)</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {performanceData.map((data, index) => (\n              <div key={index} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                <div className=\"font-medium text-gray-900\">{data.month}</div>\n                <div className=\"flex space-x-4\">\n                  <div className=\"text-sm\">\n                    <span className=\"text-yellow-600\">Pending: {data.pending}</span>\n                  </div>\n                  <div className=\"text-sm\">\n                    <span className=\"text-green-600\">Approved: {data.approved}</span>\n                  </div>\n                  <div className=\"text-sm\">\n                    <span className=\"text-red-600\">Denied: {data.denied}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Activity */}\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle>Recent Authorization Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Authorization ID</TableHead>\n                  <TableHead>Treatment</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Processing Time</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {authorizations?.slice(0, 10).map((auth: any) => (\n                  <TableRow key={auth.id}>\n                    <TableCell className=\"font-medium\">{auth.authorizationId}</TableCell>\n                    <TableCell>{auth.treatmentType}</TableCell>\n                    <TableCell>\n                      <Badge className={getStatusColor(auth.status)}>\n                        {auth.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {auth.submittedDate ? new Date(auth.submittedDate).toLocaleDateString() : \"N/A\"}\n                    </TableCell>\n                    <TableCell>\n                      {auth.submittedDate ? \n                        Math.ceil((Date.now() - new Date(auth.submittedDate).getTime()) / (1000 * 60 * 60 * 24)) + \" days\"\n                        : \"N/A\"\n                      }\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10402},"client/src/components/authorization/authorization-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CloudUpload, Check, ChevronsUpDown } from \"lucide-react\";\nimport { getCPTDescription, getTreatmentTypeFromCPT } from \"@shared/cpt-codes-data\";\n\nconst authorizationSchema = z.object({\n  patientId: z.number().min(1, \"Patient is required\"),\n  insuranceId: z.number().min(1, \"Insurance is required\"),\n  treatmentType: z.string().min(1, \"Treatment type is required\"),\n  cptCodes: z.array(z.string()).min(1, \"At least one CPT code is required\"),\n  icd10Codes: z.array(z.string()).min(1, \"At least one ICD-10 code is required\"),\n  requestedDate: z.string().min(1, \"Requested date is required\"),\n  clinicalJustification: z.string().min(10, \"Clinical justification is required (minimum 10 characters)\"),\n});\n\ntype AuthorizationFormData = z.infer<typeof authorizationSchema>;\n\ninterface AuthorizationModalProps {\n  trigger: React.ReactNode;\n  onSuccess?: () => void;\n  isOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  editData?: any;\n  mode?: 'create' | 'edit';\n}\n\nexport default function AuthorizationModal({\n  trigger,\n  onSuccess,\n  isOpen,\n  onOpenChange,\n  editData,\n  mode = 'create',\n}: AuthorizationModalProps) {\n  const [internalOpen, setInternalOpen] = useState(false);\n  const [patientSearchOpen, setPatientSearchOpen] = useState(false);\n  const [patientSearch, setPatientSearch] = useState(\"\");\n  const [selectedCptCodes, setSelectedCptCodes] = useState<string[]>(editData?.cptCodes || []);\n  const [selectedIcd10Codes, setSelectedIcd10Codes] = useState<string[]>(editData?.icd10Codes || []);\n  const open = isOpen !== undefined ? isOpen : internalOpen;\n  const setOpen = onOpenChange || setInternalOpen;\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<AuthorizationFormData>({\n    resolver: zodResolver(authorizationSchema),\n    defaultValues: editData ? {\n      patientId: editData.patientId,\n      insuranceId: editData.insuranceId,\n      treatmentType: editData.treatmentType,\n      cptCodes: editData.cptCodes || [],\n      icd10Codes: editData.icd10Codes || [],\n      requestedDate: editData.requestedDate?.split('T')[0] || \"\",\n      clinicalJustification: editData.clinicalJustification || \"\",\n    } : {\n      patientId: 0,\n      insuranceId: 0,\n      treatmentType: \"\",\n      cptCodes: [],\n      icd10Codes: [],\n      requestedDate: \"\",\n      clinicalJustification: \"\",\n    },\n  });\n\n  const { data: procedureCodes } = useQuery({\n    queryKey: [\"/api/procedure-codes\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/procedure-codes\", {\n        headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch procedure codes\");\n      return response.json();\n    },\n  });\n\n  const { data: patientsData } = useQuery({\n    queryKey: [\"/api/patients\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/patients\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch patients\");\n      return response.json();\n    },\n  });\n  const patients = patientsData?.patients || [];\n\n  const { data: insuranceProviders } = useQuery({\n    queryKey: [\"/api/insurance/providers\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/insurance/providers\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch insurance providers\");\n      return response.json();\n    },\n  });\n\n  const { data: icd10Codes } = useQuery({\n    queryKey: [\"/api/icd10-codes\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/icd10-codes\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch ICD-10 codes\");\n      return response.json();\n    },\n  });\n\n  // Query for patient insurance information\n  const selectedPatientId = form.watch(\"patientId\");\n  const { data: patientInsurance } = useQuery({\n    queryKey: [\"/api/patients\", selectedPatientId, \"insurance\"],\n    queryFn: async () => {\n      if (!selectedPatientId) return [];\n      const response = await fetch(`/api/patients/${selectedPatientId}/insurance`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: !!selectedPatientId,\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: AuthorizationFormData) => {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        throw new Error(\"Authentication token not found\");\n      }\n\n      const url = mode === 'edit' ? `/api/authorizations/${editData.id}` : \"/api/authorizations\";\n      const method = mode === 'edit' ? \"PUT\" : \"POST\";\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `Failed to ${mode} authorization`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/authorizations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: `Prior authorization request ${mode === 'edit' ? 'updated' : 'submitted'} successfully`,\n      });\n      setOpen(false);\n      form.reset();\n      onSuccess?.();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to ${mode} authorization request`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCptCodeAdd = (cptCode: string) => {\n    if (!selectedCptCodes.includes(cptCode)) {\n      const newCodes = [...selectedCptCodes, cptCode];\n      setSelectedCptCodes(newCodes);\n      form.setValue(\"cptCodes\", newCodes);\n      \n      // Automatically set treatment type based on first CPT code\n      if (newCodes.length === 1) {\n        const treatmentType = getTreatmentTypeFromCPT(cptCode);\n        if (treatmentType) {\n          form.setValue(\"treatmentType\", treatmentType);\n        }\n      }\n    }\n  };\n\n  const handleCptCodeRemove = (cptCode: string) => {\n    const newCodes = selectedCptCodes.filter(code => code !== cptCode);\n    setSelectedCptCodes(newCodes);\n    form.setValue(\"cptCodes\", newCodes);\n  };\n\n  const handleIcd10CodeAdd = (icd10Code: string) => {\n    if (!selectedIcd10Codes.includes(icd10Code)) {\n      const newCodes = [...selectedIcd10Codes, icd10Code];\n      setSelectedIcd10Codes(newCodes);\n      form.setValue(\"icd10Codes\", newCodes);\n    }\n  };\n\n  const handleIcd10CodeRemove = (icd10Code: string) => {\n    const newCodes = selectedIcd10Codes.filter(code => code !== icd10Code);\n    setSelectedIcd10Codes(newCodes);\n    form.setValue(\"icd10Codes\", newCodes);\n  };\n\n  const onSubmit = (data: AuthorizationFormData) => {\n    createMutation.mutate(data);\n  };\n\n  const treatmentTypes = [\n    { value: \"MRI\", label: \"MRI Brain w/ Contrast\" },\n    { value: \"CT\", label: \"CT Scan\" },\n    { value: \"Physical Therapy\", label: \"Physical Therapy\" },\n    { value: \"Specialty Medication\", label: \"Specialty Medication\" },\n    { value: \"Surgery\", label: \"Surgery\" },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>{trigger}</DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{mode === 'edit' ? 'Edit Prior Authorization Request' : 'New Prior Authorization Request'}</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Patient Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Patient Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"patientId\"\n                    render={({ field }) => {\n                      const selectedPatient = patients?.find((p: any) => p.id === field.value);\n                      const filteredPatients = patients?.filter((patient: any) =>\n                        `${patient.firstName} ${patient.lastName}`\n                          .toLowerCase()\n                          .includes(patientSearch.toLowerCase())\n                      ) || [];\n\n                      return (\n                        <FormItem>\n                          <FormLabel>Patient</FormLabel>\n                          <Popover open={patientSearchOpen} onOpenChange={setPatientSearchOpen}>\n                            <PopoverTrigger asChild>\n                              <FormControl>\n                                <Button\n                                  variant=\"outline\"\n                                  role=\"combobox\"\n                                  aria-expanded={patientSearchOpen}\n                                  className=\"w-full justify-between h-10\"\n                                >\n                                  {selectedPatient\n                                    ? `${selectedPatient.firstName} ${selectedPatient.lastName}`\n                                    : \"Search and select patient...\"}\n                                  <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                                </Button>\n                              </FormControl>\n                            </PopoverTrigger>\n                            <PopoverContent className=\"w-[400px] p-0\">\n                              <Command>\n                                <CommandInput\n                                  placeholder=\"Search patients...\"\n                                  value={patientSearch}\n                                  onValueChange={setPatientSearch}\n                                />\n                                <CommandList>\n                                  <CommandEmpty>No patients found.</CommandEmpty>\n                                  <CommandGroup>\n                                    {filteredPatients.slice(0, 50).map((patient: any) => (\n                                      <CommandItem\n                                        key={patient.id}\n                                        value={`${patient.firstName} ${patient.lastName}`}\n                                        onSelect={() => {\n                                          field.onChange(patient.id);\n                                          setPatientSearchOpen(false);\n                                          setPatientSearch(\"\");\n                                        }}\n                                      >\n                                        <Check\n                                          className={`mr-2 h-4 w-4 ${\n                                            field.value === patient.id ? \"opacity-100\" : \"opacity-0\"\n                                          }`}\n                                        />\n                                        {patient.firstName} {patient.lastName}\n                                      </CommandItem>\n                                    ))}\n                                  </CommandGroup>\n                                </CommandList>\n                              </Command>\n                            </PopoverContent>\n                          </Popover>\n                          <FormMessage />\n                        </FormItem>\n                      );\n                    }}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"insuranceId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Insurance Provider</FormLabel>\n                        {patientInsurance && patientInsurance.length > 0 ? (\n                          <div className=\"space-y-2\">\n                            <p className=\"text-sm text-gray-600\">Patient's Insurance Options:</p>\n                            <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString()}>\n                              <FormControl>\n                                <SelectTrigger className=\"h-10\">\n                                  <SelectValue placeholder=\"Select patient's insurance\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {patientInsurance.map((insurance: any) => (\n                                  <SelectItem key={insurance.id} value={insurance.id.toString()}>\n                                    <div className=\"flex flex-col\">\n                                      <span className=\"font-medium\">{insurance.provider?.name || 'Unknown Provider'}</span>\n                                      <span className=\"text-xs text-gray-500\">\n                                        Member ID: {insurance.memberId} \n                                        {insurance.isPrimary && ' (Primary)'}\n                                      </span>\n                                    </div>\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        ) : selectedPatientId ? (\n                          <div className=\"space-y-2\">\n                            <p className=\"text-sm text-amber-600\">No insurance found for this patient.</p>\n                            <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString()}>\n                              <FormControl>\n                                <SelectTrigger className=\"h-10\">\n                                  <SelectValue placeholder=\"Select any insurance provider\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {insuranceProviders?.map((provider: any) => (\n                                  <SelectItem key={provider.id} value={provider.id.toString()}>\n                                    {provider.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        ) : (\n                          <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString()}>\n                            <FormControl>\n                              <SelectTrigger className=\"h-10\">\n                                <SelectValue placeholder=\"Select patient first\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {insuranceProviders?.map((provider: any) => (\n                                <SelectItem key={provider.id} value={provider.id.toString()}>\n                                  {provider.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        )}\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Treatment Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Treatment Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Treatment Type and Requested Date in one row */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"treatmentType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Treatment Type</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select treatment type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {treatmentTypes.map((type) => (\n                              <SelectItem key={type.value} value={type.value}>\n                                {type.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"requestedDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Requested Date</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* CPT Codes - Full width */}\n                <FormField\n                  control={form.control}\n                  name=\"cptCodes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>CPT Procedure Codes</FormLabel>\n                      <div className=\"space-y-3\">\n                        {selectedCptCodes.length > 0 && (\n                          <div className=\"flex flex-wrap gap-2\">\n                            {selectedCptCodes.map((code) => (\n                              <div\n                                key={code}\n                                className=\"bg-blue-100 text-blue-800 px-3 py-1 rounded-md text-sm flex items-center gap-2\"\n                              >\n                                <span className=\"font-medium\">{code}</span>\n                                <button\n                                  type=\"button\"\n                                  onClick={() => handleCptCodeRemove(code)}\n                                  className=\"text-blue-600 hover:text-blue-800 text-lg leading-none\"\n                                >\n                                  ×\n                                </button>\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                        <Popover>\n                          <PopoverTrigger asChild>\n                            <FormControl>\n                              <Button\n                                variant=\"outline\"\n                                role=\"combobox\"\n                                className=\"w-full justify-between h-10\"\n                              >\n                                Add CPT code...\n                                <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                              </Button>\n                            </FormControl>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-full p-0\">\n                            <Command>\n                              <CommandInput placeholder=\"Search CPT codes...\" />\n                              <CommandEmpty>No CPT code found.</CommandEmpty>\n                              <CommandGroup>\n                                <CommandList className=\"max-h-48 overflow-auto\">\n                                  {procedureCodes?.map((code: any) => (\n                                    <CommandItem\n                                      key={code.id}\n                                      onSelect={() => handleCptCodeAdd(code.cptCode)}\n                                    >\n                                      <div className=\"flex flex-col w-full\">\n                                        <span className=\"font-medium\">{code.cptCode}</span>\n                                        <span className=\"text-sm text-gray-500\">{code.description}</span>\n                                      </div>\n                                    </CommandItem>\n                                  ))}\n                                </CommandList>\n                              </CommandGroup>\n                            </Command>\n                          </PopoverContent>\n                        </Popover>\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* ICD-10 Codes - Full width with free text option */}\n                <FormField\n                  control={form.control}\n                  name=\"icd10Codes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>ICD-10 Diagnosis Codes</FormLabel>\n                      <div className=\"space-y-3\">\n                        {selectedIcd10Codes.length > 0 && (\n                          <div className=\"flex flex-wrap gap-2\">\n                            {selectedIcd10Codes.map((code) => {\n                              const icd10 = icd10Codes?.find((c: any) => c.icd10Code === code);\n                              return (\n                                <div\n                                  key={code}\n                                  className=\"bg-green-100 text-green-800 px-3 py-1 rounded-md text-sm flex items-center gap-2\"\n                                >\n                                  <span className=\"font-medium\">{code}</span>\n                                  {icd10 && (\n                                    <span className=\"text-xs opacity-75\">\n                                      - {icd10.description.substring(0, 25)}...\n                                    </span>\n                                  )}\n                                  <button\n                                    type=\"button\"\n                                    onClick={() => handleIcd10CodeRemove(code)}\n                                    className=\"text-green-600 hover:text-green-800 text-lg leading-none\"\n                                  >\n                                    ×\n                                  </button>\n                                </div>\n                              );\n                            })}\n                          </div>\n                        )}\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                          <Popover>\n                            <PopoverTrigger asChild>\n                              <Button\n                                variant=\"outline\"\n                                role=\"combobox\"\n                                className=\"w-full justify-between h-10\"\n                              >\n                                Select from database...\n                                <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                              </Button>\n                            </PopoverTrigger>\n                            <PopoverContent className=\"w-full p-0\">\n                              <Command>\n                                <CommandInput placeholder=\"Search ICD-10 codes...\" />\n                                <CommandEmpty>No ICD-10 code found.</CommandEmpty>\n                                <CommandGroup>\n                                  <CommandList className=\"max-h-48 overflow-auto\">\n                                    {icd10Codes?.map((code: any) => (\n                                      <CommandItem\n                                        key={code.id}\n                                        onSelect={() => handleIcd10CodeAdd(code.icd10Code)}\n                                      >\n                                        <div className=\"flex flex-col w-full\">\n                                          <span className=\"font-medium\">{code.icd10Code}</span>\n                                          <span className=\"text-sm text-gray-500\">{code.description}</span>\n                                        </div>\n                                      </CommandItem>\n                                    ))}\n                                  </CommandList>\n                                </CommandGroup>\n                              </Command>\n                            </PopoverContent>\n                          </Popover>\n                          <div className=\"flex gap-2\">\n                            <Input \n                              placeholder=\"Or enter ICD-10 code manually...\" \n                              className=\"flex-1\"\n                              onKeyPress={(e) => {\n                                if (e.key === 'Enter') {\n                                  e.preventDefault();\n                                  const input = e.target as HTMLInputElement;\n                                  const code = input.value.trim().toUpperCase();\n                                  if (code && !selectedIcd10Codes.includes(code)) {\n                                    handleIcd10CodeAdd(code);\n                                    input.value = '';\n                                  }\n                                }\n                              }}\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={(e) => {\n                                const input = (e.target as HTMLButtonElement).previousElementSibling as HTMLInputElement;\n                                const code = input.value.trim().toUpperCase();\n                                if (code && !selectedIcd10Codes.includes(code)) {\n                                  handleIcd10CodeAdd(code);\n                                  input.value = '';\n                                }\n                              }}\n                            >\n                              Add\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                {/* Clinical Justification - Full width */}\n                <FormField\n                  control={form.control}\n                  name=\"clinicalJustification\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Clinical Justification</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Enter clinical justification for the treatment...\"\n                          className=\"min-h-[100px]\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Document Upload */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Supporting Documents</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                  <CloudUpload className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600 mb-2\">Drag and drop files here or click to browse</p>\n                  <p className=\"text-sm text-gray-500 mb-4\">Supported formats: PDF, DOC, DOCX, JPG, PNG</p>\n                  <Button type=\"button\" variant=\"outline\">\n                    Browse Files\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Form Actions */}\n            <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"button\" variant=\"secondary\">\n                Save as Draft\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createMutation.isPending}\n                className=\"healthcare-button-primary\"\n              >\n                {createMutation.isPending ? \"Submitting...\" : \"Submit Authorization\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":30731},"client/src/components/authorization/authorization-table.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { User, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport StatusBadge from \"./status-badge\";\n\ninterface Authorization {\n  id: number;\n  authorizationId: string;\n  patientId: number;\n  treatmentType: string;\n  cptCode: string;\n  status: string;\n  submittedDate: string;\n  patient?: {\n    firstName: string;\n    lastName: string;\n    patientId: string;\n  };\n  insurance?: {\n    insuranceProvider: {\n      name: string;\n    };\n    memberId: string;\n  };\n}\n\ninterface AuthorizationTableProps {\n  onView: (authorization: Authorization) => void;\n  onEdit: (authorization: Authorization) => void;\n}\n\nexport default function AuthorizationTable({\n  onView,\n  onEdit,\n}: AuthorizationTableProps) {\n  const [page, setPage] = useState(1);\n  const limit = 10;\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: authorizations, isLoading } = useQuery({\n    queryKey: [\"/api/authorizations\", page, limit],\n    queryFn: async () => {\n      const response = await fetch(\n        `/api/authorizations?page=${page}&limit=${limit}`,\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch authorizations\");\n      return response.json();\n    },\n  });\n\n  const deleteAuthorizationMutation = useMutation({\n    mutationFn: async (authId: number) => {\n      return await apiRequest(`/api/authorizations/${authId}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/authorizations\"] });\n      toast({\n        title: \"Success\",\n        description: \"Authorization deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\", \n        description: \"Failed to delete authorization\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = (authId: number) => {\n    deleteAuthorizationMutation.mutate(authId);\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle>Recent Prior Authorizations</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse\">\n            <div className=\"h-4 bg-gray-200 rounded w-full mb-4\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-4\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"healthcare-card\">\n      <CardHeader>\n        <CardTitle>Recent Prior Authorizations</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Patient</TableHead>\n                <TableHead>Treatment</TableHead>\n                <TableHead>Insurance</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Submitted</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {authorizations?.map((auth: Authorization) => (\n                <TableRow key={auth.id} className=\"hover:bg-gray-50\">\n                  <TableCell>\n                    <div className=\"flex items-center\">\n                      <Avatar className=\"h-10 w-10 mr-3\">\n                        <AvatarFallback className=\"bg-gray-300\">\n                          <User className=\"h-5 w-5 text-gray-500\" />\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {auth.patient?.firstName} {auth.patient?.lastName}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          ID: {auth.patient?.patientId}\n                        </div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm text-gray-900\">\n                      {auth.treatmentType}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      CPT: {auth.cptCode}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm text-gray-900\">\n                      {auth.insurance?.insuranceProvider?.name}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      Member: {auth.insurance?.memberId}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <StatusBadge status={auth.status} />\n                  </TableCell>\n                  <TableCell className=\"text-sm text-gray-500\">\n                    {new Date(auth.submittedDate).toLocaleDateString()}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onView(auth)}\n                        className=\"text-blue-600 hover:text-blue-900\"\n                      >\n                        View\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onEdit(auth)}\n                        className=\"text-gray-600 hover:text-gray-900\"\n                      >\n                        Edit\n                      </Button>\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-red-600 hover:text-red-900\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Delete Authorization</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to delete this prior authorization request? \n                              This action cannot be undone and will permanently remove all associated data.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handleDelete(auth.id)}\n                              className=\"bg-red-600 hover:bg-red-700\"\n                              disabled={deleteAuthorizationMutation.isPending}\n                            >\n                              {deleteAuthorizationMutation.isPending ? \"Deleting...\" : \"Delete\"}\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8377},"client/src/components/authorization/status-badge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Clock, CheckCircle, XCircle, AlertCircle } from \"lucide-react\";\n\ninterface StatusBadgeProps {\n  status: string;\n}\n\nexport default function StatusBadge({ status }: StatusBadgeProps) {\n  const getStatusConfig = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"pending\":\n        return {\n          variant: \"secondary\" as const,\n          className: \"status-pending\",\n          icon: Clock,\n          text: \"Pending\",\n        };\n      case \"approved\":\n        return {\n          variant: \"secondary\" as const,\n          className: \"status-approved\",\n          icon: CheckCircle,\n          text: \"Approved\",\n        };\n      case \"denied\":\n        return {\n          variant: \"destructive\" as const,\n          className: \"status-denied\",\n          icon: XCircle,\n          text: \"Denied\",\n        };\n      case \"appealed\":\n        return {\n          variant: \"secondary\" as const,\n          className: \"status-appealed\",\n          icon: AlertCircle,\n          text: \"Appealed\",\n        };\n      default:\n        return {\n          variant: \"secondary\" as const,\n          className: \"status-pending\",\n          icon: Clock,\n          text: status,\n        };\n    }\n  };\n\n  const config = getStatusConfig(status);\n  const Icon = config.icon;\n\n  return (\n    <Badge variant={config.variant} className={`status-badge ${config.className}`}>\n      <Icon className=\"h-3 w-3 mr-1\" />\n      {config.text}\n    </Badge>\n  );\n}\n","size_bytes":1490},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { UserPlus, Plus, FileText } from \"lucide-react\";\n\ninterface QuickActionsProps {\n  onNewAuthorization: () => void;\n  onNewPatient: () => void;\n  onGenerateAuthorization: () => void;\n}\n\nexport default function QuickActions({\n  onNewAuthorization,\n  onNewPatient,\n  onGenerateAuthorization,\n}: QuickActionsProps) {\n  return (\n    <Card className=\"healthcare-card\">\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold text-gray-900\">\n          Quick Actions\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Button\n            onClick={onNewPatient}\n            className=\"healthcare-button-primary flex items-center justify-center p-4\"\n          >\n            <UserPlus className=\"h-5 w-5 mr-2\" />\n            Add New Patient\n          </Button>\n          <Button\n            onClick={onNewAuthorization}\n            className=\"healthcare-button-secondary flex items-center justify-center p-4\"\n          >\n            <Plus className=\"h-5 w-5 mr-2\" />\n            New Authorization Request\n          </Button>\n          <Button\n            onClick={onGenerateAuthorization}\n            className=\"healthcare-button-accent flex items-center justify-center p-4\"\n          >\n            <FileText className=\"h-5 w-5 mr-2\" />\n            Generate Authorization\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1572},"client/src/components/dashboard/stats-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  subtitle?: string;\n  icon: LucideIcon;\n  iconColor: string;\n  iconBgColor: string;\n}\n\nexport default function StatsCard({\n  title,\n  value,\n  subtitle,\n  icon: Icon,\n  iconColor,\n  iconBgColor,\n}: StatsCardProps) {\n  return (\n    <Card className=\"healthcare-card\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm font-medium text-gray-600\">{title}</p>\n            <p className=\"text-3xl font-bold\" style={{ color: iconColor }}>\n              {value}\n            </p>\n            {subtitle && (\n              <p className=\"text-sm text-gray-500\">{subtitle}</p>\n            )}\n          </div>\n          <div \n            className={`w-12 h-12 rounded-full flex items-center justify-center ${iconBgColor}`}\n          >\n            <Icon className={`h-6 w-6 ${iconColor}`} />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1117},"client/src/components/layout/header.tsx":{"content":"import { Bell, Shield, Lock, Eye, Tag, User, Settings, Menu } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport SpecialtySelector from \"@/components/specialty/specialty-selector\";\nimport ClientNameDisplay from \"@/components/layout/client-name-display\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\ninterface HeaderProps {\n  onMenuClick?: () => void;\n}\n\nexport default function Header({ onMenuClick }: HeaderProps) {\n  const { user, logout } = useAuth();\n  const [location, setLocation] = useLocation();\n  const isMobile = useIsMobile();\n\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case \"admin\":\n        return \"bg-red-100 text-red-800\";\n      case \"doctor\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"staff\":\n        return \"bg-green-100 text-green-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <header className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            {/* Mobile menu button */}\n            {isMobile && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onMenuClick}\n                className=\"mr-2\"\n              >\n                <Menu className=\"h-6 w-6\" />\n              </Button>\n            )}\n            \n            <Shield className=\"h-6 w-6 sm:h-8 sm:w-8 text-blue-600 mr-2 sm:mr-3\" />\n            <div className=\"flex flex-col\">\n              <h1 className=\"text-lg sm:text-xl font-bold text-gray-900 dark:text-white\">MedAuth Pro</h1>\n              <ClientNameDisplay />\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 sm:space-x-4\">\n            {/* Hide specialty selector on very small screens */}\n            <div className=\"hidden sm:block\">\n              <SpecialtySelector />\n            </div>\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n                  <Bell className=\"h-5 w-5\" />\n                  <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                    3\n                  </span>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-72 sm:w-80\">\n                <div className=\"p-2\">\n                  <h3 className=\"font-semibold text-sm mb-2\">Notifications</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"p-2 bg-blue-50 rounded-lg\">\n                      <p className=\"text-sm font-medium\">New Authorization Request</p>\n                      <p className=\"text-xs text-gray-600\">Patient John Doe - MRI scan pending</p>\n                      <p className=\"text-xs text-gray-500\">2 hours ago</p>\n                    </div>\n                    <div className=\"p-2 bg-green-50 rounded-lg\">\n                      <p className=\"text-sm font-medium\">Authorization Approved</p>\n                      <p className=\"text-xs text-gray-600\">Patient Jane Smith - Physical therapy approved</p>\n                      <p className=\"text-xs text-gray-500\">4 hours ago</p>\n                    </div>\n                    <div className=\"p-2 bg-yellow-50 rounded-lg\">\n                      <p className=\"text-sm font-medium\">System Maintenance</p>\n                      <p className=\"text-xs text-gray-600\">Scheduled maintenance tonight at 2 AM</p>\n                      <p className=\"text-xs text-gray-500\">1 day ago</p>\n                    </div>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-2\">\n                    View All Notifications\n                  </Button>\n                </div>\n              </DropdownMenuContent>\n            </DropdownMenu>\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"flex items-center space-x-2\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarFallback className=\"bg-blue-600 text-white\">\n                      {user ? getInitials(user.firstName, user.lastName) : \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"hidden sm:flex items-center space-x-2\">\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      {user ? `${user.firstName} ${user.lastName}` : \"User\"}\n                    </span>\n                    <Badge variant=\"secondary\" className={getRoleColor(user?.role || \"\")}>\n                      {user?.role || \"User\"}\n                    </Badge>\n                  </div>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => setLocation(\"/profile\")} className=\"cursor-pointer\">\n                  <User className=\"h-4 w-4 mr-2\" />\n                  Profile\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => setLocation(\"/settings\")} className=\"cursor-pointer\">\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Settings\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={logout} className=\"cursor-pointer\">\n                  Sign out\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":6363},"client/src/components/layout/main-layout.tsx":{"content":"import { useState } from \"react\";\nimport Header from \"./header\";\nimport Sidebar from \"./sidebar\";\nimport MobileSidebar from \"./mobile-sidebar.tsx\";\nimport SecurityFooter from \"../security/security-footer\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\ninterface MainLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function MainLayout({ children }: MainLayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const isMobile = useIsMobile();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <Header onMenuClick={() => setSidebarOpen(true)} />\n      \n      <div className=\"flex\">\n        {/* Desktop Sidebar */}\n        {!isMobile && <Sidebar />}\n        \n        {/* Mobile Sidebar */}\n        {isMobile && (\n          <MobileSidebar \n            isOpen={sidebarOpen} \n            onClose={() => setSidebarOpen(false)} \n          />\n        )}\n        \n        {/* Main Content */}\n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-3 sm:p-4 md:p-6\">\n            {children}\n          </div>\n        </main>\n      </div>\n      \n      <SecurityFooter />\n    </div>\n  );\n}","size_bytes":1162},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  BarChart3,\n  Users,\n  ClipboardCheck,\n  Shield,\n  FileText,\n  History,\n  LayoutDashboard,\n  Bug,\n  Upload,\n  Workflow,\n  Building,\n  Globe,\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n  { name: \"Patient Management\", href: \"/patients\", icon: Users },\n  { name: \"Prior Authorizations\", href: \"/authorizations\", icon: ClipboardCheck },\n  { name: \"Insurance Providers\", href: \"/insurance\", icon: Building },\n  { name: \"External Connections\", href: \"/external-connections\", icon: Globe },\n  { name: \"Generate PA Package\", href: \"/prior-auth-generator\", icon: FileText },\n  { name: \"Document Management\", href: \"/documents\", icon: FileText },\n  { name: \"Data Import\", href: \"/import\", icon: Upload },\n  { name: \"Reports & Analytics\", href: \"/reports\", icon: BarChart3 },\n  { name: \"Audit Trail\", href: \"/audit\", icon: History },\n  { name: \"App Event Logs\", href: \"/app-logs\", icon: Bug },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <nav className=\"bg-white dark:bg-gray-800 w-64 shadow-lg flex-shrink-0 border-r border-gray-200 dark:border-gray-700 hidden md:block\">\n      <div className=\"p-4\">\n        <ul className=\"space-y-2\">\n          {navigation.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.href;\n            \n            return (\n              <li key={item.name}>\n                <Link href={item.href} className={cn(\n                  \"flex items-center p-3 rounded-lg transition-colors text-sm md:text-base\",\n                  isActive\n                    ? \"bg-blue-50 text-blue-600 dark:bg-blue-900 dark:text-blue-300\"\n                    : \"text-gray-700 hover:bg-blue-50 hover:text-blue-600 dark:text-gray-300 dark:hover:bg-gray-700 dark:hover:text-blue-300\"\n                )}>\n                  <Icon className=\"h-5 w-5 mr-3 flex-shrink-0\" />\n                  <span className=\"truncate\">{item.name}</span>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2187},"client/src/components/patients/patient-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nconst patientSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  dateOfBirth: z.string().min(1, \"Date of birth is required\"),\n  phone: z.string().optional(),\n  email: z.string().email(\"Invalid email\").optional().or(z.literal(\"\")),\n  address: z.string().optional(),\n  emergencyContact: z.string().optional(),\n  emergencyPhone: z.string().optional(),\n  // Insurance information\n  primaryInsuranceProvider: z.string().optional(),\n  policyNumber: z.string().optional(),\n  memberId: z.string().optional(),\n  groupNumber: z.string().optional(),\n  insuranceEffectiveDate: z.string().optional(),\n  insuranceExpirationDate: z.string().optional(),\n  // Primary Care Provider information\n  pcpName: z.string().optional(),\n  pcpNpi: z.string().regex(/^\\d{10}$/, \"NPI must be exactly 10 digits\").optional().or(z.literal(\"\")),\n  pcpPhone: z.string().optional(),\n  pcpAddress: z.string().optional(),\n});\n\ntype PatientFormData = z.infer<typeof patientSchema>;\n\ninterface PatientFormProps {\n  trigger: React.ReactNode;\n  onSuccess?: () => void;\n  isOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  editData?: any;\n  mode?: 'create' | 'edit';\n}\n\nexport default function PatientForm({ trigger, onSuccess, isOpen, onOpenChange, editData, mode = 'create' }: PatientFormProps) {\n  const [internalOpen, setInternalOpen] = useState(false);\n  const open = isOpen !== undefined ? isOpen : internalOpen;\n  const setOpen = onOpenChange || setInternalOpen;\n  const { toast } = useToast();\n  const { token } = useAuth();\n  const queryClient = useQueryClient();\n\n  const form = useForm<PatientFormData>({\n    resolver: zodResolver(patientSchema),\n    defaultValues: editData ? {\n      firstName: editData.firstName || \"\",\n      lastName: editData.lastName || \"\",\n      dateOfBirth: editData.dateOfBirth?.split('T')[0] || \"\",\n      phone: editData.phone || \"\",\n      email: editData.email || \"\",\n      address: editData.address || \"\",\n      emergencyContact: editData.emergencyContact || \"\",\n      emergencyPhone: editData.emergencyPhone || \"\",\n      // Insurance information\n      primaryInsuranceProvider: editData.primaryInsuranceProvider || \"\",\n      policyNumber: editData.policyNumber || \"\",\n      memberId: editData.memberId || \"\",\n      groupNumber: editData.groupNumber || \"\",\n      insuranceEffectiveDate: editData.insuranceEffectiveDate?.split('T')[0] || \"\",\n      insuranceExpirationDate: editData.insuranceExpirationDate?.split('T')[0] || \"\",\n      // Primary Care Provider information\n      pcpName: editData.pcpName || \"\",\n      pcpNpi: editData.pcpNpi || \"\",\n      pcpPhone: editData.pcpPhone || \"\",\n      pcpAddress: editData.pcpAddress || \"\",\n    } : {\n      firstName: \"\",\n      lastName: \"\",\n      dateOfBirth: \"\",\n      phone: \"\",\n      email: \"\",\n      address: \"\",\n      emergencyContact: \"\",\n      emergencyPhone: \"\",\n      // Insurance information\n      primaryInsuranceProvider: \"\",\n      policyNumber: \"\",\n      memberId: \"\",\n      groupNumber: \"\",\n      insuranceEffectiveDate: \"\",\n      insuranceExpirationDate: \"\",\n      // Primary Care Provider information\n      pcpName: \"\",\n      pcpNpi: \"\",\n      pcpPhone: \"\",\n      pcpAddress: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: PatientFormData) => {\n      const url = mode === 'edit' ? `/api/patients/${editData.id}` : \"/api/patients\";\n      const method = mode === 'edit' ? \"PUT\" : \"POST\";\n      \n      const response = await apiRequest(method, url, data, {\n        Authorization: `Bearer ${token}`,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      toast({\n        title: \"Success\",\n        description: `Patient ${mode === 'edit' ? 'updated' : 'created'} successfully`,\n      });\n      setOpen(false);\n      form.reset();\n      onSuccess?.();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to ${mode} patient`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PatientFormData) => {\n    createMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>{trigger}</DialogTrigger>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{mode === 'edit' ? 'Edit Patient' : 'Add New Patient'}</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Personal Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Personal Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter first name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter last name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"dateOfBirth\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Date of Birth</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"(555) 123-4567\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"patient@example.com\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"address\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Address</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"123 Main St, City, State 12345\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Emergency Contact */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Emergency Contact</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"emergencyContact\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Emergency Contact Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Contact name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"emergencyPhone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Emergency Phone</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"(555) 123-4567\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Insurance Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Insurance Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"primaryInsuranceProvider\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Insurance Provider</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., Blue Cross Blue Shield, Aetna\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"memberId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Member ID</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Insurance member ID\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"policyNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Policy Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Insurance policy number\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"groupNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Group Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Insurance group number\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"insuranceEffectiveDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Effective Date</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"insuranceExpirationDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Expiration Date</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Primary Care Provider Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Primary Care Provider (PCP)</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"pcpName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>PCP Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Dr. John Smith\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"pcpNpi\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>PCP NPI Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"1234567890\" maxLength={10} {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"pcpPhone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>PCP Phone</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"(555) 123-4567\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"pcpAddress\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>PCP Address</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"123 Medical Center Dr, City, State 12345\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Form Actions */}\n            <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createMutation.isPending}\n                className=\"healthcare-button-primary\"\n              >\n                {createMutation.isPending ? \"Saving...\" : mode === 'edit' ? 'Update Patient' : 'Create Patient'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":17324},"client/src/components/security/security-footer.tsx":{"content":"import { Shield, Eye } from \"lucide-react\";\n\nexport default function SecurityFooter() {\n  return (\n    <footer className=\"bg-white border-t border-gray-200 mt-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        <div className=\"flex flex-col md:flex-row justify-between items-center\">\n          <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n            <div className=\"flex items-center\">\n              <Shield className=\"h-4 w-4 text-green-600 mr-1\" />\n              <span>End-to-End Encrypted</span>\n            </div>\n            <div className=\"flex items-center\">\n              <Eye className=\"h-4 w-4 text-blue-600 mr-1\" />\n              <span>Audit Logged</span>\n            </div>\n            <div className=\"text-sm text-gray-500\">\n              MedAuth Pro is Copyright by IndustryZoom.ai\n            </div>\n          </div>\n          <div className=\"text-sm text-gray-500 mt-2 md:mt-0\">\n            App Version: <span className=\"font-medium\">v2.0.0</span>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":1082},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":776},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/services/app-logger.ts":{"content":"import { db } from \"../db\";\nimport { appEventLogs } from \"@shared/schema\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\n\nexport enum LogLevel {\n  DEBUG = \"DEBUG\",\n  INFO = \"INFO\", \n  WARN = \"WARN\",\n  ERROR = \"ERROR\",\n  FATAL = \"FATAL\"\n}\n\nexport interface AppEvent {\n  level: LogLevel;\n  message: string;\n  component?: string;\n  userId?: number;\n  sessionId?: string;\n  requestId?: string;\n  metadata?: Record<string, any>;\n  stack?: string;\n  timestamp?: Date;\n}\n\nclass AppLogger {\n  private static instance: AppLogger;\n  \n  private constructor() {}\n  \n  static getInstance(): AppLogger {\n    if (!AppLogger.instance) {\n      AppLogger.instance = new AppLogger();\n    }\n    return AppLogger.instance;\n  }\n\n  private async logEvent(event: AppEvent) {\n    try {\n      // Force immediate database write with transaction\n      const result = await db.insert(appEventLogs).values({\n        level: event.level,\n        message: event.message,\n        component: event.component || \"SYSTEM\",\n        userId: event.userId,\n        sessionId: event.sessionId,\n        requestId: event.requestId,\n        metadata: event.metadata ? JSON.stringify(event.metadata) : null,\n        stack: event.stack,\n        timestamp: event.timestamp || new Date(),\n      }).returning();\n      \n      // Debug log to confirm write\n      console.log(`[AppLogger] ${event.level}: ${event.message} - Written to DB at ${new Date().toISOString()}`);\n      return result;\n    } catch (error) {\n      // Fallback to console if database logging fails\n      console.error(\"Failed to log event to database:\", error);\n      console.log(\"Original event:\", event);\n    }\n  }\n\n  debug(message: string, metadata?: Record<string, any>, component?: string) {\n    this.logEvent({\n      level: LogLevel.DEBUG,\n      message,\n      component,\n      metadata,\n    });\n  }\n\n  info(message: string, metadata?: Record<string, any>, component?: string) {\n    this.logEvent({\n      level: LogLevel.INFO,\n      message,\n      component,\n      metadata,\n    });\n  }\n\n  warn(message: string, metadata?: Record<string, any>, component?: string) {\n    this.logEvent({\n      level: LogLevel.WARN,\n      message,\n      component,\n      metadata,\n    });\n  }\n\n  error(message: string, metadata?: Record<string, any>, error?: Error, component?: string) {\n    this.logEvent({\n      level: LogLevel.ERROR,\n      message,\n      component,\n      metadata: {\n        ...metadata,\n        error: error?.message,\n      },\n      stack: error?.stack,\n    });\n  }\n\n  fatal(message: string, error?: Error, metadata?: Record<string, any>, component?: string) {\n    this.logEvent({\n      level: LogLevel.FATAL,\n      message,\n      component,\n      metadata: {\n        ...metadata,\n        error: error?.message,\n      },\n      stack: error?.stack,\n    });\n  }\n\n  // Context-aware logging methods\n  request(message: string, requestId: string, userId?: number, metadata?: Record<string, any>) {\n    this.logEvent({\n      level: LogLevel.INFO,\n      message,\n      component: \"REQUEST\",\n      userId,\n      requestId,\n      metadata,\n    });\n  }\n\n  security(message: string, userId?: number, metadata?: Record<string, any>) {\n    this.logEvent({\n      level: LogLevel.WARN,\n      message,\n      component: \"SECURITY\",\n      userId,\n      metadata,\n    });\n  }\n\n  database(message: string, metadata?: Record<string, any>) {\n    this.logEvent({\n      level: LogLevel.INFO,\n      message,\n      component: \"DATABASE\",\n      metadata,\n    });\n  }\n\n  auth(message: string, userId?: number, metadata?: Record<string, any>) {\n    this.logEvent({\n      level: LogLevel.INFO,\n      message,\n      component: \"AUTH\",\n      userId,\n      metadata,\n    });\n  }\n\n  performance(message: string, duration: number, metadata?: Record<string, any>) {\n    this.logEvent({\n      level: LogLevel.INFO,\n      message,\n      component: \"PERFORMANCE\", \n      metadata: {\n        ...metadata,\n        duration_ms: duration,\n      },\n    });\n  }\n\n  // Query methods for retrieving logs\n  async getLogs(limit = 100, offset = 0, level?: string, component?: string) {\n    try {\n      let query = db.select().from(appEventLogs);\n      \n      // Apply filters if provided\n      const conditions = [];\n      if (level && level !== 'all') {\n        conditions.push(eq(appEventLogs.level, level));\n      }\n      if (component && component !== 'all') {\n        conditions.push(eq(appEventLogs.component, component));\n      }\n      \n      if (conditions.length > 0) {\n        query = query.where(and(...conditions)) as any;\n      }\n      \n      // Order by timestamp descending (newest first) and apply pagination\n      const logs = await query\n        .orderBy(desc(appEventLogs.timestamp))\n        .limit(limit)\n        .offset(offset);\n      \n      console.log(`[AppLogger] Returning ${logs.length} logs, latest: ${logs[0]?.timestamp}, oldest: ${logs[logs.length-1]?.timestamp}`);\n      \n      return logs;\n    } catch (error) {\n      console.error(\"Failed to retrieve app logs:\", error);\n      return [];\n    }\n  }\n\n  async getLogsByDateRange(startDate: Date, endDate: Date, level?: LogLevel) {\n    try {\n      const conditions = [\n        sql`${appEventLogs.timestamp} >= ${startDate}`,\n        sql`${appEventLogs.timestamp} <= ${endDate}`\n      ];\n      \n      if (level) {\n        conditions.push(eq(appEventLogs.level, level));\n      }\n      \n      return await db.select()\n        .from(appEventLogs)\n        .where(and(...conditions))\n        .orderBy(desc(appEventLogs.timestamp));\n    } catch (error) {\n      console.error(\"Failed to retrieve logs by date range:\", error);\n      return [];\n    }\n  }\n}\n\nexport const appLogger = AppLogger.getInstance();","size_bytes":5656},"client/src/pages/app-logs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Bug, Info, AlertTriangle, AlertCircle, Skull, Download, Filter, Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function AppLogs() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [levelFilter, setLevelFilter] = useState(\"all\");\n  const [componentFilter, setComponentFilter] = useState(\"all\");\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const { data: appLogs, isLoading, refetch } = useQuery({\n    queryKey: [\"/api/app-logs\", levelFilter, componentFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (levelFilter !== \"all\") params.append(\"level\", levelFilter);\n      if (componentFilter !== \"all\") params.append(\"component\", componentFilter);\n      params.append(\"_t\", Date.now().toString()); // Cache busting\n      \n      const response = await fetch(`/api/app-logs?${params.toString()}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache',\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch app logs\");\n      return response.json();\n    },\n    enabled: user?.role === \"admin\",\n    refetchInterval: 10000, // Refresh every 10 seconds to reduce API spam\n  });\n\n  const handleExportLogs = () => {\n    toast({\n      title: \"Exporting App Logs\",\n      description: \"App logs export functionality would be implemented here\",\n    });\n  };\n\n  const getLevelIcon = (level: string) => {\n    switch (level) {\n      case \"DEBUG\":\n        return <Bug className=\"h-4 w-4\" />;\n      case \"INFO\":\n        return <Info className=\"h-4 w-4\" />;\n      case \"WARN\":\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      case \"ERROR\":\n        return <AlertCircle className=\"h-4 w-4\" />;\n      case \"FATAL\":\n        return <Skull className=\"h-4 w-4\" />;\n      default:\n        return <Info className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getLevelColor = (level: string) => {\n    switch (level) {\n      case \"DEBUG\":\n        return \"bg-gray-100 text-gray-800\";\n      case \"INFO\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"WARN\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"ERROR\":\n        return \"bg-red-100 text-red-800\";\n      case \"FATAL\":\n        return \"bg-purple-100 text-purple-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const filteredLogs = appLogs?.filter((log: any) => {\n    const matchesSearch = !searchQuery.trim() || \n      log.message.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      log.component.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesLevel = levelFilter === \"all\" || log.level === levelFilter;\n    const matchesComponent = componentFilter === \"all\" || log.component === componentFilter;\n    \n    return matchesSearch && matchesLevel && matchesComponent;\n  })?.sort((a: any, b: any) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n\n  if (user?.role !== \"admin\") {\n    return (\n      <div className=\"space-y-6\">\n        <Card className=\"healthcare-card\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"text-red-500 mb-4\">\n              <AlertCircle className=\"h-12 w-12 mx-auto\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Access Denied</h3>\n            <p className=\"text-gray-600\">Only administrators can access app event logs.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">App Event Logs</h2>\n          <p className=\"text-gray-600\">Monitor system events and application performance</p>\n        </div>\n        <Button onClick={handleExportLogs} className=\"healthcare-button-primary\">\n          <Download className=\"h-4 w-4 mr-2\" />\n          Export Logs\n        </Button>\n      </div>\n\n      {/* Log Level Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        {[\"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"FATAL\"].map((level) => (\n          <Card key={level} className=\"healthcare-card\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">{level}</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {appLogs?.filter((log: any) => log.level === level).length || 0}\n                  </p>\n                </div>\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${getLevelColor(level)}`}>\n                  {getLevelIcon(level)}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Filters */}\n      <Card className=\"healthcare-card\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search logs by message or component...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={levelFilter} onValueChange={setLevelFilter}>\n                <SelectTrigger className=\"w-[150px]\">\n                  <SelectValue placeholder=\"Filter by level\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Levels</SelectItem>\n                  <SelectItem value=\"DEBUG\">DEBUG</SelectItem>\n                  <SelectItem value=\"INFO\">INFO</SelectItem>\n                  <SelectItem value=\"WARN\">WARN</SelectItem>\n                  <SelectItem value=\"ERROR\">ERROR</SelectItem>\n                  <SelectItem value=\"FATAL\">FATAL</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={componentFilter} onValueChange={setComponentFilter}>\n                <SelectTrigger className=\"w-[150px]\">\n                  <SelectValue placeholder=\"Filter by component\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Components</SelectItem>\n                  <SelectItem value=\"SYSTEM\">SYSTEM</SelectItem>\n                  <SelectItem value=\"AUTH\">AUTH</SelectItem>\n                  <SelectItem value=\"DATABASE\">DATABASE</SelectItem>\n                  <SelectItem value=\"REQUEST\">REQUEST</SelectItem>\n                  <SelectItem value=\"SECURITY\">SECURITY</SelectItem>\n                  <SelectItem value=\"PERFORMANCE\">PERFORMANCE</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* App Logs Table */}\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle>Application Event Log</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {Array.from({ length: 10 }).map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"h-4 bg-gray-200 rounded w-full mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Timestamp</TableHead>\n                    <TableHead>Level</TableHead>\n                    <TableHead>Component</TableHead>\n                    <TableHead>Message</TableHead>\n                    <TableHead>User</TableHead>\n                    <TableHead>Details</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredLogs?.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"text-center py-8\">\n                        <div className=\"text-gray-500\">\n                          {searchQuery.trim() ? \"No logs found matching your search.\" : \"No application logs found.\"}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredLogs?.map((log: any) => (\n                      <TableRow key={log.id} className=\"hover:bg-gray-50\">\n                        <TableCell className=\"text-sm\">\n                          {new Date(log.timestamp).toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={`${getLevelColor(log.level)} flex items-center gap-1`}>\n                            {getLevelIcon(log.level)}\n                            {log.level}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-sm font-medium\">\n                          {log.component}\n                        </TableCell>\n                        <TableCell className=\"text-sm\">\n                          {log.message}\n                        </TableCell>\n                        <TableCell className=\"text-sm\">\n                          {log.userId ? `User #${log.userId}` : \"System\"}\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-500\">\n                          {log.metadata ? (\n                            <details className=\"cursor-pointer\">\n                              <summary className=\"text-blue-600 hover:text-blue-800\">View Details</summary>\n                              <pre className=\"mt-2 text-xs bg-gray-100 p-2 rounded whitespace-pre-wrap\">\n                                {JSON.stringify(JSON.parse(log.metadata), null, 2)}\n                              </pre>\n                            </details>\n                          ) : (\n                            \"N/A\"\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11318},"server/routes/index.ts":{"content":"// Export all route modules for easier imports\nexport { registerPriorAuthWorkflowRoutes } from './prior-auth-workflow';","size_bytes":119},"server/routes/prior-auth-workflow.ts":{"content":"import type { Express } from \"express\";\nimport { z } from \"zod\";\nimport { storage } from \"../storage\";\nimport { priorAuthWorkflowService } from \"../services/prior-auth-workflow\";\nimport { procedureCodeService } from \"../services/procedure-codes\";\nimport { auditService } from \"../services/audit\";\nimport { authenticate, AuthenticatedRequest } from \"../middleware/auth\";\n\n// Request schemas\nconst completeStepSchema = z.object({\n  formData: z.record(z.any()),\n  notes: z.string().optional(),\n});\n\nconst generateFormsSchema = z.object({\n  state: z.string().min(2).max(2),\n});\n\nexport function registerPriorAuthWorkflowRoutes(app: Express) {\n  // Get workflow steps for authorization\n  app.get(\"/api/prior-auth-workflow-steps/:authId\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const authId = parseInt(req.params.authId);\n      const steps = await priorAuthWorkflowService.getWorkflowSteps(authId);\n      \n      res.json(steps);\n    } catch (error) {\n      console.error(\"Failed to get workflow steps:\", error);\n      res.status(500).json({ message: \"Failed to get workflow steps\" });\n    }\n  });\n\n  // Get current step for authorization\n  app.get(\"/api/prior-auth-current-step/:authId\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const authId = parseInt(req.params.authId);\n      const currentStep = await priorAuthWorkflowService.getCurrentStep(authId);\n      \n      if (!currentStep) {\n        return res.status(404).json({ message: \"Current step not found\" });\n      }\n      \n      res.json(currentStep);\n    } catch (error) {\n      console.error(\"Failed to get current step:\", error);\n      res.status(500).json({ message: \"Failed to get current step\" });\n    }\n  });\n\n  // Complete workflow step\n  app.post(\"/api/prior-auth-workflow-steps/:authId/:stepNumber/complete\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const authId = parseInt(req.params.authId);\n      const stepNumber = parseInt(req.params.stepNumber);\n      const userId = (req as any).user?.id;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const validation = completeStepSchema.parse(req.body);\n      \n      await priorAuthWorkflowService.completeStep(\n        authId,\n        stepNumber,\n        validation.formData,\n        userId,\n        validation.notes\n      );\n      \n      res.json({ message: \"Step completed successfully\" });\n    } catch (error) {\n      console.error(\"Failed to complete step:\", error);\n      res.status(500).json({ message: \"Failed to complete step\" });\n    }\n  });\n\n  // Initialize workflow for authorization\n  app.post(\"/api/prior-auth-workflow/:authId/initialize\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const authId = parseInt(req.params.authId);\n      const userId = (req as any).user?.id;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      await priorAuthWorkflowService.initializeWorkflow(authId, userId);\n      \n      res.json({ message: \"Workflow initialized successfully\" });\n    } catch (error) {\n      console.error(\"Failed to initialize workflow:\", error);\n      res.status(500).json({ message: \"Failed to initialize workflow\" });\n    }\n  });\n\n  // Generate state-specific form package\n  app.post(\"/api/prior-auth-generate-forms/:authId\", async (req, res) => {\n    try {\n      const authId = parseInt(req.params.authId);\n      const userId = (req as any).user?.id;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const validation = generateFormsSchema.parse(req.body);\n      \n      const formPackagePath = await priorAuthWorkflowService.generateFormPackage(\n        authId,\n        validation.state\n      );\n      \n      // Log form generation\n      await auditService.logPriorAuthActivity(\n        userId,\n        authId,\n        'FORMS_GENERATED',\n        'form_generation',\n        null,\n        { state: validation.state, formPackagePath },\n        req.ip,\n        req.get('User-Agent') || ''\n      );\n      \n      res.json({ \n        message: \"Form package generated successfully\",\n        formPackagePath \n      });\n    } catch (error) {\n      console.error(\"Failed to generate forms:\", error);\n      res.status(500).json({ message: \"Failed to generate forms\" });\n    }\n  });\n\n  // Get procedure codes with search\n  app.get(\"/api/procedure-codes\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { search, category, limit = 50 } = req.query;\n      \n      let procedures;\n      if (search) {\n        procedures = await procedureCodeService.searchProcedureCodes(\n          search as string,\n          category as string | undefined\n        );\n      } else if (category) {\n        procedures = await procedureCodeService.getProceduresByCategory(category as string);\n      } else {\n        procedures = await storage.getProcedureCodes(parseInt(limit as string));\n      }\n      \n      await auditService.log(req.user!.id, 'PROCEDURE_CODES_ACCESS', 'procedure_code', null, {\n        search: search as string,\n        category: category as string,\n        limit: parseInt(limit as string),\n        resultsCount: procedures.length,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(procedures);\n    } catch (error) {\n      console.error(\"Failed to get procedure codes:\", error);\n      res.status(500).json({ message: \"Failed to get procedure codes\" });\n    }\n  });\n\n  // Get procedure categories\n  app.get(\"/api/procedure-categories\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const categories = await procedureCodeService.getProcedureCategories();\n      \n      await auditService.log(req.user!.id, 'PROCEDURE_CATEGORIES_ACCESS', 'procedure_code', null, {\n        categoriesCount: categories.length,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(categories);\n    } catch (error) {\n      console.error(\"Failed to get procedure categories:\", error);\n      res.status(500).json({ message: \"Failed to get procedure categories\" });\n    }\n  });\n\n  // Check if procedure requires prior auth\n  app.get(\"/api/procedure-codes/:cptCode/prior-auth\", async (req, res) => {\n    try {\n      const cptCode = req.params.cptCode;\n      const requiresAuth = await procedureCodeService.requiresPriorAuth(cptCode);\n      \n      res.json({ \n        cptCode,\n        requiresPriorAuth: requiresAuth \n      });\n    } catch (error) {\n      console.error(\"Failed to check prior auth requirement:\", error);\n      res.status(500).json({ message: \"Failed to check prior auth requirement\" });\n    }\n  });\n\n  // Add custom procedure code\n  app.post(\"/api/procedure-codes\", async (req, res) => {\n    try {\n      const userId = (req as any).user?.id;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      // Check if user has admin role\n      const user = await storage.getUser(userId);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const procedureData = req.body;\n      const newProcedure = await procedureCodeService.addCustomProcedure(procedureData, userId);\n      \n      res.status(201).json(newProcedure);\n    } catch (error) {\n      console.error(\"Failed to add procedure code:\", error);\n      res.status(500).json({ message: \"Failed to add procedure code\" });\n    }\n  });\n}","size_bytes":7569},"server/services/prior-auth-workflow.ts":{"content":"import { storage } from \"../storage\";\nimport { auditService } from \"./audit\";\nimport { InsertPriorAuthWorkflowStep, PriorAuthorization } from \"@shared/schema\";\n\n// Prior Authorization Workflow Steps based on the comprehensive workflow document\nexport const PRIOR_AUTH_WORKFLOW_STEPS = [\n  {\n    stepNumber: 1,\n    stepName: \"Clinical Decision & Insurance Check\",\n    description: \"Determine medical necessity and verify PA requirements\",\n    formFields: [\"treatmentType\", \"cptCode\", \"icd10Code\", \"clinicalJustification\"]\n  },\n  {\n    stepNumber: 2,\n    stepName: \"Patient & Insurance Verification\",\n    description: \"Verify patient eligibility and insurance coverage\",\n    formFields: [\"patientId\", \"insuranceId\", \"memberId\", \"groupNumber\"]\n  },\n  {\n    stepNumber: 3,\n    stepName: \"Clinical Evidence Gathering\",\n    description: \"Collect provider notes, lab results, previous treatments\",\n    formFields: [\"clinicalEvidence\", \"previousTreatments\", \"providerNotes\"]\n  },\n  {\n    stepNumber: 4,\n    stepName: \"Documentation Preparation\",\n    description: \"Prepare clinical documentation and attestation\",\n    formFields: [\"documents\", \"attestation\", \"medicalNecessity\"]\n  },\n  {\n    stepNumber: 5,\n    stepName: \"Form Selection & Completion\",\n    description: \"Select state-specific forms and complete required fields\",\n    formFields: [\"stateFormTemplate\", \"formData\", \"procedureCodes\"]\n  },\n  {\n    stepNumber: 6,\n    stepName: \"Prior Authorization Submission\",\n    description: \"Submit PA request through appropriate channel\",\n    formFields: [\"submissionMethod\", \"submissionDate\", \"trackingNumber\"]\n  },\n  {\n    stepNumber: 7,\n    stepName: \"Tracking & Follow-up\",\n    description: \"Monitor submission status and respond to requests\",\n    formFields: [\"status\", \"reviewProgress\", \"additionalRequests\"]\n  },\n  {\n    stepNumber: 8,\n    stepName: \"Decision Processing\",\n    description: \"Process approval/denial and next steps\",\n    formFields: [\"decision\", \"authorizationNumber\", \"denialReason\", \"appealOptions\"]\n  },\n  {\n    stepNumber: 9,\n    stepName: \"Service Authorization\",\n    description: \"Authorize service delivery and claim submission\",\n    formFields: [\"serviceAuthorization\", \"expirationDate\", \"serviceDelivery\"]\n  },\n  {\n    stepNumber: 10,\n    stepName: \"Renewal & Monitoring\",\n    description: \"Track renewals and ongoing monitoring\",\n    formFields: [\"renewalTracking\", \"continuedNecessity\", \"outcomeMonitoring\"]\n  }\n];\n\nexport class PriorAuthWorkflowService {\n  \n  // Initialize workflow for new prior authorization\n  async initializeWorkflow(authorizationId: number, userId: number): Promise<void> {\n    try {\n      for (const step of PRIOR_AUTH_WORKFLOW_STEPS) {\n        const workflowStep: InsertPriorAuthWorkflowStep = {\n          authorizationId,\n          stepNumber: step.stepNumber,\n          stepName: step.stepName,\n          status: step.stepNumber === 1 ? 'in_progress' : 'pending',\n          assignedTo: step.stepNumber === 1 ? userId : undefined,\n          notes: step.description,\n          formData: null,\n        };\n        \n        await storage.createPriorAuthWorkflowStep(workflowStep);\n      }\n      \n      // Log workflow initialization\n      await auditService.logPriorAuthActivity(\n        userId,\n        authorizationId,\n        'WORKFLOW_INITIALIZED',\n        'initialization',\n        null,\n        { workflowSteps: PRIOR_AUTH_WORKFLOW_STEPS.length, status: 'started' },\n        '',\n        ''\n      );\n    } catch (error) {\n      console.error('Failed to initialize workflow:', error);\n      throw error;\n    }\n  }\n\n  // Complete a workflow step\n  async completeStep(\n    authorizationId: number,\n    stepNumber: number,\n    formData: any,\n    userId: number,\n    notes?: string\n  ): Promise<void> {\n    try {\n      const step = await storage.getPriorAuthWorkflowStep(authorizationId, stepNumber);\n      if (!step) {\n        throw new Error(`Workflow step ${stepNumber} not found`);\n      }\n\n      const beforeData = { ...step };\n      \n      // Update step as completed\n      await storage.updatePriorAuthWorkflowStep(step.id, {\n        status: 'completed',\n        completedBy: userId,\n        completedAt: new Date(),\n        formData,\n        notes: notes || step.notes,\n      });\n\n      // Move to next step if not final step\n      if (stepNumber < PRIOR_AUTH_WORKFLOW_STEPS.length) {\n        await storage.updatePriorAuthWorkflowStep(\n          await this.getStepId(authorizationId, stepNumber + 1),\n          {\n            status: 'in_progress',\n            assignedTo: userId,\n          }\n        );\n      }\n\n      // Update main authorization current step\n      await storage.updatePriorAuthorization(authorizationId, {\n        currentStep: stepNumber + 1,\n      });\n\n      const afterData = { ...step, status: 'completed', completedBy: userId, formData };\n\n      // Log step completion\n      await auditService.logPriorAuthActivity(\n        userId,\n        authorizationId,\n        'STEP_COMPLETED',\n        `step_${stepNumber}`,\n        beforeData,\n        afterData,\n        '',\n        ''\n      );\n\n    } catch (error) {\n      console.error('Failed to complete workflow step:', error);\n      throw error;\n    }\n  }\n\n  // Get current step for authorization\n  async getCurrentStep(authorizationId: number): Promise<any> {\n    try {\n      const authorization = await storage.getPriorAuthorization(authorizationId);\n      if (!authorization) return null;\n\n      const currentStep = await storage.getPriorAuthWorkflowStep(authorizationId, authorization.currentStep);\n      return currentStep;\n    } catch (error) {\n      console.error('Failed to get current step:', error);\n      return null;\n    }\n  }\n\n  // Get all workflow steps for authorization\n  async getWorkflowSteps(authorizationId: number): Promise<any[]> {\n    try {\n      return await storage.getPriorAuthWorkflowSteps(authorizationId);\n    } catch (error) {\n      console.error('Failed to get workflow steps:', error);\n      return [];\n    }\n  }\n\n  // Generate state-specific form package\n  async generateFormPackage(authorizationId: number, state: string): Promise<string> {\n    try {\n      const authorization = await storage.getPriorAuthorization(authorizationId);\n      if (!authorization) {\n        throw new Error('Authorization not found');\n      }\n\n      const workflowSteps = await this.getWorkflowSteps(authorizationId);\n      const patient = await storage.getPatient(authorization.patientId);\n      const insurance = await storage.getPatientInsurance(authorization.insuranceId);\n\n      // Aggregate all form data from workflow steps\n      const aggregatedFormData = workflowSteps.reduce((acc, step) => {\n        if (step.formData) {\n          return { ...acc, ...step.formData };\n        }\n        return acc;\n      }, {});\n\n      // Get state form template\n      const template = await storage.getStateFormTemplate(state, 'prior_auth');\n      \n      if (!template) {\n        throw new Error(`No form template found for state: ${state}`);\n      }\n\n      // Generate complete form package data\n      const formPackageData = {\n        authorization,\n        patient,\n        insurance,\n        workflowData: aggregatedFormData,\n        template,\n        generatedAt: new Date().toISOString(),\n        state,\n      };\n\n      // Store form package data in authorization record\n      const formPackagePath = `/forms/packages/${authorizationId}-${state}-${Date.now()}.json`;\n      await storage.updatePriorAuthorization(authorizationId, {\n        generatedFormData: formPackageData,\n      });\n\n      return formPackagePath;\n    } catch (error) {\n      console.error('Failed to generate form package:', error);\n      throw error;\n    }\n  }\n\n  private async getStepId(authorizationId: number, stepNumber: number): Promise<number> {\n    const step = await storage.getPriorAuthWorkflowStep(authorizationId, stepNumber);\n    return step?.id || 0;\n  }\n}\n\nexport const priorAuthWorkflowService = new PriorAuthWorkflowService();","size_bytes":7945},"server/services/procedure-codes.ts":{"content":"import { storage } from \"../storage\";\nimport { InsertProcedureCode } from \"@shared/schema\";\nimport { auditService } from \"./audit\";\n\n// Common CPT procedure codes that typically require prior authorization\nexport const COMMON_PRIOR_AUTH_PROCEDURES = [\n  // Imaging procedures\n  { cptCode: '70450', description: 'CT head/brain without contrast', category: 'Radiology', subcategory: 'CT', requiresPriorAuth: true },\n  { cptCode: '70460', description: 'CT head/brain with contrast', category: 'Radiology', subcategory: 'CT', requiresPriorAuth: true },\n  { cptCode: '70551', description: 'MRI brain without contrast', category: 'Radiology', subcategory: 'MRI', requiresPriorAuth: true },\n  { cptCode: '70553', description: 'MRI brain with and without contrast', category: 'Radiology', subcategory: 'MRI', requiresPriorAuth: true },\n  { cptCode: '72148', description: 'MRI lumbar spine without contrast', category: 'Radiology', subcategory: 'MRI', requiresPriorAuth: true },\n  { cptCode: '72158', description: 'MRI lumbar spine with and without contrast', category: 'Radiology', subcategory: 'MRI', requiresPriorAuth: true },\n  { cptCode: '73721', description: 'MRI knee without contrast', category: 'Radiology', subcategory: 'MRI', requiresPriorAuth: true },\n  { cptCode: '76770', description: 'Ultrasound retroperitoneal', category: 'Radiology', subcategory: 'Ultrasound', requiresPriorAuth: true },\n\n  // Surgical procedures\n  { cptCode: '29881', description: 'Arthroscopy knee surgical', category: 'Surgery', subcategory: 'Orthopedic', requiresPriorAuth: true },\n  { cptCode: '63030', description: 'Laminotomy single vertebral segment', category: 'Surgery', subcategory: 'Spine', requiresPriorAuth: true },\n  { cptCode: '64483', description: 'Transforaminal epidural injection', category: 'Surgery', subcategory: 'Pain Management', requiresPriorAuth: true },\n  { cptCode: '20610', description: 'Arthrocentesis major joint', category: 'Surgery', subcategory: 'Orthopedic', requiresPriorAuth: true },\n\n  // Specialty services\n  { cptCode: '90834', description: 'Psychotherapy 45 minutes', category: 'Mental Health', subcategory: 'Therapy', requiresPriorAuth: true },\n  { cptCode: '90837', description: 'Psychotherapy 60 minutes', category: 'Mental Health', subcategory: 'Therapy', requiresPriorAuth: true },\n  { cptCode: '97110', description: 'Therapeutic exercise', category: 'Physical Therapy', subcategory: 'Exercise', requiresPriorAuth: true },\n  { cptCode: '97112', description: 'Neuromuscular reeducation', category: 'Physical Therapy', subcategory: 'Rehabilitation', requiresPriorAuth: true },\n\n  // 2025 New CPT Codes\n  { cptCode: '98000', description: 'Telemedicine new patient 15 min', category: 'Telemedicine', subcategory: 'Audio-Video', requiresPriorAuth: false },\n  { cptCode: '98001', description: 'Telemedicine new patient low complexity', category: 'Telemedicine', subcategory: 'Audio-Video', requiresPriorAuth: false },\n  { cptCode: '98012', description: 'Telemedicine established patient 10-19 min', category: 'Telemedicine', subcategory: 'Audio-Only', requiresPriorAuth: false },\n  { cptCode: '0877T', description: 'AI-powered chest imaging analysis', category: 'Artificial Intelligence', subcategory: 'Imaging', requiresPriorAuth: true },\n  { cptCode: '0898T', description: 'AI-augmented prostate biopsy guidance', category: 'Artificial Intelligence', subcategory: 'Surgery', requiresPriorAuth: true },\n  { cptCode: '15011', description: 'Skin cell suspension autograft harvesting', category: 'Surgery', subcategory: 'Skin', requiresPriorAuth: true },\n  { cptCode: '76014', description: 'MRI safety assessment 15 minutes', category: 'Radiology', subcategory: 'MRI Safety', requiresPriorAuth: false },\n\n  // Durable Medical Equipment\n  { cptCode: 'E0260', description: 'Hospital bed semi-electric', category: 'DME', subcategory: 'Bed', requiresPriorAuth: true },\n  { cptCode: 'E0470', description: 'Respiratory assist device', category: 'DME', subcategory: 'Respiratory', requiresPriorAuth: true },\n  { cptCode: 'K0001', description: 'Standard wheelchair', category: 'DME', subcategory: 'Mobility', requiresPriorAuth: true },\n\n  // Common outpatient procedures  \n  { cptCode: '45378', description: 'Colonoscopy diagnostic', category: 'Gastroenterology', subcategory: 'Endoscopy', requiresPriorAuth: false },\n  { cptCode: '45380', description: 'Colonoscopy with biopsy', category: 'Gastroenterology', subcategory: 'Endoscopy', requiresPriorAuth: true },\n  { cptCode: '43235', description: 'Upper endoscopy diagnostic', category: 'Gastroenterology', subcategory: 'Endoscopy', requiresPriorAuth: false },\n  { cptCode: '11042', description: 'Debridement skin subcutaneous tissue', category: 'Surgery', subcategory: 'Wound Care', requiresPriorAuth: true },\n];\n\nexport class ProcedureCodeService {\n  \n  // Initialize procedure codes database\n  async seedProcedureCodes(): Promise<void> {\n    try {\n      console.log('Seeding procedure codes...');\n      \n      for (const procedure of COMMON_PRIOR_AUTH_PROCEDURES) {\n        const existingCode = await storage.getProcedureCodeByCPT(procedure.cptCode);\n        \n        if (!existingCode) {\n          const insertData: InsertProcedureCode = {\n            cptCode: procedure.cptCode,\n            description: procedure.description,\n            category: procedure.category,\n            subcategory: procedure.subcategory,\n            requiresPriorAuth: procedure.requiresPriorAuth,\n            isActive: true,\n          };\n          \n          await storage.createProcedureCode(insertData);\n        }\n      }\n      \n      console.log(`Seeded ${COMMON_PRIOR_AUTH_PROCEDURES.length} procedure codes`);\n    } catch (error) {\n      console.error('Failed to seed procedure codes:', error);\n    }\n  }\n\n  // Check if procedure requires prior authorization\n  async requiresPriorAuth(cptCode: string): Promise<boolean> {\n    try {\n      const procedure = await storage.getProcedureCodeByCPT(cptCode);\n      return procedure?.requiresPriorAuth || false;\n    } catch (error) {\n      console.error('Failed to check prior auth requirement:', error);\n      return false;\n    }\n  }\n\n  // Search procedure codes\n  async searchProcedureCodes(query: string, category?: string): Promise<any[]> {\n    try {\n      return await storage.searchProcedureCodes(query, category);\n    } catch (error) {\n      console.error('Failed to search procedure codes:', error);\n      return [];\n    }\n  }\n\n  // Get procedures by category\n  async getProceduresByCategory(category: string): Promise<any[]> {\n    try {\n      return await storage.getProceduresByCategory(category);\n    } catch (error) {\n      console.error('Failed to get procedures by category:', error);\n      return [];\n    }\n  }\n\n  // Get all procedure categories\n  async getProcedureCategories(): Promise<string[]> {\n    try {\n      return await storage.getProcedureCategories();\n    } catch (error) {\n      console.error('Failed to get procedure categories:', error);\n      return [];\n    }\n  }\n\n  // Add custom procedure code\n  async addCustomProcedure(procedureData: InsertProcedureCode, userId: number): Promise<any> {\n    try {\n      const existingCode = await storage.getProcedureCodeByCPT(procedureData.cptCode);\n      \n      if (existingCode) {\n        throw new Error(`Procedure code ${procedureData.cptCode} already exists`);\n      }\n\n      const newProcedure = await storage.createProcedureCode(procedureData);\n      \n      // Log procedure code addition\n      await auditService.logDataModification(\n        userId,\n        'procedure_code',\n        newProcedure.id,\n        'CREATE',\n        null,\n        newProcedure,\n        '',\n        ''\n      );\n\n      return newProcedure;\n    } catch (error) {\n      console.error('Failed to add custom procedure:', error);\n      throw error;\n    }\n  }\n\n  // Update procedure code\n  async updateProcedure(cptCode: string, updateData: Partial<InsertProcedureCode>, userId: number): Promise<any> {\n    try {\n      const existingProcedure = await storage.getProcedureCodeByCPT(cptCode);\n      \n      if (!existingProcedure) {\n        throw new Error(`Procedure code ${cptCode} not found`);\n      }\n\n      const updatedProcedure = await storage.updateProcedureCode(existingProcedure.id, updateData);\n\n      // Log procedure code update\n      await auditService.logDataModification(\n        userId,\n        'procedure_code',\n        existingProcedure.id,\n        'UPDATE',\n        existingProcedure,\n        updatedProcedure,\n        '',\n        ''\n      );\n\n      return updatedProcedure;\n    } catch (error) {\n      console.error('Failed to update procedure:', error);\n      throw error;\n    }\n  }\n}\n\nexport const procedureCodeService = new ProcedureCodeService();","size_bytes":8703},"client/src/pages/import.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { \n  Upload, \n  FileText, \n  Users, \n  Shield, \n  CheckCircle, \n  AlertCircle,\n  Download,\n  Cloud,\n  Key,\n  Database\n} from \"lucide-react\";\n\nexport default function ImportPage() {\n  const { toast } = useToast();\n  const { token } = useAuth();\n  \n  // Persist state using sessionStorage to prevent reset on navigation\n  const getStoredState = (key: string, defaultValue: any) => {\n    try {\n      const stored = sessionStorage.getItem(`import_${key}`);\n      return stored ? JSON.parse(stored) : defaultValue;\n    } catch {\n      return defaultValue;\n    }\n  };\n  \n  const setStoredState = (key: string, value: any) => {\n    try {\n      sessionStorage.setItem(`import_${key}`, JSON.stringify(value));\n    } catch {\n      // Ignore storage errors\n    }\n  };\n  \n  const [uploadProgress, setUploadProgress] = useState(() => getStoredState('progress', 0));\n  const [isUploading, setIsUploading] = useState(() => getStoredState('uploading', false));\n  const [uploadResults, setUploadResults] = useState(() => getStoredState('results', null));\n  \n  // ModMed EMA FHIR API integration state\n  const [emaCredentials, setEmaCredentials] = useState(() => getStoredState('ema_credentials', {\n    clientId: '',\n    clientSecret: '',\n    baseUrl: 'https://exscribe-prod-fhir.ema-api.com/fhir/modmed/root/r4',\n    environment: 'production' // production or sandbox\n  }));\n  const [emaConnected, setEmaConnected] = useState(() => getStoredState('ema_connected', false));\n  const [emaToken, setEmaToken] = useState(() => getStoredState('ema_token', null));\n  const [emaPatients, setEmaPatients] = useState(() => getStoredState('ema_patients', []));\n\n  const handleFileUpload = async (file: File, type: string, updateExisting = false) => {\n    console.log(\"🚀 [PRE-UPLOAD] Starting file upload process\", {\n      fileName: file.name,\n      fileSize: file.size,\n      fileType: file.type,\n      uploadType: type,\n      updateExisting,\n      timestamp: new Date().toISOString(),\n    });\n\n    if (!token) {\n      console.error(\"❌ [PRE-UPLOAD] Authentication token missing\");\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to upload files.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    console.log(\"✅ [PRE-UPLOAD] Authentication token found, proceeding with upload\");\n\n    const newIsUploading = true;\n    const newProgress = 0;\n    const newResults = null;\n    \n    setIsUploading(newIsUploading);\n    setUploadProgress(newProgress);\n    setUploadResults(newResults);\n    \n    // Store state immediately\n    setStoredState('uploading', newIsUploading);\n    setStoredState('progress', newProgress);\n    setStoredState('results', newResults);\n    \n    try {\n      console.log(\"📦 [DURING-UPLOAD] Preparing FormData and request\");\n      \n      // Read file content\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('type', type);\n      formData.append('updateExisting', updateExisting.toString());\n\n      console.log(\"⏳ [DURING-UPLOAD] Starting progress tracking\");\n      \n      // Update progress incrementally but don't get stuck at 90%\n      let progressCount = 0;\n      const progressInterval = setInterval(() => {\n        setUploadProgress((prev: number) => {\n          progressCount++;\n          const newProg = Math.min(prev + 8, 85); // Only go up to 85% during fake progress\n          console.log(`📊 [DURING-UPLOAD] Progress update ${progressCount}: ${newProg}%`);\n          setStoredState('progress', newProg);\n          return newProg;\n        });\n      }, 300);\n\n      console.log(\"🌐 [DURING-UPLOAD] Sending request to server\");\n\n      const response = await fetch('/api/import/process', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n        body: formData,\n      });\n\n      console.log(\"📡 [DURING-UPLOAD] Server response received\", {\n        status: response.status,\n        statusText: response.statusText,\n        ok: response.ok,\n      });\n\n      clearInterval(progressInterval);\n      \n      // Immediately jump to 95% when server responds\n      console.log(\"📊 [DURING-UPLOAD] Setting progress to 95% - server responded\");\n      setUploadProgress(95);\n      setStoredState('progress', 95);\n\n      if (!response.ok) {\n        console.error(\"❌ [DURING-UPLOAD] Server error response\", {\n          status: response.status,\n          statusText: response.statusText,\n        });\n        \n        const errorData = await response.json();\n        console.error(\"❌ [DURING-UPLOAD] Server error details\", errorData);\n        \n        if (response.status === 401) {\n          console.error(\"❌ [DURING-UPLOAD] Authentication failed - token expired\");\n          toast({\n            title: \"Authentication Failed\",\n            description: \"Your session has expired. Please log in again.\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n        throw new Error(errorData.message || 'Import failed');\n      }\n\n      console.log(\"📊 [DURING-UPLOAD] Setting progress to 98% - parsing response\");\n      setUploadProgress(98);\n      setStoredState('progress', 98);\n\n      console.log(\"📄 [DURING-UPLOAD] Parsing server response\");\n      const result = await response.json();\n      \n      console.log(\"✅ [POST-UPLOAD] Server response parsed successfully\", {\n        recordsProcessed: result.recordsProcessed,\n        recordsImported: result.recordsImported,\n        recordsUpdated: result.recordsUpdated || 0,\n        duplicatesSkipped: result.duplicatesSkipped || 0,\n        errorsCount: result.errors || 0,\n      });\n\n      const resultData = {\n        type,\n        fileName: file.name,\n        recordsProcessed: result.recordsProcessed,\n        recordsImported: result.recordsImported,\n        recordsUpdated: result.recordsUpdated || 0,\n        duplicatesSkipped: result.duplicatesSkipped || 0,\n        errors: result.errors,\n        errorDetails: result.errorDetails || [],\n        duplicates: result.duplicates || [],\n        updates: result.updates || [],\n        updateExisting\n      };\n      \n      console.log(\"📊 [POST-UPLOAD] Setting final progress to 100%\");\n      const finalProgress = 100;\n      setUploadProgress(finalProgress);\n      setStoredState('progress', finalProgress);\n      \n      setUploadResults(resultData);\n      setStoredState('results', resultData);\n\n      const successCount = result.recordsImported + (result.recordsUpdated || 0);\n      \n      console.log(\"🎉 [POST-UPLOAD] Upload completed successfully\", {\n        fileName: file.name,\n        successCount,\n        finalResultData: resultData,\n        completedAt: new Date().toISOString(),\n      });\n      \n      toast({\n        title: \"Import Complete\",\n        description: `${file.name} processed: ${successCount} records processed successfully.`,\n      });\n    } catch (error: any) {\n      console.error(\"❌ [POST-UPLOAD] Upload failed with error\", {\n        error: error.message,\n        stack: error.stack,\n        timestamp: new Date().toISOString(),\n      });\n      \n      toast({\n        title: \"Import Failed\",\n        description: error.message || \"Failed to process file.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      console.log(\"🏁 [POST-UPLOAD] Cleaning up upload state\");\n      const finalUploading = false;\n      setIsUploading(finalUploading);\n      setStoredState('uploading', finalUploading);\n    }\n  };\n\n  // Clear stored state when user wants to start fresh\n  const clearImportState = () => {\n    setUploadProgress(0);\n    setIsUploading(false);\n    setUploadResults(null);\n    setStoredState('progress', 0);\n    setStoredState('uploading', false);\n    setStoredState('results', null);\n  };\n\n  // ModMed EMA FHIR API Functions\n  const connectToEMA = async () => {\n    try {\n      setIsUploading(true);\n      setUploadProgress(10);\n      \n      // Authenticate with ModMed EMA OAuth2\n      const authResponse = await fetch('/api/modmed-ema/authenticate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          clientId: emaCredentials.clientId,\n          clientSecret: emaCredentials.clientSecret,\n          baseUrl: emaCredentials.baseUrl,\n          environment: emaCredentials.environment\n        }),\n      });\n\n      if (!authResponse.ok) {\n        const error = await authResponse.json();\n        throw new Error(error.message || 'Authentication failed');\n      }\n\n      const authData = await authResponse.json();\n      setEmaToken(authData.access_token);\n      setStoredState('ema_token', authData.access_token);\n      setUploadProgress(50);\n\n      // Test connection by fetching metadata\n      const metadataResponse = await fetch('/api/modmed-ema/metadata', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'EMA-Token': authData.access_token,\n        },\n      });\n\n      if (!metadataResponse.ok) {\n        throw new Error('Failed to connect to ModMed EMA system');\n      }\n\n      setEmaConnected(true);\n      setStoredState('ema_connected', true);\n      setUploadProgress(100);\n\n      toast({\n        title: \"Connected to ModMed EMA\",\n        description: \"Successfully connected to ModMed EMA cloud system.\",\n      });\n\n    } catch (error: any) {\n      toast({\n        title: \"Connection Failed\",\n        description: error.message || \"Failed to connect to ModMed EMA system.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n      setUploadProgress(0);\n    }\n  };\n\n  const fetchEMAPatients = async () => {\n    try {\n      setIsUploading(true);\n      setUploadProgress(20);\n\n      const response = await fetch('/api/modmed-ema/patients', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'EMA-Token': emaToken,\n        },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to fetch patients');\n      }\n\n      const patientData = await response.json();\n      setEmaPatients(patientData.patients || []);\n      setStoredState('ema_patients', patientData.patients || []);\n      setUploadProgress(100);\n\n      toast({\n        title: \"Patients Retrieved\",\n        description: `Found ${patientData.patients?.length || 0} patients in ModMed EMA system.`,\n      });\n\n    } catch (error: any) {\n      toast({\n        title: \"Fetch Failed\",\n        description: error.message || \"Failed to retrieve patients from ModMed EMA.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n      setUploadProgress(0);\n    }\n  };\n\n  const importSelectedPatients = async (selectedIds: string[]) => {\n    try {\n      setIsUploading(true);\n      setUploadProgress(10);\n\n      const response = await fetch('/api/modmed-ema/import-patients', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n          'EMA-Token': emaToken,\n        },\n        body: JSON.stringify({\n          patientIds: selectedIds,\n          baseUrl: emaCredentials.baseUrl\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Import failed');\n      }\n\n      const result = await response.json();\n      setUploadProgress(100);\n      setUploadResults({\n        ...result,\n        fileName: 'ModMed EMA Import',\n        type: 'ema-patients'\n      });\n      setStoredState('results', {\n        ...result,\n        fileName: 'ModMed EMA Import',\n        type: 'ema-patients'\n      });\n\n      toast({\n        title: \"Import Complete\",\n        description: `Successfully imported ${result.recordsImported} patients from ModMed EMA.`,\n      });\n\n    } catch (error: any) {\n      toast({\n        title: \"Import Failed\",\n        description: error.message || \"Failed to import patients from ModMed EMA.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const PatientImportCard = () => (\n    <Card className=\"healthcare-card\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Users className=\"h-5 w-5\" />\n          EMR Patient Records Import\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Alert>\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            Supports HL7 FHIR R4, CCD (C-CDA), and CSV formats. Ensure patient data includes required fields: MRN, demographics, and insurance information.\n          </AlertDescription>\n        </Alert>\n\n        <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n          <Upload className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <p className=\"text-gray-600 mb-2\">Upload EMR Patient Records</p>\n          <p className=\"text-sm text-gray-500 mb-4\">\n            Accepted formats: .xml (HL7 FHIR), .xml (CCD), .csv (Max 100MB)\n          </p>\n          <input\n            type=\"file\"\n            accept=\".xml,.csv\"\n            onChange={(e) => {\n              const file = e.target.files?.[0];\n              if (file) handleFileUpload(file, \"patients\");\n            }}\n            className=\"hidden\"\n            id=\"patient-upload\"\n          />\n          <label htmlFor=\"patient-upload\">\n            <Button asChild variant=\"outline\">\n              <span>Select Patient File</span>\n            </Button>\n          </label>\n        </div>\n\n        <div className=\"bg-blue-50 p-4 rounded-lg\">\n          <h4 className=\"font-medium text-blue-900 mb-2\">Supported Patient Data Fields:</h4>\n          <ul className=\"text-sm text-blue-800 space-y-1\">\n            <li>• Medical Record Number (MRN)</li>\n            <li>• Demographics (Name, DOB, Gender, Address)</li>\n            <li>• Contact Information (Phone, Email)</li>\n            <li>• Insurance Information (Primary/Secondary)</li>\n            <li>• Emergency Contact Details</li>\n            <li>• Medical History and Allergies</li>\n          </ul>\n        </div>\n\n        <Button \n          variant=\"outline\" \n          className=\"w-full\"\n          onClick={() => {\n            const link = document.createElement('a');\n            link.href = '/templates/patient-import-template.csv';\n            link.download = 'patient-import-template.csv';\n            link.click();\n          }}\n        >\n          <Download className=\"h-4 w-4 mr-2\" />\n          Download CSV Template\n        </Button>\n      </CardContent>\n    </Card>\n  );\n\n  const AuthorizationImportCard = () => (\n    <Card className=\"healthcare-card\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Shield className=\"h-5 w-5\" />\n          Authorization Data Import\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Alert>\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            Supports X12 278 (Authorization Request/Response), HL7 FHIR Coverage, and CSV formats for prior authorization data.\n          </AlertDescription>\n        </Alert>\n\n        <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n          <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <p className=\"text-gray-600 mb-2\">Upload Authorization Records</p>\n          <p className=\"text-sm text-gray-500 mb-4\">\n            Accepted formats: .edi (X12), .xml (HL7 FHIR), .csv (Max 50MB)\n          </p>\n          <input\n            type=\"file\"\n            accept=\".edi,.xml,.csv\"\n            onChange={(e) => {\n              const file = e.target.files?.[0];\n              if (file) handleFileUpload(file, \"authorizations\");\n            }}\n            className=\"hidden\"\n            id=\"auth-upload\"\n          />\n          <label htmlFor=\"auth-upload\">\n            <Button asChild variant=\"outline\">\n              <span>Select Authorization File</span>\n            </Button>\n          </label>\n        </div>\n\n        <div className=\"bg-green-50 p-4 rounded-lg\">\n          <h4 className=\"font-medium text-green-900 mb-2\">Supported Authorization Fields:</h4>\n          <ul className=\"text-sm text-green-800 space-y-1\">\n            <li>• Authorization ID and Reference Numbers</li>\n            <li>• Patient MRN and Demographics</li>\n            <li>• Insurance Provider and Policy Information</li>\n            <li>• Service/Procedure Codes (CPT, HCPCS)</li>\n            <li>• Diagnosis Codes (ICD-10)</li>\n            <li>• Authorization Status and Dates</li>\n            <li>• Clinical Justification and Notes</li>\n          </ul>\n        </div>\n\n        <Button \n          variant=\"outline\" \n          className=\"w-full\"\n          onClick={() => {\n            const link = document.createElement('a');\n            link.href = '/templates/authorization-import-template.csv';\n            link.download = 'authorization-import-template.csv';\n            link.click();\n          }}\n        >\n          <Download className=\"h-4 w-4 mr-2\" />\n          Download CSV Template\n        </Button>\n      </CardContent>\n    </Card>\n  );\n\n  const UploadProgressCard = () => (\n    isUploading && (\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle>Upload Progress</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Progress value={uploadProgress} className=\"mb-2\" />\n          <p className=\"text-sm text-gray-600\">Uploading and processing file... {uploadProgress}%</p>\n        </CardContent>\n      </Card>\n    )\n  );\n\n  const UploadResultsCard = () => (\n    uploadResults && (\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <CheckCircle className=\"h-5 w-5 text-green-600\" />\n            Import Results\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div>\n              <p className=\"text-sm text-gray-600\">File Name</p>\n              <p className=\"font-medium\">{uploadResults.fileName}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">Import Type</p>\n              <p className=\"font-medium capitalize\">{uploadResults.type}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">Records Processed</p>\n              <p className=\"font-medium\">{uploadResults.recordsProcessed}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">New Records Imported</p>\n              <p className=\"font-medium text-green-600\">{uploadResults.recordsImported}</p>\n            </div>\n            {uploadResults.recordsUpdated > 0 && (\n              <div>\n                <p className=\"text-sm text-gray-600\">Records Updated</p>\n                <p className=\"font-medium text-blue-600\">{uploadResults.recordsUpdated}</p>\n              </div>\n            )}\n            {uploadResults.duplicatesSkipped > 0 && (\n              <div>\n                <p className=\"text-sm text-gray-600\">Duplicates Skipped</p>\n                <p className=\"font-medium text-yellow-600\">{uploadResults.duplicatesSkipped}</p>\n              </div>\n            )}\n          </div>\n\n          {uploadResults.duplicates && uploadResults.duplicates.length > 0 && !uploadResults.updateExisting && (\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription className=\"space-y-2\">\n                <p>{uploadResults.duplicates.length} duplicate records found with changes. These were skipped to prevent data loss.</p>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => {\n                    const fileInput = document.querySelector(`#${uploadResults.type === 'patients' ? 'patient' : 'auth'}-upload`) as HTMLInputElement;\n                    if (fileInput?.files?.[0]) {\n                      handleFileUpload(fileInput.files[0], uploadResults.type, true);\n                    }\n                  }}\n                >\n                  Re-import and Update Existing Records\n                </Button>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {uploadResults.duplicates && uploadResults.duplicates.length > 0 && (\n            <div className=\"bg-yellow-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-yellow-900 mb-2\">Duplicate Records Found:</h4>\n              <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                {uploadResults.duplicates.slice(0, 5).map((dup: any, index: number) => (\n                  <div key={index} className=\"text-sm text-yellow-800 bg-white p-2 rounded border\">\n                    <p><strong>Row {dup.rowNumber}:</strong> {dup.existing.name} (ID: {dup.existing.patientId})</p>\n                    <p className=\"text-xs\">Changes detected in: {Object.entries(dup.changes).filter(([_, changed]) => changed).map(([field, _]) => field).join(', ')}</p>\n                  </div>\n                ))}\n                {uploadResults.duplicates.length > 5 && (\n                  <p className=\"text-sm text-yellow-700\">... and {uploadResults.duplicates.length - 5} more duplicates</p>\n                )}\n              </div>\n            </div>\n          )}\n\n          {uploadResults.updates && uploadResults.updates.length > 0 && (\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-blue-900 mb-2\">Records Updated:</h4>\n              <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                {uploadResults.updates.slice(0, 5).map((upd: any, index: number) => (\n                  <div key={index} className=\"text-sm text-blue-800 bg-white p-2 rounded border\">\n                    <p><strong>Row {upd.rowNumber}:</strong> {upd.existing.name} (ID: {upd.existing.patientId})</p>\n                    <p className=\"text-xs\">Updated: {Object.entries(upd.changes).filter(([_, changed]) => changed).map(([field, _]) => field).join(', ')}</p>\n                  </div>\n                ))}\n                {uploadResults.updates.length > 5 && (\n                  <p className=\"text-sm text-blue-700\">... and {uploadResults.updates.length - 5} more updates</p>\n                )}\n              </div>\n            </div>\n          )}\n\n          {uploadResults.errors > 0 && (\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                {uploadResults.errors} records had errors and were not imported. \n                <Button variant=\"link\" className=\"p-0 ml-1\">View error log</Button>\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n    )\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold text-gray-900\">Data Import</h1>\n        <p className=\"text-gray-600 mt-1\">Import patient records and authorization data from external systems</p>\n      </div>\n\n      <Tabs defaultValue=\"patients\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"patients\">Patient Records</TabsTrigger>\n          <TabsTrigger value=\"authorizations\">Authorization Data</TabsTrigger>\n          <TabsTrigger value=\"modmed-ema\">ModMed EMA Integration</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"patients\" className=\"space-y-6\">\n          <PatientImportCard />\n          <UploadProgressCard />\n          <UploadResultsCard />\n          {(uploadResults || isUploading || uploadProgress > 0) && (\n            <Card className=\"healthcare-card border-orange-200\">\n              <CardContent className=\"pt-6\">\n                <Button \n                  variant=\"outline\" \n                  onClick={clearImportState}\n                  className=\"w-full\"\n                >\n                  Clear Import State & Start Fresh\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"authorizations\" className=\"space-y-6\">\n          <AuthorizationImportCard />\n          <UploadProgressCard />\n          <UploadResultsCard />\n        </TabsContent>\n\n        <TabsContent value=\"modmed-ema\" className=\"space-y-6\">\n          <ModMedEMACard />\n          <UploadProgressCard />\n          <UploadResultsCard />\n          {(uploadResults || isUploading || uploadProgress > 0) && (\n            <Card className=\"healthcare-card border-orange-200\">\n              <CardContent className=\"pt-6\">\n                <Button \n                  variant=\"outline\" \n                  onClick={clearImportState}\n                  className=\"w-full\"\n                >\n                  Clear Import State & Start Fresh\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n\n  // ModMed EMA Integration Card Component\n  function ModMedEMACard() {\n    const [selectedPatients, setSelectedPatients] = useState<string[]>([]);\n\n    return (\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Cloud className=\"h-5 w-5\" />\n            ModMed EMA Cloud Integration\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Alert>\n            <Database className=\"h-4 w-4\" />\n            <AlertDescription>\n              Connect to ModMed EMA cloud-based Electronic Medical Assistant system to import patient records via HL7 FHIR R4 API. Supports OAuth2 authentication and bulk patient data export.\n            </AlertDescription>\n          </Alert>\n\n          {!emaConnected ? (\n            <div className=\"space-y-4\">\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h4 className=\"font-medium text-blue-900 mb-3\">ModMed EMA Connection Setup</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Client ID\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={emaCredentials.clientId}\n                      onChange={(e) => {\n                        const newCreds = { ...emaCredentials, clientId: e.target.value };\n                        setEmaCredentials(newCreds);\n                        setStoredState('ema_credentials', newCreds);\n                      }}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"Enter ModMed Client ID\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Client Secret\n                    </label>\n                    <input\n                      type=\"password\"\n                      value={emaCredentials.clientSecret}\n                      onChange={(e) => {\n                        const newCreds = { ...emaCredentials, clientSecret: e.target.value };\n                        setEmaCredentials(newCreds);\n                        setStoredState('ema_credentials', newCreds);\n                      }}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"Enter ModMed Client Secret\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Environment\n                    </label>\n                    <select\n                      value={emaCredentials.environment}\n                      onChange={(e) => {\n                        const newCreds = { \n                          ...emaCredentials, \n                          environment: e.target.value,\n                          baseUrl: e.target.value === 'production' \n                            ? 'https://exscribe-prod-fhir.ema-api.com/fhir/modmed/root/r4'\n                            : 'https://exscribe-sandbox-fhir.ema-api.com/fhir/modmed/root/r4'\n                        };\n                        setEmaCredentials(newCreds);\n                        setStoredState('ema_credentials', newCreds);\n                      }}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"production\">Production</option>\n                      <option value=\"sandbox\">Sandbox</option>\n                    </select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Base URL\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={emaCredentials.baseUrl}\n                      onChange={(e) => {\n                        const newCreds = { ...emaCredentials, baseUrl: e.target.value };\n                        setEmaCredentials(newCreds);\n                        setStoredState('ema_credentials', newCreds);\n                      }}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"ModMed FHIR API Base URL\"\n                    />\n                  </div>\n                </div>\n                <Button \n                  onClick={connectToEMA}\n                  disabled={!emaCredentials.clientId || !emaCredentials.clientSecret || isUploading}\n                  className=\"mt-4 w-full\"\n                >\n                  <Key className=\"h-4 w-4 mr-2\" />\n                  Connect to ModMed EMA\n                </Button>\n              </div>\n\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h4 className=\"font-medium text-gray-900 mb-2\">Setup Instructions:</h4>\n                <ul className=\"text-sm text-gray-700 space-y-1\">\n                  <li>• Contact ModMed support at 561.235.7505 to request API credentials</li>\n                  <li>• Register your application at portal.api.modmed.com</li>\n                  <li>• Obtain OAuth2 Client ID and Client Secret for FHIR API access</li>\n                  <li>• Test connection with sandbox environment before production use</li>\n                  <li>• Ensure your practice has proper authorization for patient data access</li>\n                </ul>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <div className=\"bg-green-50 p-4 rounded-lg\">\n                <h4 className=\"font-medium text-green-900 mb-2 flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4\" />\n                  Connected to ModMed EMA\n                </h4>\n                <p className=\"text-sm text-green-800\">\n                  Successfully connected to {emaCredentials.environment} environment: {emaCredentials.baseUrl}\n                </p>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button onClick={fetchEMAPatients} disabled={isUploading}>\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  Fetch Patient List\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setEmaConnected(false);\n                    setEmaToken(null);\n                    setEmaPatients([]);\n                    setStoredState('ema_connected', false);\n                    setStoredState('ema_token', null);\n                    setStoredState('ema_patients', []);\n                  }}\n                >\n                  Disconnect\n                </Button>\n              </div>\n\n              {emaPatients.length > 0 && (\n                <div className=\"bg-white border rounded-lg\">\n                  <div className=\"p-4 border-b\">\n                    <h4 className=\"font-medium text-gray-900\">Available Patients ({emaPatients.length})</h4>\n                    <p className=\"text-sm text-gray-600\">Select patients to import into MedAuth Pro</p>\n                  </div>\n                  <div className=\"max-h-60 overflow-y-auto\">\n                    {emaPatients.slice(0, 50).map((patient: any, index: number) => (\n                      <div key={patient.id || index} className=\"p-3 border-b last:border-b-0 flex items-center gap-3\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedPatients.includes(patient.id)}\n                          onChange={(e) => {\n                            if (e.target.checked) {\n                              setSelectedPatients([...selectedPatients, patient.id]);\n                            } else {\n                              setSelectedPatients(selectedPatients.filter(id => id !== patient.id));\n                            }\n                          }}\n                          className=\"rounded\"\n                        />\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium text-sm\">\n                            {patient.name?.[0]?.family}, {patient.name?.[0]?.given?.join(' ')} \n                          </p>\n                          <p className=\"text-xs text-gray-600\">\n                            DOB: {patient.birthDate} | ID: {patient.identifier?.[0]?.value}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                    {emaPatients.length > 50 && (\n                      <div className=\"p-3 text-center text-sm text-gray-600\">\n                        Showing first 50 patients. {emaPatients.length - 50} more available.\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"p-4 border-t bg-gray-50 flex items-center justify-between\">\n                    <div className=\"text-sm text-gray-600\">\n                      {selectedPatients.length} patients selected\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          const allIds = emaPatients.slice(0, 50).map((p: any) => p.id);\n                          setSelectedPatients(allIds);\n                        }}\n                      >\n                        Select All\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setSelectedPatients([])}\n                      >\n                        Clear All\n                      </Button>\n                      <Button\n                        disabled={selectedPatients.length === 0 || isUploading}\n                        onClick={() => importSelectedPatients(selectedPatients)}\n                      >\n                        Import Selected ({selectedPatients.length})\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h4 className=\"font-medium text-blue-900 mb-2\">ModMed EMA Data Support:</h4>\n            <ul className=\"text-sm text-blue-800 space-y-1\">\n              <li>• Patient Demographics (Name, DOB, Gender, Address)</li>\n              <li>• Medical Record Numbers and Identifiers</li>\n              <li>• Insurance Information and Coverage Details</li>\n              <li>• Clinical Conditions and Diagnoses (ICD-10)</li>\n              <li>• Prescription and Medication History</li>\n              <li>• Lab Results and Diagnostic Reports</li>\n              <li>• Appointment History and Scheduling Data</li>\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n}","size_bytes":36952},"client/src/pages/prior-authorization-workflow.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { CheckCircle, Clock, FileText, Search, AlertTriangle, Download } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { \n  PriorAuthorization,\n  Patient, \n  ProcedureCode,\n  PriorAuthWorkflowStep \n} from \"@/../../shared/schema\";\n\n// Workflow step schema\nconst workflowStepSchema = z.object({\n  treatmentType: z.string().optional(),\n  cptCode: z.string().optional(),\n  icd10Code: z.string().optional(),\n  clinicalJustification: z.string().optional(),\n  patientId: z.number().optional(),\n  insuranceId: z.number().optional(),\n  clinicalEvidence: z.string().optional(),\n  previousTreatments: z.string().optional(),\n  providerNotes: z.string().optional(),\n  urgentRequest: z.boolean().optional(),\n  notes: z.string().optional(),\n});\n\ntype WorkflowStepData = z.infer<typeof workflowStepSchema>;\n\nexport default function PriorAuthorizationWorkflow() {\n  const [selectedAuthId, setSelectedAuthId] = useState<number | null>(null);\n  const [currentStep, setCurrentStep] = useState(1);\n  const [procedureSearchQuery, setProcedureSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<WorkflowStepData>({\n    resolver: zodResolver(workflowStepSchema),\n    defaultValues: {\n      urgentRequest: false,\n    },\n  });\n\n  // Fetch prior authorizations\n  const { data: authorizations = [], isLoading: authLoading } = useQuery<PriorAuthorization[]>({\n    queryKey: ['/api/authorizations'],\n  });\n\n  // Fetch patients for selection\n  const { data: patientsData } = useQuery<{patients: Patient[], totalCount: number}>({\n    queryKey: ['/api/patients'],\n  });\n  const patients = patientsData?.patients || [];\n\n  // Fetch procedure codes\n  const { data: procedureCodes = [] } = useQuery<ProcedureCode[]>({\n    queryKey: ['/api/procedure-codes', procedureSearchQuery],\n    enabled: procedureSearchQuery.length > 2,\n  });\n\n  // Fetch workflow steps for selected authorization\n  const { data: workflowSteps = [] } = useQuery<PriorAuthWorkflowStep[]>({\n    queryKey: ['/api/prior-auth-workflow-steps', selectedAuthId],\n    enabled: !!selectedAuthId,\n  });\n\n  // Fetch current step details\n  const { data: currentStepData } = useQuery<PriorAuthWorkflowStep>({\n    queryKey: ['/api/prior-auth-current-step', selectedAuthId],\n    enabled: !!selectedAuthId,\n  });\n\n  // Create new prior authorization mutation\n  const createAuthMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/authorizations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create authorization');\n      return response.json();\n    },\n    onSuccess: (newAuth: PriorAuthorization) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/authorizations'] });\n      setSelectedAuthId(newAuth.id);\n      toast({\n        title: \"Prior Authorization Created\",\n        description: \"New authorization request has been created and workflow initialized.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create prior authorization request.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Complete workflow step mutation\n  const completeStepMutation = useMutation({\n    mutationFn: async ({ authId, stepNumber, formData, notes }: {\n      authId: number;\n      stepNumber: number;\n      formData: WorkflowStepData;\n      notes?: string;\n    }) => {\n      const response = await fetch(`/api/prior-auth-workflow-steps/${authId}/${stepNumber}/complete`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n        body: JSON.stringify({ formData, notes }),\n      });\n      if (!response.ok) throw new Error('Failed to complete step');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/prior-auth-workflow-steps', selectedAuthId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/prior-auth-current-step', selectedAuthId] });\n      setCurrentStep(prev => prev + 1);\n      form.reset();\n      toast({\n        title: \"Step Completed\",\n        description: \"Workflow step has been completed successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to complete workflow step.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Generate form package mutation\n  const generateFormsMutation = useMutation({\n    mutationFn: async ({ authId, state }: { authId: number; state: string }) => {\n      const response = await fetch(`/api/prior-auth-generate-forms/${authId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n        body: JSON.stringify({ state }),\n      });\n      if (!response.ok) throw new Error('Failed to generate forms');\n      return response.json();\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Forms Generated\",\n        description: \"State-specific form package has been generated and is ready for submission.\",\n      });\n    },\n  });\n\n  const onSubmitStep = (data: WorkflowStepData) => {\n    if (!selectedAuthId || !currentStepData) return;\n\n    completeStepMutation.mutate({\n      authId: selectedAuthId,\n      stepNumber: currentStepData.stepNumber,\n      formData: data,\n      notes: data.notes,\n    });\n  };\n\n  const handleCreateNewAuth = () => {\n    const formData = form.getValues();\n    \n    if (!formData.patientId || !formData.treatmentType || !formData.cptCode) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in patient, treatment type, and CPT code.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createAuthMutation.mutate({\n      patientId: formData.patientId,\n      treatmentType: formData.treatmentType,\n      cptCode: formData.cptCode,\n      icd10Code: formData.icd10Code || \"\",\n      clinicalJustification: formData.clinicalJustification || \"\",\n      urgentRequest: formData.urgentRequest || false,\n      requestedDate: new Date(),\n      insuranceId: 1, // Default to first insurance provider for testing\n    });\n  };\n\n  const getStepIcon = (step: any) => {\n    switch (step.status) {\n      case 'completed':\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case 'in_progress':\n        return <Clock className=\"w-5 h-5 text-blue-600\" />;\n      default:\n        return <div className=\"w-5 h-5 rounded-full border-2 border-gray-300\" />;\n    }\n  };\n\n  const calculateProgress = () => {\n    if (!workflowSteps.length) return 0;\n    const completedSteps = workflowSteps.filter((step: any) => step.status === 'completed').length;\n    return (completedSteps / workflowSteps.length) * 100;\n  };\n\n  if (authLoading) {\n    return <div className=\"p-6\">Loading prior authorizations...</div>;\n  }\n\n  return (\n    <div className=\"container mx-auto p-3 sm:p-6 space-y-4 sm:space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-xl sm:text-2xl lg:text-3xl font-bold text-gray-900 dark:text-white\">Prior Authorization Workflow</h1>\n          <p className=\"text-sm sm:text-base text-gray-600 dark:text-gray-300 mt-1\">Streamlined 10-step process for Medicaid prior authorization requests</p>\n        </div>\n        <Button \n          onClick={handleCreateNewAuth} \n          disabled={createAuthMutation.isPending}\n          className=\"w-full sm:w-auto touch-target\"\n        >\n          {createAuthMutation.isPending ? \"Creating...\" : \"New Authorization\"}\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"workflow\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"workflow\" className=\"text-xs sm:text-sm\">Active Workflow</TabsTrigger>\n          <TabsTrigger value=\"all\" className=\"text-xs sm:text-sm\">All Authorizations</TabsTrigger>\n          <TabsTrigger value=\"procedure-lookup\" className=\"text-xs sm:text-sm\">Procedure Lookup</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"workflow\" className=\"space-y-4\">\n          {selectedAuthId ? (\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-6\">\n              {/* Workflow Progress */}\n              <Card className=\"lg:col-span-1\">\n                <CardHeader>\n                  <CardTitle>Workflow Progress</CardTitle>\n                  <CardDescription>\n                    Complete each step to progress through the prior authorization process\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Overall Progress</span>\n                      <span>{Math.round(calculateProgress())}%</span>\n                    </div>\n                    <Progress value={calculateProgress()} className=\"w-full\" />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    {workflowSteps.map((step: any) => (\n                      <div\n                        key={step.id}\n                        className={`flex items-center space-x-3 p-2 rounded cursor-pointer transition-colors ${\n                          step.status === 'in_progress' ? 'bg-blue-50 border border-blue-200' : ''\n                        }`}\n                        onClick={() => setCurrentStep(step.stepNumber)}\n                      >\n                        {getStepIcon(step)}\n                        <div className=\"flex-1\">\n                          <div className=\"text-sm font-medium\">{step.stepName}</div>\n                          <div className=\"text-xs text-gray-500\">Step {step.stepNumber}</div>\n                        </div>\n                        <Badge variant={\n                          step.status === 'completed' ? 'default' :\n                          step.status === 'in_progress' ? 'secondary' : 'outline'\n                        }>\n                          {step.status}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Current Step Form */}\n              <Card className=\"lg:col-span-2\">\n                <CardHeader>\n                  <CardTitle>\n                    {currentStepData ? `Step ${currentStepData.stepNumber}: ${currentStepData.stepName}` : 'Select a Step'}\n                  </CardTitle>\n                  <CardDescription>\n                    {currentStepData?.notes || 'Complete the required information for this step'}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {currentStepData && (\n                    <Form {...form}>\n                      <form onSubmit={form.handleSubmit(onSubmitStep)} className=\"space-y-4\">\n                        {/* Dynamic form fields based on current step */}\n                        {currentStep === 1 && (\n                          <>\n                            <FormField\n                              control={form.control}\n                              name=\"patientId\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Patient</FormLabel>\n                                  <Select onValueChange={(value) => field.onChange(parseInt(value))}>\n                                    <FormControl>\n                                      <SelectTrigger>\n                                        <SelectValue placeholder=\"Select patient\" />\n                                      </SelectTrigger>\n                                    </FormControl>\n                                    <SelectContent>\n                                      {patients?.map((patient: any) => (\n                                        <SelectItem key={patient.id} value={patient.id.toString()}>\n                                          {patient.firstName} {patient.lastName} - {patient.patientId}\n                                        </SelectItem>\n                                      ))}\n                                    </SelectContent>\n                                  </Select>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={form.control}\n                              name=\"treatmentType\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Treatment Type</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"e.g., MRI, Surgery, Medication\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={form.control}\n                              name=\"cptCode\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>CPT Code</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"e.g., 70551\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </>\n                        )}\n\n                        {currentStep === 3 && (\n                          <>\n                            <FormField\n                              control={form.control}\n                              name=\"clinicalEvidence\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Clinical Evidence</FormLabel>\n                                  <FormControl>\n                                    <Textarea \n                                      placeholder=\"Lab results, imaging findings, etc.\"\n                                      className=\"min-h-[100px]\"\n                                      {...field}\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={form.control}\n                              name=\"previousTreatments\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Previous Treatments (Step Therapy)</FormLabel>\n                                  <FormControl>\n                                    <Textarea \n                                      placeholder=\"Document previous treatments tried and outcomes\"\n                                      className=\"min-h-[100px]\"\n                                      {...field}\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </>\n                        )}\n\n                        <FormField\n                          control={form.control}\n                          name=\"notes\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Step Notes</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Additional notes for this step\"\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"flex justify-between\">\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => generateFormsMutation.mutate({ authId: selectedAuthId, state: 'MA' })}\n                            disabled={generateFormsMutation.isPending}\n                          >\n                            <Download className=\"w-4 h-4 mr-2\" />\n                            {generateFormsMutation.isPending ? \"Generating...\" : \"Generate Forms\"}\n                          </Button>\n                          \n                          <Button \n                            type=\"submit\" \n                            disabled={completeStepMutation.isPending}\n                          >\n                            {completeStepMutation.isPending ? \"Completing...\" : \"Complete Step\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <AlertTriangle className=\"w-12 h-12 text-yellow-500 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No Active Workflow</h3>\n                <p className=\"text-gray-600 mb-4\">\n                  Create a new prior authorization request to begin the workflow process.\n                </p>\n                <Button onClick={handleCreateNewAuth}>\n                  Create New Authorization\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"all\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {authorizations.map((auth: any) => (\n              <Card \n                key={auth.id}\n                className={`cursor-pointer transition-all hover:shadow-md ${\n                  selectedAuthId === auth.id ? 'ring-2 ring-blue-500' : ''\n                }`}\n                onClick={() => setSelectedAuthId(auth.id)}\n              >\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">{auth.treatmentType}</CardTitle>\n                  <CardDescription>\n                    {auth.authorizationId} • CPT: {auth.cptCode}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Status:</span>\n                      <Badge variant={\n                        auth.status === 'approved' ? 'default' :\n                        auth.status === 'denied' ? 'destructive' : 'secondary'\n                      }>\n                        {auth.status}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Step:</span>\n                      <span>{auth.currentStep || 1} of {auth.totalSteps || 10}</span>\n                    </div>\n                    <div className=\"text-xs text-gray-500\">\n                      Requested: {new Date(auth.requestedDate).toLocaleDateString()}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"procedure-lookup\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Procedure Code Lookup</CardTitle>\n              <CardDescription>\n                Search CPT codes to check prior authorization requirements\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex space-x-2 mb-4\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search CPT codes or descriptions...\"\n                    value={procedureSearchQuery}\n                    onChange={(e) => setProcedureSearchQuery(e.target.value)}\n                    className=\"pl-8\"\n                  />\n                </div>\n              </div>\n              \n              {procedureCodes.length > 0 && (\n                <div className=\"space-y-2\">\n                  {procedureCodes.map((code: any) => (\n                    <div key={code.id} className=\"flex items-center justify-between p-3 border rounded\">\n                      <div>\n                        <div className=\"font-medium\">{code.cptCode}</div>\n                        <div className=\"text-sm text-gray-600\">{code.description}</div>\n                        <div className=\"text-xs text-gray-500\">{code.category}</div>\n                      </div>\n                      <Badge variant={code.requiresPriorAuth ? 'destructive' : 'secondary'}>\n                        {code.requiresPriorAuth ? 'Prior Auth Required' : 'No Prior Auth'}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":23129},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { User, Mail, Shield, Edit2, Save, X } from \"lucide-react\";\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    firstName: user?.firstName || \"\",\n    lastName: user?.lastName || \"\",\n    email: user?.email || \"\",\n  });\n\n  const handleSave = () => {\n    // Simulate saving profile data\n    toast({\n      title: \"Profile Updated\",\n      description: \"Your profile has been updated successfully.\",\n    });\n    setIsEditing(false);\n  };\n\n  const handleCancel = () => {\n    setFormData({\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      email: user?.email || \"\",\n    });\n    setIsEditing(false);\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case \"admin\":\n        return \"bg-red-100 text-red-800\";\n      case \"doctor\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"staff\":\n        return \"bg-green-100 text-green-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Profile</h1>\n        {!isEditing && (\n          <Button onClick={() => setIsEditing(true)} className=\"flex items-center gap-2\">\n            <Edit2 className=\"h-4 w-4\" />\n            Edit Profile\n          </Button>\n        )}\n      </div>\n\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Personal Information\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"firstName\">First Name</Label>\n              {isEditing ? (\n                <Input\n                  id=\"firstName\"\n                  value={formData.firstName}\n                  onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}\n                />\n              ) : (\n                <div className=\"text-sm text-gray-900 mt-1\">{user?.firstName}</div>\n              )}\n            </div>\n            <div>\n              <Label htmlFor=\"lastName\">Last Name</Label>\n              {isEditing ? (\n                <Input\n                  id=\"lastName\"\n                  value={formData.lastName}\n                  onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}\n                />\n              ) : (\n                <div className=\"text-sm text-gray-900 mt-1\">{user?.lastName}</div>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"email\">Email Address</Label>\n            {isEditing ? (\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n              />\n            ) : (\n              <div className=\"text-sm text-gray-900 mt-1 flex items-center gap-2\">\n                <Mail className=\"h-4 w-4 text-gray-500\" />\n                {user?.email}\n              </div>\n            )}\n          </div>\n\n          <div>\n            <Label>Role</Label>\n            <div className=\"mt-1 flex items-center gap-2\">\n              <Shield className=\"h-4 w-4 text-gray-500\" />\n              <Badge variant=\"secondary\" className={getRoleColor(user?.role || \"\")}>\n                {user?.role || \"User\"}\n              </Badge>\n            </div>\n          </div>\n\n          {isEditing && (\n            <div className=\"flex gap-2 pt-4\">\n              <Button onClick={handleSave} className=\"flex items-center gap-2\">\n                <Save className=\"h-4 w-4\" />\n                Save Changes\n              </Button>\n              <Button variant=\"outline\" onClick={handleCancel} className=\"flex items-center gap-2\">\n                <X className=\"h-4 w-4\" />\n                Cancel\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle>Account Information</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label>Username</Label>\n            <div className=\"text-sm text-gray-900 mt-1\">{user?.username}</div>\n          </div>\n          <div>\n            <Label>Account Created</Label>\n            <div className=\"text-sm text-gray-900 mt-1\">\n              {user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : \"N/A\"}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5231},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Settings as SettingsIcon, Save, Bell, Shield, Key } from \"lucide-react\";\n\nexport default function Settings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [settings, setSettings] = useState({\n    notifications: {\n      email: true,\n      push: false,\n      sms: false,\n    },\n    security: {\n      twoFactor: false,\n      sessionTimeout: \"30\",\n    },\n    preferences: {\n      theme: \"light\",\n      language: \"en\",\n      timezone: \"America/New_York\",\n    },\n  });\n\n  const handleSave = () => {\n    toast({\n      title: \"Settings Saved\",\n      description: \"Your settings have been updated successfully.\",\n    });\n  };\n\n  const handleNotificationChange = (type: string, value: boolean) => {\n    setSettings({\n      ...settings,\n      notifications: {\n        ...settings.notifications,\n        [type]: value,\n      },\n    });\n  };\n\n  const handleSecurityChange = (type: string, value: boolean | string) => {\n    setSettings({\n      ...settings,\n      security: {\n        ...settings.security,\n        [type]: value,\n      },\n    });\n  };\n\n  const handlePreferenceChange = (type: string, value: string) => {\n    setSettings({\n      ...settings,\n      preferences: {\n        ...settings.preferences,\n        [type]: value,\n      },\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Settings</h1>\n        <Button onClick={handleSave} className=\"flex items-center gap-2\">\n          <Save className=\"h-4 w-4\" />\n          Save Settings\n        </Button>\n      </div>\n\n      {/* Notifications Settings */}\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bell className=\"h-5 w-5\" />\n            Notification Preferences\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Label htmlFor=\"email-notifications\">Email Notifications</Label>\n              <p className=\"text-sm text-gray-500\">Receive notifications via email</p>\n            </div>\n            <Switch\n              id=\"email-notifications\"\n              checked={settings.notifications.email}\n              onCheckedChange={(checked) => handleNotificationChange(\"email\", checked)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Label htmlFor=\"push-notifications\">Push Notifications</Label>\n              <p className=\"text-sm text-gray-500\">Receive browser push notifications</p>\n            </div>\n            <Switch\n              id=\"push-notifications\"\n              checked={settings.notifications.push}\n              onCheckedChange={(checked) => handleNotificationChange(\"push\", checked)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Label htmlFor=\"sms-notifications\">SMS Notifications</Label>\n              <p className=\"text-sm text-gray-500\">Receive text message notifications</p>\n            </div>\n            <Switch\n              id=\"sms-notifications\"\n              checked={settings.notifications.sms}\n              onCheckedChange={(checked) => handleNotificationChange(\"sms\", checked)}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Security Settings */}\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            Security Settings\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Label htmlFor=\"two-factor\">Two-Factor Authentication</Label>\n              <p className=\"text-sm text-gray-500\">Add an extra layer of security to your account</p>\n            </div>\n            <Switch\n              id=\"two-factor\"\n              checked={settings.security.twoFactor}\n              onCheckedChange={(checked) => handleSecurityChange(\"twoFactor\", checked)}\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"session-timeout\">Session Timeout (minutes)</Label>\n            <Input\n              id=\"session-timeout\"\n              type=\"number\"\n              value={settings.security.sessionTimeout}\n              onChange={(e) => handleSecurityChange(\"sessionTimeout\", e.target.value)}\n              className=\"mt-1 max-w-xs\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* System Configuration (Admin Only) */}\n      {user?.role === \"admin\" && (\n        <Card className=\"healthcare-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <SettingsIcon className=\"h-5 w-5\" />\n              System Configuration\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"organization-name\">Organization Name</Label>\n              <Input\n                id=\"organization-name\"\n                placeholder=\"Demo Medical Practice\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"admin-email\">Administrator Email</Label>\n              <Input\n                id=\"admin-email\"\n                type=\"email\"\n                placeholder=\"admin@example.com\"\n                className=\"mt-1\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Change Password */}\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Key className=\"h-5 w-5\" />\n            Change Password\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"current-password\">Current Password</Label>\n            <Input\n              id=\"current-password\"\n              type=\"password\"\n              className=\"mt-1\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"new-password\">New Password</Label>\n            <Input\n              id=\"new-password\"\n              type=\"password\"\n              className=\"mt-1\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"confirm-password\">Confirm New Password</Label>\n            <Input\n              id=\"confirm-password\"\n              type=\"password\"\n              className=\"mt-1\"\n            />\n          </div>\n          <Button variant=\"outline\">Update Password</Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7224},"client/src/components/layout/client-name-display.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport default function ClientNameDisplay() {\n  const { data: clientConfig } = useQuery({\n    queryKey: [\"/api/system-config\", \"client_name\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/system-config/client_name\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) {\n        if (response.status === 404) {\n          return { value: \"Demo Medical Practice\" }; // Default fallback\n        }\n        throw new Error(\"Failed to fetch client name\");\n      }\n      return response.json();\n    },\n  });\n\n  if (!clientConfig?.value) {\n    return null;\n  }\n\n  return (\n    <div className=\"text-sm text-gray-600 font-medium\">\n      {clientConfig.value}\n    </div>\n  );\n}","size_bytes":819},"client/src/components/layout/mobile-sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { X } from \"lucide-react\";\nimport {\n  BarChart3,\n  Users,\n  ClipboardCheck,\n  Shield,\n  FileText,\n  History,\n  LayoutDashboard,\n  Bug,\n  Upload,\n  Workflow,\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n  { name: \"Patient Management\", href: \"/patients\", icon: Users },\n  { name: \"Prior Authorizations\", href: \"/authorizations\", icon: ClipboardCheck },\n  { name: \"PA Workflow\", href: \"/prior-auth-workflow\", icon: Workflow },\n  { name: \"Generate PA Package\", href: \"/prior-auth-generator\", icon: FileText },\n  { name: \"Insurance Verification\", href: \"/insurance\", icon: Shield },\n  { name: \"Document Management\", href: \"/documents\", icon: FileText },\n  { name: \"Data Import\", href: \"/import\", icon: Upload },\n  { name: \"Reports & Analytics\", href: \"/reports\", icon: BarChart3 },\n  { name: \"Audit Trail\", href: \"/audit\", icon: History },\n  { name: \"App Event Logs\", href: \"/app-logs\", icon: Bug },\n];\n\ninterface MobileSidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function MobileSidebar({ isOpen, onClose }: MobileSidebarProps) {\n  const [location] = useLocation();\n\n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\"\n          onClick={onClose}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <nav className={cn(\n        \"fixed top-0 left-0 h-full w-64 bg-white dark:bg-gray-800 shadow-lg transform transition-transform duration-300 ease-in-out z-50 md:hidden\",\n        isOpen ? \"translate-x-0\" : \"-translate-x-full\"\n      )}>\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700\">\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Menu</h2>\n          <button\n            onClick={onClose}\n            className=\"p-2 rounded-md text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n          >\n            <X className=\"h-5 w-5\" />\n          </button>\n        </div>\n        \n        {/* Navigation */}\n        <div className=\"p-4 overflow-y-auto\">\n          <ul className=\"space-y-2\">\n            {navigation.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href;\n              \n              return (\n                <li key={item.name}>\n                  <Link \n                    href={item.href} \n                    onClick={onClose}\n                    className={cn(\n                      \"flex items-center p-3 rounded-lg transition-colors\",\n                      isActive\n                        ? \"bg-blue-50 text-blue-600 dark:bg-blue-900 dark:text-blue-300\"\n                        : \"text-gray-700 hover:bg-blue-50 hover:text-blue-600 dark:text-gray-300 dark:hover:bg-gray-700 dark:hover:text-blue-300\"\n                    )}\n                  >\n                    <Icon className=\"h-5 w-5 mr-3 flex-shrink-0\" />\n                    <span className=\"truncate\">{item.name}</span>\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </nav>\n    </>\n  );\n}","size_bytes":3294},"client/src/components/specialty/specialty-selector.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Stethoscope, Settings } from \"lucide-react\";\nimport type { MedicalSpecialty } from \"@shared/schema\";\n\ninterface SpecialtySelectorProps {\n  onSpecialtyChange?: (specialty: MedicalSpecialty | null) => void;\n}\n\nexport default function SpecialtySelector({ onSpecialtyChange }: SpecialtySelectorProps) {\n  const [selectedSpecialty, setSelectedSpecialty] = useState<MedicalSpecialty | null>(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { data: specialties, isLoading } = useQuery<MedicalSpecialty[]>({\n    queryKey: [\"/api/medical-specialties\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/medical-specialties\", {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch specialties\");\n      return response.json();\n    },\n  });\n\n  // Load specialty from localStorage on component mount\n  useEffect(() => {\n    const savedSpecialty = localStorage.getItem(\"selectedSpecialty\");\n    if (savedSpecialty && specialties) {\n      try {\n        const parsedSpecialty = JSON.parse(savedSpecialty);\n        const foundSpecialty = specialties.find(s => s.id === parsedSpecialty.id);\n        if (foundSpecialty) {\n          setSelectedSpecialty(foundSpecialty);\n        }\n      } catch (error) {\n        console.error(\"Error parsing saved specialty:\", error);\n      }\n    }\n  }, [specialties]);\n\n  const handleSpecialtySelect = (specialtyId: string) => {\n    const specialty = specialties?.find(s => s.id === parseInt(specialtyId));\n    if (specialty) {\n      setSelectedSpecialty(specialty);\n      localStorage.setItem(\"selectedSpecialty\", JSON.stringify(specialty));\n      onSpecialtyChange?.(specialty);\n      setIsOpen(false);\n    }\n  };\n\n  const clearSpecialty = () => {\n    setSelectedSpecialty(null);\n    localStorage.removeItem(\"selectedSpecialty\");\n    onSpecialtyChange?.(null);\n    setIsOpen(false);\n  };\n\n  // Group specialties by main specialty\n  const groupedSpecialties = specialties?.reduce((acc, specialty) => {\n    if (!acc[specialty.specialty]) {\n      acc[specialty.specialty] = [];\n    }\n    acc[specialty.specialty].push(specialty);\n    return acc;\n  }, {} as Record<string, MedicalSpecialty[]>);\n\n  const getSpecialtyDisplay = (specialty: MedicalSpecialty) => {\n    if (specialty.subspecialty) {\n      return `${specialty.specialty} - ${specialty.subspecialty}`;\n    }\n    return specialty.specialty;\n  };\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      {selectedSpecialty && (\n        <Badge variant=\"outline\" className=\"max-w-xs truncate\">\n          <Stethoscope className=\"h-3 w-3 mr-1\" />\n          {getSpecialtyDisplay(selectedSpecialty)}\n        </Badge>\n      )}\n      \n      <Dialog open={isOpen} onOpenChange={setIsOpen}>\n        <DialogTrigger asChild>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-blue-600 hover:text-blue-800\">\n            <Settings className=\"h-4 w-4 mr-1\" />\n            {selectedSpecialty ? \"Change\" : \"Select\"} Specialty\n          </Button>\n        </DialogTrigger>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle>Select Medical Specialty</DialogTitle>\n            <DialogDescription>\n              Choose your medical specialty to customize forms and workflows for your practice.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"py-4\">\n            <Select onValueChange={handleSpecialtySelect}>\n              <SelectTrigger className=\"w-full\">\n                <SelectValue placeholder=\"Select a medical specialty...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {Object.entries(groupedSpecialties || {}).map(([mainSpecialty, subspecialties]) => (\n                  <div key={mainSpecialty}>\n                    {subspecialties.length === 1 && !subspecialties[0].subspecialty ? (\n                      <SelectItem value={subspecialties[0].id.toString()}>\n                        {mainSpecialty}\n                      </SelectItem>\n                    ) : (\n                      <>\n                        <div className=\"px-2 py-1 text-sm font-medium text-gray-500 border-b pointer-events-none\">\n                          {mainSpecialty}\n                        </div>\n                        {subspecialties.map(specialty => (\n                          <SelectItem key={specialty.id} value={specialty.id.toString()}>\n                            <div className=\"pl-4\">\n                              {specialty.subspecialty || \"General\"}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </>\n                    )}\n                  </div>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"flex justify-between\">\n            <Button variant=\"outline\" onClick={clearSpecialty}>\n              Clear Selection\n            </Button>\n            <Button onClick={() => setIsOpen(false)}>\n              Close\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":5667},"AI_Chatbot_Prompt.md":{"content":"# Build a Medical Prior Authorization Management System\n\n## Project Overview\nCreate a comprehensive healthcare prior authorization management system that streamlines the process of managing patient information, insurance verification, and authorization requests for medical practices. This system must be HIPAA-compliant, secure, and capable of handling real-world medical practice workflows.\n\n## Core Requirements\n\n### 1. User Authentication & Role Management\n- Implement secure user authentication with role-based access control\n- Support three user roles: Administrator, Doctor, and Staff\n- Each role should have appropriate permissions for different system functions\n- Include password security, session management, and user profile management\n- Provide user specialty assignment for medical practice customization\n\n### 2. Patient Management System\n- Create comprehensive patient record management with full CRUD operations\n- Support extensive patient demographics including:\n  - Personal information (name, DOB, gender, contact details)\n  - Medical identifiers (patient ID, SSN, insurance information)\n  - Address and emergency contact information\n  - Import tracking and source system identification\n- Implement search and filtering capabilities for large patient databases\n- Support pagination for handling 1000+ patient records efficiently\n- Include bulk operations like \"delete all records\" with proper admin controls\n- Ensure all patient data is encrypted and HIPAA-compliant\n\n### 3. Prior Authorization Workflow System\n- Build a comprehensive 10-step prior authorization workflow process\n- Support authorization request creation with:\n  - Treatment type and medical codes (CPT, ICD-10)\n  - Clinical justification and provider notes\n  - Patient and insurance information linking\n  - Document attachment capabilities\n- Track authorization status through the complete lifecycle:\n  - Pending, In Review, Approved, Denied, Appealed, Expired\n- Implement workflow step progression with state persistence\n- Generate unique authorization IDs and reference numbers\n- Support urgent requests and appeals processes\n\n### 4. Insurance Verification & Management\n- Create insurance provider management system with major insurers\n- Implement patient insurance assignment and verification\n- Support multiple insurance policies per patient\n- Include coverage verification with benefits information\n- Track prior authorization requirements by insurance provider\n- Mock insurance API integration for verification and submission processes\n\n### 5. Document Management System\n- Build secure document upload and storage system\n- Support multiple file formats (PDF, images, CSV, Excel)\n- Implement document categorization and association with patients/authorizations\n- Provide secure download capabilities with access controls\n- Include file size limits and validation (up to 25-50MB files)\n- Ensure document encryption and secure storage\n\n### 6. Data Import & Export Capabilities\n- Create comprehensive CSV import system for patient records\n- Support EMR data import with field mapping and validation\n- Implement intelligent duplicate detection and resolution\n- Provide batch processing for large datasets (1000+ records)\n- Include import progress tracking and error reporting\n- Support update existing records vs. create new records options\n- Generate detailed import reports with success/failure statistics\n\n### 7. Comprehensive Audit & Logging System\n- Implement complete audit trail for all user actions (HIPAA requirement)\n- Create application event logging for system monitoring\n- Support filtering and searching of logs by user, date, action type\n- Include real-time log viewing with auto-refresh capabilities\n- Track performance metrics and system health indicators\n- Provide detailed error logging with stack traces for debugging\n\n### 8. Medical Practice Configuration\n- Support medical specialty and subspecialty management (90+ specialties)\n- Include procedure code database with CPT codes and prior auth requirements\n- Implement system configuration management (client name, settings)\n- Support customizable practice branding and information\n- Include medical code lookup and search functionality\n\n### 9. Dashboard & Analytics\n- Create comprehensive dashboard with key performance indicators\n- Display authorization statistics (pending, approved, denied counts)\n- Show patient management metrics and recent activities\n- Include quick action buttons for common tasks\n- Provide real-time status updates and notifications\n- Support role-based dashboard content customization\n\n### 10. Reports & Analytics System\n- Generate comprehensive reports for practice management\n- Support date range filtering and custom report parameters\n- Include authorization success rates and processing times\n- Provide patient demographics and insurance analysis\n- Create exportable reports in multiple formats\n- Include audit trail reporting for compliance\n\n## Technical Requirements\n\n### Security & Compliance\n- Implement end-to-end encryption for all Protected Health Information (PHI)\n- Ensure HIPAA compliance throughout the application\n- Include comprehensive input validation and sanitization\n- Implement secure session management with automatic expiration\n- Provide role-based access control for all system functions\n- Include audit logging for all data access and modifications\n\n### Performance & Scalability\n- Handle large datasets efficiently (1000+ patient records)\n- Implement proper pagination and search optimization\n- Support concurrent users without performance degradation\n- Include efficient file processing for large document uploads\n- Optimize database queries for production-scale data\n- Implement proper error handling and recovery mechanisms\n\n### User Experience\n- Create modern, responsive design that works on desktop and mobile devices\n- Implement intuitive navigation with clear visual hierarchy\n- Provide real-time feedback for long-running operations (imports, uploads)\n- Include comprehensive error messages and user guidance\n- Support accessibility standards for healthcare environments\n- Implement progressive loading for improved perceived performance\n\n### Data Management\n- Design robust database schema supporting all healthcare entities\n- Implement proper relationships between patients, authorizations, and documents\n- Support data integrity constraints and validation rules\n- Include soft delete capabilities where appropriate\n- Implement backup and recovery considerations\n- Support data export for practice management needs\n\n## Functional Specifications\n\n### User Workflows\n\n#### Patient Management Workflow\n1. User logs in with appropriate credentials\n2. Navigate to patient management section\n3. Search/filter existing patients or create new patient record\n4. Input comprehensive patient demographics and medical information\n5. Associate insurance information and verify coverage\n6. Save patient record with automatic audit logging\n7. Support bulk operations for data management\n\n#### Prior Authorization Workflow\n1. Select patient from database\n2. Create new authorization request with treatment details\n3. Enter medical codes (CPT, ICD-10) and clinical justification\n4. Attach supporting documentation\n5. Submit to insurance provider (mock API integration)\n6. Track authorization through 10-step process\n7. Handle approval, denial, or appeals as needed\n8. Generate final authorization documentation\n\n#### Data Import Workflow\n1. Access data import section (admin/staff only)\n2. Select import type (patients, authorizations)\n3. Upload CSV file with validation\n4. Review import preview with duplicate detection\n5. Choose handling options for duplicates and conflicts\n6. Execute import with progress tracking\n7. Review detailed import results and error reports\n8. Handle any failed records or data conflicts\n\n### System Administration\n- User management (create, modify, deactivate users)\n- System configuration (client name, practice settings)\n- Medical specialty and procedure code management\n- Insurance provider configuration\n- Audit trail monitoring and reporting\n- System health monitoring and maintenance\n\n## Integration Requirements\n\n### External Systems\n- Design for future EMR system integration\n- Include insurance provider API integration capabilities\n- Support state-specific prior authorization form generation\n- Plan for integration with practice management systems\n- Include notification systems (email, SMS capabilities)\n\n### Data Standards\n- Support healthcare data standards (HL7 FHIR readiness)\n- Implement proper medical coding standards (CPT, ICD-10)\n- Include state and federal compliance requirements\n- Support standard CSV formats for data exchange\n- Implement proper date/time handling for medical records\n\n## Deployment & Maintenance\n\n### Local Development\n- Application must run locally on user's laptop/desktop\n- Include all necessary dependencies and setup instructions\n- Provide sample data and test accounts for demonstration\n- Include database setup and migration capabilities\n- Support development and production environment configurations\n\n### Data Security\n- All PHI data must be encrypted at rest and in transit\n- Implement proper user authentication and session security\n- Include comprehensive logging without exposing sensitive data\n- Support secure backup and recovery procedures\n- Implement proper access controls and permission management\n\n## Success Criteria\n\n### Functional Testing\n- All CRUD operations work reliably across all entities\n- CSV import successfully processes 1000+ records without errors\n- Prior authorization workflow completes all 10 steps\n- Document upload/download works for various file types\n- Real-time logging displays current system activities\n- Search and filtering work efficiently with large datasets\n\n### Performance Benchmarks\n- Page load times under 2 seconds for all major functions\n- CSV import processing completes within 60 seconds for 1000 records\n- Database queries respond within 500ms for typical operations\n- File uploads handle 25MB+ files without timeout\n- Concurrent user sessions supported without degradation\n\n### Security Validation\n- All PHI data properly encrypted and access-controlled\n- Comprehensive audit trail captures all required activities\n- Role-based permissions prevent unauthorized access\n- Input validation prevents injection attacks and data corruption\n- Session management prevents unauthorized access\n\n### User Experience Goals\n- Intuitive navigation requires minimal training\n- Error messages provide clear guidance for resolution\n- Responsive design works effectively on various screen sizes\n- Loading states provide clear feedback during operations\n- Accessibility features support diverse user needs\n\n## Sample Test Accounts\nProvide pre-configured test accounts:\n- Administrator: Full system access including user management and configuration\n- Doctor: Clinical access for patient management and authorizations\n- Staff: Operational access for data entry and basic functions\n\n## Important Notes\n- This system handles Protected Health Information (PHI) and must comply with HIPAA regulations\n- Focus on data integrity, security, and audit compliance throughout development\n- Prioritize user experience for healthcare professionals in fast-paced environments\n- Design for scalability to support growing medical practices\n- Include comprehensive error handling and recovery mechanisms\n- Implement proper backup and data recovery capabilities\n\nBuild this system with production-quality code, comprehensive error handling, and attention to healthcare compliance requirements. The application should feel professional and reliable enough for real medical practice use while being intuitive for healthcare staff with varying technical expertise.","size_bytes":11763},"DATA_IMPORT_TEST_PLAN.md":{"content":"# Data Import Test Plan - MedAuth Pro\n\n## Overview\nComprehensive testing plan for the Data Import functionality to ensure reliable patient record processing, duplicate detection, and error handling for medical practice data volumes.\n\n## Test Environment Setup\n\n### Prerequisites\n- MedAuth Pro application running with admin/doctor/staff access\n- Database connection established\n- CSV test files prepared with various scenarios\n- Monitor console logs and workflow output during testing\n\n## Phase 1: Database Schema Validation\n\n### Test 1.1: Schema Verification\n**Objective**: Ensure all patient table columns exist for insurance and PCP data\n**Steps**:\n1. Verify database schema includes new columns:\n   - `primary_insurance_provider` (text)\n   - `policy_number` (text)\n   - `member_id` (text)\n   - `group_number` (text)\n   - `insurance_effective_date` (timestamp)\n   - `insurance_expiration_date` (timestamp)\n   - `pcp_name` (text)\n   - `pcp_npi` (text)\n   - `pcp_phone` (text)\n   - `pcp_address` (text)\n2. Run database migration if columns missing\n3. Verify existing patient records still accessible\n\n**Expected Result**: All columns present, no database errors\n\n## Phase 2: CSV File Format Testing\n\n### Test 2.1: Standard CSV Format\n**Objective**: Test import with properly formatted CSV file\n**Test File**: Create `test_standard_import.csv` with:\n```csv\nId,FIRST,LAST,BIRTHDATE,GENDER,ADDRESS,primaryInsuranceProvider,memberId,policyNumber,pcpName,pcpNpi\nTEST-001,John,Doe,1980-01-15,M,\"123 Main St, City, ST 12345\",Blue Cross Blue Shield,MEM123456,POL789012,Dr. Smith,1234567890\nTEST-002,Jane,Smith,1975-05-20,F,\"456 Oak Ave, Town, ST 54321\",Aetna,MEM654321,POL345678,Dr. Johnson,0987654321\n```\n\n**Steps**:\n1. Navigate to Data Import → Patient Records\n2. Upload test_standard_import.csv\n3. Monitor processing progress\n4. Verify import results show success count\n5. Check imported patients appear in patient list with all data\n\n**Expected Result**: 2 patients imported successfully with all fields populated\n\n### Test 2.2: Large Volume CSV\n**Objective**: Test system handling of typical medical practice volumes\n**Test File**: Create `test_large_volume.csv` with 500+ patient records\n**Steps**:\n1. Upload large CSV file\n2. Monitor memory usage and processing time\n3. Verify batch processing works (20-record batches)\n4. Check timeout handling (should not hang)\n5. Verify all records processed within reasonable time (< 30 seconds)\n\n**Expected Result**: All records processed efficiently without hanging\n\n### Test 2.3: Invalid Data Handling\n**Objective**: Test error handling with malformed data\n**Test File**: Create `test_invalid_data.csv` with:\n- Missing required fields (FIRST, LAST, BIRTHDATE)\n- Invalid date formats\n- Invalid NPI numbers (not 10 digits)\n- Special characters in names\n\n**Steps**:\n1. Upload invalid data CSV\n2. Monitor error reporting\n3. Verify system continues processing valid records\n4. Check detailed error messages for invalid records\n\n**Expected Result**: Valid records imported, invalid records reported with specific errors\n\n## Phase 3: Duplicate Detection Testing\n\n### Test 3.1: Exact Duplicate Detection\n**Objective**: Test duplicate detection by patient ID\n**Test File**: Create CSV with duplicate patient IDs\n**Steps**:\n1. Import initial CSV with patient TEST-001\n2. Import second CSV with same patient ID TEST-001\n3. Verify duplicate detection triggers\n4. Check update options presented to user\n5. Test both \"skip\" and \"update\" options\n\n**Expected Result**: Duplicate detected, user prompted with update options\n\n### Test 3.2: Name/DOB Duplicate Detection\n**Objective**: Test duplicate detection by name and date of birth\n**Test File**: Create CSV with same name/DOB but different patient ID\n**Steps**:\n1. Import patient \"John Doe\" born 1980-01-15 with ID TEST-001\n2. Import patient \"John Doe\" born 1980-01-15 with ID TEST-002\n3. Verify duplicate detection by name/DOB combination\n4. Test update decision workflow\n\n**Expected Result**: Duplicate detected by name/DOB, proper handling options\n\n## Phase 4: Data Integrity Testing\n\n### Test 4.1: Insurance Data Import\n**Objective**: Verify comprehensive insurance data import\n**Test File**: CSV with complete insurance information\n**Steps**:\n1. Import patients with all insurance fields populated\n2. Verify insurance provider names imported correctly\n3. Check member IDs, policy numbers, group numbers\n4. Validate date fields for effective/expiration dates\n5. Confirm data appears in patient edit forms\n\n**Expected Result**: All insurance data imported and accessible in patient forms\n\n### Test 4.2: PCP Data Import\n**Objective**: Verify Primary Care Provider data import\n**Test File**: CSV with PCP information including NPI validation\n**Steps**:\n1. Import patients with PCP data (name, NPI, phone, address)\n2. Verify NPI validation (10-digit requirement)\n3. Check PCP data appears in patient records\n4. Test both valid and invalid NPI formats\n\n**Expected Result**: Valid PCP data imported, invalid NPI rejected with error\n\n## Phase 5: Progress Tracking & Session Persistence\n\n### Test 5.1: Progress Monitoring\n**Objective**: Test real-time progress tracking during import\n**Steps**:\n1. Upload medium-size CSV (100+ records)\n2. Monitor progress bar updates\n3. Verify batch processing indicators\n4. Check completion status reporting\n5. Verify final import summary accuracy\n\n**Expected Result**: Accurate progress tracking throughout import process\n\n### Test 5.2: Session Persistence\n**Objective**: Test import state persistence across navigation\n**Steps**:\n1. Start large CSV import\n2. Navigate away from Data Import page during processing\n3. Return to Data Import page\n4. Verify import progress/results still displayed\n5. Test \"Clear State\" functionality\n\n**Expected Result**: Import state persists, clear state resets properly\n\n## Phase 6: Error Recovery Testing\n\n### Test 6.1: Network Interruption\n**Objective**: Test behavior during network issues\n**Steps**:\n1. Start CSV import process\n2. Simulate network interruption (disconnect briefly)\n3. Verify error handling and recovery\n4. Check partial results handling\n\n**Expected Result**: Graceful error handling, partial results preserved\n\n### Test 6.2: Large File Memory Management\n**Objective**: Test handling of very large CSV files\n**Test File**: Create CSV with 1000+ patient records\n**Steps**:\n1. Upload very large CSV file\n2. Monitor memory usage during processing\n3. Verify no memory leaks or crashes\n4. Check processing completion\n\n**Expected Result**: Stable processing of large files without memory issues\n\n## Phase 7: Audit Trail Verification\n\n### Test 7.1: Import Activity Logging\n**Objective**: Verify all import activities logged for HIPAA compliance\n**Steps**:\n1. Perform various import operations\n2. Check Audit Trail page for import entries\n3. Verify logged information includes:\n   - User ID performing import\n   - Timestamp of operations\n   - Number of records processed\n   - Import source (CSV filename)\n   - Success/failure status\n\n**Expected Result**: Complete audit trail of all import activities\n\n## Success Criteria\n\n### Performance Benchmarks\n- Import 100 records in < 10 seconds\n- Import 500 records in < 30 seconds\n- Import 1000 records in < 60 seconds\n- No memory leaks during large imports\n- No system hangs or timeouts\n\n### Data Integrity Requirements\n- 100% accuracy for valid data import\n- Proper error reporting for invalid data\n- Complete audit trail for all operations\n- Duplicate detection accuracy > 99%\n- Insurance and PCP data fully preserved\n\n### User Experience Standards\n- Clear progress indicators throughout process\n- Intuitive error messages for import issues\n- Session state persistence across navigation\n- Easy access to import results and logs\n\n## Known Issues to Address\n\n### Current Database Schema Issue\n- Error: \"column 'primary_insurance_provider' does not exist\"\n- Fix: Run database migration to add new insurance/PCP columns\n- Test: Verify all new columns created properly\n\n### Import Hanging Issue\n- Symptom: CSV processing appears to hang on large files\n- Cause: Database query timeouts on duplicate checking\n- Fix: Optimize batch processing and query performance\n- Test: Confirm no hanging with large file imports\n\n## Test Execution Schedule\n\n1. **Phase 1-2**: Database and basic CSV testing (30 minutes)\n2. **Phase 3-4**: Duplicate detection and data integrity (45 minutes)\n3. **Phase 5-6**: Progress tracking and error recovery (30 minutes)\n4. **Phase 7**: Audit trail verification (15 minutes)\n\n**Total Estimated Time**: 2 hours for comprehensive testing\n\n## Post-Test Documentation\n\n### Test Results Template\nFor each test, document:\n- Test executed: [Date/Time]\n- Result: [Pass/Fail]\n- Issues found: [Description]\n- Performance metrics: [Time, memory usage]\n- Recommendations: [Improvements needed]\n\n### Bug Report Template\n- Issue: [Description]\n- Steps to reproduce: [Detailed steps]\n- Expected result: [What should happen]\n- Actual result: [What actually happened]\n- Severity: [High/Medium/Low]\n- Priority: [Immediate/High/Medium/Low]","size_bytes":9038},"Instructions.md":{"content":"# MedAuth Pro - Comprehensive Implementation Plan\n\n## Overview\nThis document provides a detailed analysis of the MedAuth Pro codebase and implementation plan for ensuring robust, production-ready functionality across all components.\n\n## Current Architecture Analysis\n\n### Frontend Components\n\n#### Core Layout Components\n- **MainLayout** (`client/src/components/layout/main-layout.tsx`)\n  - Dependencies: Sidebar, Header, MobileSidebar, AuthProvider\n  - Provides responsive layout wrapper for authenticated users\n  - Edge cases: Mobile responsiveness, authentication state changes\n\n- **Sidebar** (`client/src/components/layout/sidebar.tsx`)\n  - Navigation routing using Wouter\n  - Dependencies: Lucide icons, useLocation hook\n  - Edge cases: Deep linking, route permissions by role\n\n- **Header** (`client/src/components/layout/header.tsx`)\n  - User profile display, notifications, client name configuration\n  - Dependencies: AuthProvider, SystemConfig API\n  - Edge cases: Long client names, notification overflow\n\n#### Page Components\n- **Dashboard** (`client/src/pages/dashboard.tsx`)\n  - Dependencies: Stats API, AuthProvider, Quick Actions\n  - Edge cases: No data states, API failures, role-based content\n\n- **Patients** (`client/src/pages/patients.tsx`)\n  - Dependencies: Patient API, Pagination, CRUD operations\n  - Edge cases: Large datasets (1000+ records), search edge cases, deletion confirmations\n\n- **Import** (`client/src/pages/import.tsx`)\n  - Dependencies: File upload, CSV processing, Authentication\n  - Edge cases: Large files, network timeouts, invalid file formats, duplicate data\n\n- **Authorizations** (`client/src/pages/authorizations.tsx`)\n  - Dependencies: Authorization API, Insurance API, Patient API\n  - Edge cases: Complex multi-step workflows, insurance API failures\n\n- **App Logs** (`client/src/pages/app-logs.tsx`)\n  - Dependencies: App Logger API, Real-time updates\n  - Edge cases: High log volumes, filtering performance, cache invalidation\n\n#### UI Components (shadcn/ui)\n- Complete set of accessible UI primitives\n- Dependencies: Radix UI, Tailwind CSS\n- Edge cases: Accessibility compliance, theme switching, form validation\n\n### Backend Services\n\n#### Authentication & Authorization\n- **AuthMiddleware** (`server/middleware/auth.ts`)\n  - JWT token validation, role-based access control\n  - Dependencies: JWT library, bcrypt, database\n  - Edge cases: Token expiration, role escalation, concurrent sessions\n\n#### Storage Layer\n- **DatabaseStorage** (`server/storage.ts`)\n  - Comprehensive CRUD operations for all entities\n  - Dependencies: Drizzle ORM, PostgreSQL, encryption middleware\n  - Edge cases: Connection pooling, query timeouts, transaction integrity\n\n#### Business Logic Services\n- **InsuranceService** (`server/services/insurance.ts`)\n  - Mock insurance verification and prior authorization submission\n  - Dependencies: External insurance APIs (mocked)\n  - Edge cases: API rate limiting, timeout handling, partial responses\n\n- **AppLogger** (`server/services/app-logger.ts`)\n  - Comprehensive application logging with database persistence\n  - Dependencies: Database, structured logging\n  - Edge cases: Log volume management, query performance, log rotation\n\n- **AuditService** (`server/services/audit.ts`)\n  - HIPAA-compliant audit trail for all user actions\n  - Dependencies: Database, user context\n  - Edge cases: High-volume logging, compliance reporting, data retention\n\n#### Data Processing\n- **CSV Import Processing** (`server/routes.ts`)\n  - Batch processing for patient and authorization data\n  - Dependencies: Multer, file parsing, duplicate detection\n  - Edge cases: Large files (50MB+), memory management, data validation\n\n### Database Schema\n\n#### Core Entities\n- **Users**: Authentication and role management\n- **Patients**: Comprehensive patient records with PHI encryption\n- **Insurance Providers**: Insurance company data and configurations\n- **Prior Authorizations**: Multi-step authorization workflow tracking\n- **Documents**: File management with encryption\n- **Audit Logs**: Complete activity tracking for compliance\n\n#### Supporting Tables\n- **Medical Specialties**: 93 industry-standard medical specialties\n- **Procedure Codes**: CPT codes with prior authorization requirements\n- **System Config**: Dynamic system configuration management\n- **Workflow Steps**: Multi-step prior authorization process tracking\n\n## Identified Edge Cases and Error Scenarios\n\n### Authentication & Security\n1. **Token Expiration During Long Operations**\n   - Scenario: User performing CSV import when JWT expires\n   - Impact: Loss of import progress, authentication errors\n   - Solution: Implement token refresh mechanism, graceful session handling\n\n2. **Role-Based Access Violations**\n   - Scenario: Staff user attempting admin-only operations\n   - Impact: Unauthorized access attempts, audit trail gaps\n   - Solution: Comprehensive middleware validation, clear error messages\n\n3. **PHI Data Encryption Failures**\n   - Scenario: Encryption service unavailable during patient data operations\n   - Impact: Potential HIPAA violations, data integrity issues\n   - Solution: Encryption validation, fallback mechanisms, error alerting\n\n### Data Import System\n4. **Memory Exhaustion on Large CSV Files**\n   - Scenario: Importing 10,000+ patient records\n   - Impact: Application crashes, incomplete imports\n   - Solution: Streaming file processing, memory monitoring, batch size optimization\n\n5. **Database Connection Timeouts During Batch Operations**\n   - Scenario: Long-running import operations exceeding connection limits\n   - Impact: Partial imports, data inconsistency\n   - Solution: Connection pooling, timeout configuration, transaction management\n\n6. **Duplicate Data Handling Conflicts**\n   - Scenario: Concurrent imports with overlapping patient data\n   - Impact: Data corruption, constraint violations\n   - Solution: Transaction isolation, optimistic locking, conflict resolution\n\n### User Interface & Experience\n7. **Frontend State Management During Navigation**\n   - Scenario: User navigating away during active import operations\n   - Impact: Lost progress indicators, unclear system state\n   - Solution: Session storage persistence, state synchronization\n\n8. **Real-Time Data Updates with Stale Cache**\n   - Scenario: App logs not reflecting current activities due to HTTP 304 responses\n   - Impact: Misleading system status, debugging difficulties\n   - Solution: Cache-busting strategies, proper ETags, refresh mechanisms\n\n9. **Large Dataset Pagination Performance**\n   - Scenario: Displaying 1000+ patient records with complex filtering\n   - Impact: Slow page loads, poor user experience\n   - Solution: Server-side pagination, query optimization, virtual scrolling\n\n### External Dependencies\n10. **Insurance API Integration Failures**\n    - Scenario: Third-party insurance verification services unavailable\n    - Impact: Authorization workflow blockages, patient care delays\n    - Solution: Graceful degradation, retry mechanisms, fallback workflows\n\n11. **Database Provider Connectivity Issues**\n    - Scenario: Neon Database connection interruptions\n    - Impact: Application unavailability, data access failures\n    - Solution: Connection retry logic, health checks, monitoring\n\n## Test Cases for Each Feature\n\n### Authentication System\n```typescript\ndescribe('Authentication System', () => {\n  // Unit Tests\n  test('JWT token generation and validation')\n  test('Password hashing and comparison')\n  test('Role-based access control')\n  \n  // Integration Tests\n  test('Login flow with database integration')\n  test('Token refresh mechanism')\n  test('Session timeout handling')\n  \n  // Edge Cases\n  test('Concurrent login attempts')\n  test('Invalid token scenarios')\n  test('Role escalation attempts')\n})\n```\n\n### Patient Management\n```typescript\ndescribe('Patient Management', () => {\n  // CRUD Operations\n  test('Create patient with validation')\n  test('Read patient with PHI decryption')\n  test('Update patient with audit logging')\n  test('Delete patient with confirmation')\n  \n  // Pagination and Search\n  test('Paginate large patient datasets')\n  test('Search patients with partial matches')\n  test('Filter patients by multiple criteria')\n  \n  // Edge Cases\n  test('Duplicate patient ID handling')\n  test('Invalid date formats')\n  test('Special characters in names')\n  test('Bulk delete operations')\n})\n```\n\n### CSV Import System\n```typescript\ndescribe('CSV Import System', () => {\n  // File Processing\n  test('Valid CSV file processing')\n  test('Invalid file format rejection')\n  test('Large file handling (50MB+)')\n  \n  // Data Validation\n  test('Required field validation')\n  test('Date format parsing')\n  test('Duplicate detection logic')\n  \n  // Performance Tests\n  test('Memory usage during large imports')\n  test('Database connection management')\n  test('Batch processing efficiency')\n  \n  // Error Scenarios\n  test('Network timeout during upload')\n  test('Database constraint violations')\n  test('Partial import recovery')\n})\n```\n\n### Prior Authorization Workflow\n```typescript\ndescribe('Prior Authorization Workflow', () => {\n  // Workflow Steps\n  test('Initialize 10-step workflow')\n  test('Progress through workflow steps')\n  test('Handle step failures')\n  \n  // Insurance Integration\n  test('Submit authorization to insurance')\n  test('Handle insurance API responses')\n  test('Process approval/denial outcomes')\n  \n  // Edge Cases\n  test('Workflow timeout scenarios')\n  test('Multiple concurrent authorizations')\n  test('Appeals process handling')\n})\n```\n\n### App Event Logging\n```typescript\ndescribe('App Event Logging', () => {\n  // Logging Operations\n  test('Log user actions with metadata')\n  test('Performance logging with metrics')\n  test('Error logging with stack traces')\n  \n  // Retrieval and Filtering\n  test('Fetch logs with pagination')\n  test('Filter logs by level and component')\n  test('Real-time log updates')\n  \n  // Performance Tests\n  test('High-volume logging performance')\n  test('Query optimization for large datasets')\n  test('Cache invalidation strategies')\n})\n```\n\n### Insurance Verification\n```typescript\ndescribe('Insurance Verification', () => {\n  // Verification Process\n  test('Valid insurance verification')\n  test('Invalid insurance handling')\n  test('Coverage details retrieval')\n  \n  // API Integration\n  test('External API timeout handling')\n  test('Rate limiting compliance')\n  test('Response data validation')\n  \n  // Edge Cases\n  test('Expired insurance policies')\n  test('Multiple insurance policies')\n  test('Provider network restrictions')\n})\n```\n\n## Step-by-Step Implementation Approach\n\n### Phase 1: Critical Bug Fixes and Stability (Priority: High)\n1. **Resolve LSP Diagnostics**\n   - Fix 25 TypeScript errors across 5 files\n   - Update import statements and type definitions\n   - Ensure type safety across the application\n\n2. **Authentication Token Management**\n   - Implement automatic token refresh\n   - Add token expiration handling in import operations\n   - Test concurrent session management\n\n3. **CSV Import System Hardening**\n   - Optimize memory management for large files\n   - Implement proper error recovery mechanisms\n   - Add progress persistence across navigation\n\n4. **App Event Logging Cache Issues**\n   - Fix HTTP 304 caching preventing real-time updates\n   - Implement proper cache-busting strategies\n   - Optimize refresh intervals for performance\n\n### Phase 2: Data Integrity and Performance (Priority: High)\n5. **Database Query Optimization**\n   - Implement connection pooling configuration\n   - Add query timeout handling\n   - Optimize pagination queries for large datasets\n\n6. **Patient Management Enhancement**\n   - Complete CRUD operations with proper validation\n   - Implement bulk operations with confirmation dialogs\n   - Add comprehensive search and filtering\n\n7. **Prior Authorization Workflow Completion**\n   - Implement full 10-step workflow process\n   - Add state persistence and recovery\n   - Integrate with insurance API mock services\n\n### Phase 3: User Experience and Security (Priority: Medium)\n8. **Frontend State Management**\n   - Implement proper state persistence using session storage\n   - Add loading states and error boundaries\n   - Enhance navigation state management\n\n9. **Security Hardening**\n   - Implement comprehensive input validation\n   - Add PHI encryption validation\n   - Enhance audit logging coverage\n\n10. **Mobile Responsiveness**\n    - Test and fix mobile layout issues\n    - Implement touch-friendly interactions\n    - Optimize for various screen sizes\n\n### Phase 4: Advanced Features and Integration (Priority: Medium)\n11. **Real-time Updates**\n    - Implement WebSocket connections for live updates\n    - Add real-time notification system\n    - Optimize polling strategies for performance\n\n12. **Document Management Enhancement**\n    - Complete file upload/download functionality\n    - Implement file preview capabilities\n    - Add version control for documents\n\n13. **Reporting and Analytics**\n    - Implement comprehensive reporting system\n    - Add data visualization components\n    - Create exportable report formats\n\n### Phase 5: Production Readiness (Priority: High)\n14. **Comprehensive Testing**\n    - Implement unit tests for all components\n    - Add integration tests for critical workflows\n    - Create end-to-end test scenarios\n\n15. **Performance Monitoring**\n    - Implement application performance monitoring\n    - Add database query performance tracking\n    - Create alerting for critical issues\n\n16. **Documentation and Deployment**\n    - Complete API documentation\n    - Create user guides and training materials\n    - Prepare production deployment configuration\n\n## Risk Assessment\n\n### High Risk Areas\n1. **Data Import System**: Complex file processing with potential for data loss\n2. **Authentication**: Critical for security and compliance\n3. **Database Operations**: Performance issues with large datasets\n4. **PHI Handling**: HIPAA compliance requirements\n\n### Medium Risk Areas\n1. **Insurance API Integration**: External dependency reliability\n2. **Real-time Updates**: Complexity of state synchronization\n3. **Mobile Experience**: Responsive design challenges\n\n### Low Risk Areas\n1. **UI Components**: Well-established component library\n2. **Basic CRUD Operations**: Standard database operations\n3. **Static Configuration**: System settings management\n\n## Success Criteria\n\n### Functional Requirements\n- [ ] All CRUD operations working reliably\n- [ ] CSV import processing 1000+ records without errors\n- [ ] Prior authorization workflow completion\n- [ ] Real-time logging and monitoring\n- [ ] Mobile-responsive interface\n\n### Performance Requirements\n- [ ] Page load times under 2 seconds\n- [ ] CSV import processing within 60 seconds for 1000 records\n- [ ] Database queries under 500ms response time\n- [ ] 99.9% uptime availability\n\n### Security Requirements\n- [ ] HIPAA compliance for PHI data\n- [ ] Comprehensive audit logging\n- [ ] Role-based access control\n- [ ] Data encryption at rest and in transit\n\n### User Experience Requirements\n- [ ] Intuitive navigation and workflows\n- [ ] Clear error messages and feedback\n- [ ] Responsive design across devices\n- [ ] Accessibility compliance (WCAG 2.1 AA)\n\n## Implementation Timeline\n\n### Week 1: Critical Fixes\n- Days 1-2: Resolve LSP diagnostics and type errors\n- Days 3-4: Fix authentication and import system bugs\n- Days 5-7: Stabilize app event logging and caching\n\n### Week 2: Core Functionality\n- Days 1-3: Complete patient management CRUD operations\n- Days 4-5: Enhance CSV import system performance\n- Days 6-7: Implement prior authorization workflow\n\n### Week 3: Integration and Polish\n- Days 1-2: Complete insurance verification integration\n- Days 3-4: Enhance document management system\n- Days 5-7: Implement real-time updates and notifications\n\n### Week 4: Testing and Production Readiness\n- Days 1-3: Comprehensive testing implementation\n- Days 4-5: Performance optimization and monitoring\n- Days 6-7: Documentation and deployment preparation\n\nThis implementation plan provides a comprehensive roadmap for transforming the MedAuth Pro system into a production-ready, robust healthcare application with proper error handling, performance optimization, and user experience enhancements.","size_bytes":16249},"MEDAUTH_PRO_COMPREHENSIVE_DOCUMENTATION.md":{"content":"# MedAuth Pro - Comprehensive Application Documentation\n\n## Executive Summary\n\n**MedAuth Pro** is a comprehensive healthcare prior authorization management system designed to streamline the complex process of obtaining insurance approvals for medical treatments, procedures, and medications. Built as a full-stack web application, it serves as a central hub for medical practices to manage patient information, insurance verification, and authorization workflows while maintaining HIPAA compliance and comprehensive audit trails.\n\n## Application Purpose & Goals\n\n### Primary Purpose\nMedAuth Pro eliminates the administrative burden of prior authorization processes by providing:\n- Centralized patient and insurance management\n- Automated workflow tracking and status management\n- Integration capabilities with external insurance systems\n- Comprehensive audit trails for regulatory compliance\n- Document management and package generation for submissions\n\n### Core Goals\n1. **Operational Efficiency**: Reduce time spent on prior authorization processes from hours to minutes\n2. **Compliance Assurance**: Maintain HIPAA-compliant audit trails and secure data handling\n3. **Revenue Optimization**: Minimize claim denials and delays through proper authorization management\n4. **Integration Readiness**: Connect with major insurance providers and clearinghouses\n5. **Scalability**: Support medical practices from small clinics to large healthcare systems\n\n### Target Audience\n- **Primary Users**: Medical office staff, prior authorization specialists, practice managers\n- **Secondary Users**: Healthcare providers, physicians, nurses\n- **Administrative Users**: Practice administrators, compliance officers\n- **Integration Partners**: Insurance providers, clearinghouses, EMR systems\n\n## Functional Components Overview\n\n### 1. Authentication & User Management System\n\n**Purpose**: Secure access control with role-based permissions\n**Components**:\n- JWT-based authentication with session management\n- Role hierarchy: Admin, Doctor, Staff\n- User profile management with medical specialty assignment\n- Password security with bcrypt hashing\n- Automatic session refresh and timeout handling\n\n**Functionality**:\n- Secure login/logout with token management\n- Role-based feature access restrictions\n- User profile customization including medical specialties\n- Administrative user management capabilities\n\n### 2. Patient Management System\n\n**Purpose**: Comprehensive patient information repository\n**Components**:\n- Complete patient demographics with EMR integration capabilities\n- Insurance information management (primary/secondary coverage)\n- Primary Care Provider (PCP) tracking with NPI validation\n- Emergency contact information\n- Patient search and filtering capabilities\n\n**Key Features**:\n- Industry-standard insurance fields (provider, member ID, policy number, group number)\n- Insurance effective/expiration date tracking\n- PCP information with NPI number validation (10-digit requirement)\n- CSV import capabilities for bulk patient data\n- Individual patient CRUD operations (Create, Read, Update, Delete)\n- Comprehensive audit trail for all patient operations\n\n**Data Fields**:\n- **Personal**: Name, DOB, gender, race, ethnicity, contact information\n- **Administrative**: Patient ID, SSN, driver's license, passport\n- **Insurance**: Provider name, member ID, policy number, group number, effective dates\n- **Medical**: PCP name, NPI number, PCP contact information\n- **Emergency**: Emergency contact name and phone number\n\n### 3. Prior Authorization Workflow System\n\n**Purpose**: Complete authorization lifecycle management\n**Components**:\n- Multi-step workflow engine (10-step standard process)\n- CPT procedure code database (30+ codes with descriptions)\n- ICD-10 diagnosis code database (46+ official CMS codes)\n- Clinical justification documentation\n- Status management and tracking\n\n**Authorization Process Flow**:\n1. **Request Initiation**: Patient selection and treatment identification\n2. **Medical Coding**: Multiple CPT and ICD-10 code selection\n3. **Clinical Documentation**: Justification and medical necessity\n4. **Insurance Verification**: Coverage validation and requirements\n5. **Submission Preparation**: Document compilation and review\n6. **Provider Submission**: Electronic or manual submission to insurance\n7. **Status Tracking**: Real-time authorization status monitoring\n8. **Response Processing**: Approval, denial, or additional information requests\n9. **Appeal Management**: Denial response and resubmission workflows\n10. **Completion**: Final authorization receipt and documentation\n\n**Key Features**:\n- Multiple CPT code selection per authorization\n- Multiple ICD-10 diagnosis code selection\n- Treatment type auto-population based on procedure codes\n- Manual status updates (pending, approved, denied, in_review, appealed, expired)\n- Urgent authorization flagging\n- Step therapy documentation\n- Clinical evidence attachment\n- Authorization expiration tracking\n\n### 4. Insurance Provider Management\n\n**Purpose**: Comprehensive insurance provider database and integration\n**Components**:\n- Major insurance provider database (Aetna, BCBS, Cigna, UnitedHealth, etc.)\n- Provider-specific prior authorization requirements\n- Contact information and workflow steps\n- Processing time estimates\n- Integration capabilities for real-time verification\n\n**Provider Database Includes**:\n- Provider name and identification codes\n- Prior authorization phone, fax, and email contacts\n- Website and portal information\n- Average processing times (standard and urgent)\n- Specific prior authorization requirements\n- Provider-specific workflow steps\n\n### 5. External Connections Management System\n\n**Purpose**: Integration with insurance systems and clearinghouses\n**Components**:\n- Connection management for multiple external systems\n- OAuth2 authentication with token management\n- API file upload and configuration parsing\n- Real-time connection testing and monitoring\n- Comprehensive capability tracking\n\n**Supported Connection Types**:\n- **Insurance Providers**: Direct API connections to major insurers\n- **Clearinghouses**: EDI gateway integrations\n- **API Services**: Third-party healthcare data services\n- **Custom Integrations**: Flexible configuration for proprietary systems\n\n**Pre-configured Integrations**:\n- **Availity**: Real-time eligibility, prior authorization, claim status\n- **Change Healthcare**: Revenue cycle management and data exchange\n- **Relay Health**: Clinical and administrative connectivity\n- **Aetna Provider API**: Direct Aetna insurance system integration\n- **Anthem Provider Portal**: Anthem member information access\n\n**Technical Capabilities**:\n- OAuth2 token management with refresh capabilities\n- Multi-file API specification support (JSON/YAML)\n- RESTful API support (GET, POST, PUT, DELETE, PATCH)\n- Configurable timeout and retry settings\n- Custom capability label management\n- Connection status monitoring and error reporting\n\n### 6. Document Management System\n\n**Purpose**: Secure document storage and package generation\n**Components**:\n- File upload with drag-and-drop interface (up to 25MB)\n- Document categorization and metadata\n- Secure file download with authentication\n- Document version control\n- Package generation for submissions\n\n**Document Types Supported**:\n- Medical records and imaging results\n- Lab reports and diagnostic studies\n- Insurance correspondence\n- Prior authorization forms\n- Appeals documentation\n- CSV files for data import\n\n**Package Generation Features**:\n- **PDF Generation**: Professional authorization request forms\n- **Email Templates**: Pre-formatted submission correspondence\n- **JSON Export**: Structured data for API integration\n- Medical practice letterhead and formatting\n- NPI number and provider information inclusion\n\n### 7. Data Import & Integration System\n\n**Purpose**: Bulk data import and EMR integration capabilities\n**Components**:\n- CSV file processing with advanced duplicate detection\n- ModMed EMA FHIR R4 integration\n- Progress tracking and session persistence\n- Comprehensive error handling and reporting\n\n**Import Capabilities**:\n- **Patient Records**: Bulk CSV import with comprehensive field mapping\n- **EMR Integration**: Direct connection to ModMed Electronic Medical Assistant\n- **FHIR Compliance**: HL7 FHIR R4 standard support for healthcare data exchange\n- **Duplicate Detection**: Advanced matching by patient ID and name/DOB combination\n- **Batch Processing**: Optimized for large datasets (1000+ records)\n\n**Import Features**:\n- Real-time progress tracking\n- Session state persistence across navigation\n- Detailed import results with success/failure reporting\n- Comprehensive error logging and user feedback\n- Option to update existing records or skip duplicates\n\n### 8. Medical Code Database System\n\n**Purpose**: Comprehensive medical coding reference\n**Components**:\n- CPT procedure code database with descriptions\n- ICD-10 diagnosis code database from official CMS sources\n- Treatment type mapping and categorization\n- Prior authorization requirement indicators\n\n**CPT Code Database**:\n- 30+ procedure codes with plain-language descriptions\n- Treatment type auto-mapping\n- Prior authorization requirement flags\n- Code categorization by medical specialty\n- Regular updates from industry standards\n\n**ICD-10 Database**:\n- 46+ official diagnosis codes from CMS.gov\n- Chapter and block categorization\n- Fiscal year tracking\n- Medical terminology with descriptions\n- Code validation and verification\n\n### 9. Audit Trail & Compliance System\n\n**Purpose**: Complete HIPAA-compliant activity tracking\n**Components**:\n- Comprehensive audit logging for all operations\n- User activity tracking with timestamps\n- Data change tracking (before/after values)\n- IP address and user agent logging\n- Compliance reporting capabilities\n\n**Audited Activities**:\n- All patient CRUD operations\n- Prior authorization creation, updates, and status changes\n- Insurance provider management\n- Document uploads and downloads\n- External connection activities\n- System configuration changes\n- User authentication events\n- Data import operations\n\n**Compliance Features**:\n- HIPAA-compliant audit trail maintenance\n- Detailed metadata for each logged event\n- User identification and timestamp tracking\n- IP address and device information logging\n- Comprehensive change tracking for updates\n\n### 10. System Configuration Management\n\n**Purpose**: Customizable system settings and branding\n**Components**:\n- Client name customization\n- Medical specialty management\n- System-wide configuration settings\n- Administrative controls and permissions\n\n**Configuration Options**:\n- Practice name and branding customization\n- Medical specialty assignment for users\n- System notification preferences\n- Workflow step customization\n- Integration settings management\n\n## Technical Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **Styling**: Tailwind CSS with shadcn/ui component library\n- **State Management**: React Query (@tanstack/react-query) for server state\n- **Routing**: Wouter for lightweight client-side routing\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Form Handling**: React Hook Form with Zod validation for robust form management\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript for type-safe server development\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Database Provider**: Neon Database for scalable cloud database hosting\n- **Authentication**: JWT-based authentication with bcrypt password hashing\n- **Session Management**: Express sessions with PostgreSQL store for persistence\n- **Security**: Built-in PHI encryption middleware and comprehensive audit logging\n\n### Database Schema Design\n\n**Core Tables**:\n- **users**: Staff authentication and role management\n- **patients**: Comprehensive patient information with PHI encryption\n- **insurance_providers**: Insurance company data and integration settings\n- **patient_insurance**: Patient-specific insurance coverage information\n- **prior_authorizations**: Authorization requests and workflow tracking\n- **documents**: Secure file management and metadata\n- **audit_logs**: Complete audit trail for compliance\n- **procedure_codes**: CPT code database with descriptions\n- **icd10_codes**: Official CMS diagnosis codes\n- **external_connections**: API integration management\n\n**Enhanced Patient Schema**:\n- Personal demographics and contact information\n- Insurance details (provider, member ID, policy number, group number, dates)\n- Primary Care Provider information with NPI validation\n- Emergency contact information\n- Import tracking and source system identification\n\n### Security Architecture\n- **Data Encryption**: End-to-end encryption for PHI data at rest and in transit\n- **Access Control**: Role-based permissions with JWT token authentication\n- **Audit Compliance**: Comprehensive logging of all data access and modifications\n- **Session Security**: Secure session management with automatic expiration\n- **Input Validation**: Zod schema validation on all API endpoints\n- **Network Security**: HTTPS enforcement and secure API communications\n\n### Integration Architecture\n- **RESTful APIs**: Standard REST endpoints for all operations\n- **OAuth2 Support**: Industry-standard authentication for external integrations\n- **FHIR Compliance**: HL7 FHIR R4 support for healthcare data exchange\n- **File Processing**: Multer integration for secure file uploads\n- **Real-time Updates**: WebSocket support for live status updates\n\n## User Interface Design\n\n### Navigation Structure\n- **Dashboard**: Overview with key metrics and quick actions\n- **Patients**: Comprehensive patient management interface\n- **Prior Authorizations**: Authorization workflow and status tracking\n- **Insurance Providers**: Insurance company management\n- **External Connections**: API integration management\n- **Generate PA Package**: Document generation tools\n- **Data Import**: Bulk import and EMR integration\n- **Documents**: File management system\n- **Audit Trail**: Compliance and activity logging\n- **Settings**: System configuration and user preferences\n\n### Design Principles\n- **Healthcare-Focused**: Professional color scheme and medical terminology\n- **Accessibility**: WCAG 2.1 AA compliant with screen reader support\n- **Mobile Responsive**: Optimized for tablets and mobile devices\n- **Intuitive Workflow**: Step-by-step guidance for complex processes\n- **Real-time Feedback**: Immediate status updates and progress indicators\n\n### User Experience Features\n- **Quick Actions**: Dashboard buttons for common tasks\n- **Smart Forms**: Auto-population and validation for data entry\n- **Progress Tracking**: Visual indicators for multi-step processes\n- **Error Handling**: Clear, actionable error messages\n- **Keyboard Navigation**: Full keyboard accessibility support\n\n## Performance & Scalability\n\n### Performance Benchmarks\n- **Patient Load**: Support for 10,000+ patient records\n- **Concurrent Users**: 50+ simultaneous users\n- **Data Import**: 1000+ records processed in under 60 seconds\n- **Response Times**: < 2 seconds for most operations\n- **File Upload**: 25MB maximum file size with progress tracking\n\n### Scalability Features\n- **Database Optimization**: Indexed queries and efficient relationships\n- **Batch Processing**: Optimized for large data operations\n- **Memory Management**: Efficient handling of large datasets\n- **Connection Pooling**: Database connection optimization\n- **Caching Strategy**: Query result caching for improved performance\n\n## Outstanding Issues & Limitations\n\n### Known Issues\n1. **Dialog Accessibility Warning**: Missing description attributes for dialog components (cosmetic issue)\n2. **CSV Import Performance**: Large file imports may timeout on slower connections\n3. **Mobile Optimization**: Some forms may require horizontal scrolling on small screens\n\n### Current Limitations\n\n#### Technology Stack Limitations\n1. **Real-time Collaboration**: Current stack doesn't support multiple users editing simultaneously\n   - **Solution**: Consider WebSocket implementation or real-time database like Firebase\n   \n2. **Offline Capability**: No offline support for mobile users\n   - **Solution**: Implement Progressive Web App (PWA) features with service workers\n   \n3. **Advanced Reporting**: Limited built-in analytics and reporting capabilities\n   - **Solution**: Integration with business intelligence tools or custom dashboard development\n\n4. **Email Integration**: Manual email template generation, no direct sending capability\n   - **Solution**: Integration with email services like SendGrid or AWS SES\n\n5. **Fax Integration**: No built-in fax capabilities for legacy provider communications\n   - **Solution**: Integration with cloud fax services like RingCentral or eFax\n\n#### Integration Limitations\n1. **EMR Integration**: Currently limited to ModMed EMA and CSV imports\n   - **Expansion Needed**: Epic, Cerner, AllScripts, and other major EMR systems\n   \n2. **Insurance API Coverage**: Pre-configured for major insurers but requires manual setup\n   - **Enhancement**: Automated provider discovery and configuration\n   \n3. **Real-time Eligibility**: External connections support but not fully automated\n   - **Improvement**: Background eligibility verification with automatic updates\n\n#### Functional Limitations\n1. **Advanced Workflow Customization**: Fixed 10-step workflow may not suit all practices\n   - **Solution**: Configurable workflow engine with custom step definitions\n   \n2. **Multi-language Support**: English-only interface\n   - **Enhancement**: Internationalization (i18n) for Spanish and other languages\n   \n3. **Advanced Search**: Basic patient search functionality\n   - **Improvement**: Full-text search with advanced filtering and sorting options\n\n### Recommended Technology Stack Improvements\n\n#### Enhanced Real-time Features\n- **WebSocket Integration**: Socket.io for real-time updates\n- **Redis**: For session management and caching\n- **Message Queues**: Bull or Agenda for background job processing\n\n#### Advanced Database Features\n- **Full-text Search**: PostgreSQL FTS or Elasticsearch integration\n- **Data Warehousing**: Separate analytics database for reporting\n- **Backup Strategy**: Automated database backups with point-in-time recovery\n\n#### Improved User Experience\n- **Progressive Web App**: Service worker implementation for offline capabilities\n- **Advanced UI Framework**: Consider Next.js for server-side rendering\n- **Mobile-first Design**: Native mobile app development with React Native\n\n#### Enterprise Integration\n- **API Gateway**: Kong or AWS API Gateway for advanced API management\n- **Microservices Architecture**: Breaking into smaller, specialized services\n- **Container Orchestration**: Docker and Kubernetes for scalable deployment\n\n## Success Metrics & KPIs\n\n### Operational Metrics\n- **Authorization Processing Time**: Average time from request to approval\n- **Approval Rate**: Percentage of authorizations approved on first submission\n- **Staff Productivity**: Authorizations processed per staff member per day\n- **Error Rate**: Percentage of submissions requiring corrections\n\n### Technical Metrics\n- **System Uptime**: 99.9% availability target\n- **Response Time**: < 2 seconds for 95% of requests\n- **Data Accuracy**: > 99% accuracy in imported and processed data\n- **Security Compliance**: Zero data breaches and full audit compliance\n\n### Business Impact\n- **Revenue Cycle**: Reduction in days to payment\n- **Claim Denial Rate**: Decrease in insurance claim denials\n- **Administrative Cost**: Reduction in prior authorization administrative burden\n- **Provider Satisfaction**: User satisfaction scores and feedback\n\n## Future Roadmap\n\n### Short-term Enhancements (3-6 months)\n- Mobile app development for iOS and Android\n- Advanced reporting and analytics dashboard\n- Additional EMR system integrations\n- Real-time eligibility verification automation\n\n### Medium-term Goals (6-12 months)\n- AI-powered prior authorization prediction\n- Advanced workflow customization engine\n- Multi-language support and internationalization\n- Enterprise-grade security certifications\n\n### Long-term Vision (1-2 years)\n- Machine learning for approval likelihood prediction\n- Blockchain integration for secure healthcare data exchange\n- Advanced analytics and predictive modeling\n- Full healthcare ecosystem integration\n\n## Conclusion\n\nMedAuth Pro represents a comprehensive solution for healthcare prior authorization management, combining modern web technology with healthcare-specific requirements. The application successfully addresses the core challenges of prior authorization processes while maintaining the flexibility to integrate with existing healthcare infrastructure.\n\nThe system's strength lies in its comprehensive feature set, HIPAA compliance, and integration capabilities. While certain limitations exist with the current technology stack, the architecture is designed to accommodate future enhancements and scaling requirements.\n\nThe application serves as a solid foundation for healthcare administrative automation, with clear pathways for expansion into adjacent healthcare management areas and advanced automation capabilities.","size_bytes":21298},"shared/cpt-codes-data.ts":{"content":"// CPT Codes with Medical Descriptions and Prior Authorization Requirements\n// Based on healthcare industry standards and common medical procedures\n\nexport interface CPTCodeData {\n  code: string;\n  description: string;\n  category: string;\n  requiresPriorAuth: boolean;\n  treatmentType: string;\n}\n\nexport const cptCodesData: CPTCodeData[] = [\n  // Imaging/Radiology\n  {\n    code: \"70450\",\n    description: \"CT scan of head or brain without contrast\",\n    category: \"Diagnostic Imaging\",\n    requiresPriorAuth: true,\n    treatmentType: \"CT Scan - Head/Brain\"\n  },\n  {\n    code: \"70460\",\n    description: \"CT scan of head or brain with contrast\",\n    category: \"Diagnostic Imaging\", \n    requiresPriorAuth: true,\n    treatmentType: \"CT Scan - Head/Brain with Contrast\"\n  },\n  {\n    code: \"72148\",\n    description: \"MRI scan of lumbar spine without contrast\",\n    category: \"Diagnostic Imaging\",\n    requiresPriorAuth: true,\n    treatmentType: \"MRI Scan - Lumbar Spine\"\n  },\n  {\n    code: \"72149\",\n    description: \"MRI scan of lumbar spine with contrast\",\n    category: \"Diagnostic Imaging\",\n    requiresPriorAuth: true,\n    treatmentType: \"MRI Scan - Lumbar Spine with Contrast\"\n  },\n  {\n    code: \"73721\",\n    description: \"MRI scan of knee joint without contrast\",\n    category: \"Diagnostic Imaging\",\n    requiresPriorAuth: true,\n    treatmentType: \"MRI Scan - Knee Joint\"\n  },\n  {\n    code: \"73722\",\n    description: \"MRI scan of knee joint with contrast\",\n    category: \"Diagnostic Imaging\",\n    requiresPriorAuth: true,\n    treatmentType: \"MRI Scan - Knee Joint with Contrast\"\n  },\n  {\n    code: \"76700\",\n    description: \"Ultrasound examination of abdomen\",\n    category: \"Diagnostic Imaging\",\n    requiresPriorAuth: false,\n    treatmentType: \"Ultrasound - Abdominal\"\n  },\n  \n  // Cardiology\n  {\n    code: \"93000\",\n    description: \"Electrocardiogram with interpretation and report\",\n    category: \"Cardiovascular\",\n    requiresPriorAuth: false,\n    treatmentType: \"Electrocardiogram (ECG/EKG)\"\n  },\n  {\n    code: \"93306\",\n    description: \"Echocardiography transthoracic with interpretation\",\n    category: \"Cardiovascular\",\n    requiresPriorAuth: true,\n    treatmentType: \"Echocardiogram\"\n  },\n  {\n    code: \"93015\",\n    description: \"Cardiovascular stress test with physician supervision\",\n    category: \"Cardiovascular\",\n    requiresPriorAuth: true,\n    treatmentType: \"Cardiac Stress Test\"\n  },\n  \n  // Surgery/Procedures\n  {\n    code: \"29881\",\n    description: \"Arthroscopy of knee with meniscectomy\",\n    category: \"Orthopedic Surgery\",\n    requiresPriorAuth: true,\n    treatmentType: \"Knee Arthroscopy - Meniscectomy\"\n  },\n  {\n    code: \"64483\",\n    description: \"Injection of anesthetic agent; lumbar or sacral\",\n    category: \"Pain Management\",\n    requiresPriorAuth: true,\n    treatmentType: \"Epidural Steroid Injection - Lumbar\"\n  },\n  {\n    code: \"20610\",\n    description: \"Arthrocentesis, aspiration and/or injection of joint\",\n    category: \"Orthopedic Procedures\",\n    requiresPriorAuth: false,\n    treatmentType: \"Joint Injection/Aspiration\"\n  },\n  \n  // Physical Therapy\n  {\n    code: \"97110\",\n    description: \"Therapeutic exercises to develop strength and endurance\",\n    category: \"Physical Therapy\",\n    requiresPriorAuth: true,\n    treatmentType: \"Physical Therapy - Therapeutic Exercise\"\n  },\n  {\n    code: \"97112\",\n    description: \"Neuromuscular reeducation of movement, balance, coordination\",\n    category: \"Physical Therapy\", \n    requiresPriorAuth: true,\n    treatmentType: \"Physical Therapy - Neuromuscular Reeducation\"\n  },\n  {\n    code: \"97140\",\n    description: \"Manual therapy techniques to mobilize soft tissue and joints\",\n    category: \"Physical Therapy\",\n    requiresPriorAuth: true,\n    treatmentType: \"Physical Therapy - Manual Therapy\"\n  },\n  \n  // Gastroenterology\n  {\n    code: \"45378\",\n    description: \"Colonoscopy with examination of entire colon\",\n    category: \"Gastroenterology\",\n    requiresPriorAuth: true,\n    treatmentType: \"Colonoscopy - Diagnostic\"\n  },\n  {\n    code: \"43235\",\n    description: \"Upper endoscopy with examination of esophagus, stomach, duodenum\",\n    category: \"Gastroenterology\",\n    requiresPriorAuth: true,\n    treatmentType: \"Upper Endoscopy (EGD)\"\n  },\n  \n  // Laboratory/Pathology\n  {\n    code: \"80053\",\n    description: \"Comprehensive metabolic panel\",\n    category: \"Laboratory\",\n    requiresPriorAuth: false,\n    treatmentType: \"Blood Test - Comprehensive Metabolic Panel\"\n  },\n  {\n    code: \"85025\",\n    description: \"Complete blood count with automated differential\",\n    category: \"Laboratory\",\n    requiresPriorAuth: false,\n    treatmentType: \"Blood Test - Complete Blood Count\"\n  },\n  \n  // Dermatology\n  {\n    code: \"11100\",\n    description: \"Biopsy of skin, single lesion\",\n    category: \"Dermatology\",\n    requiresPriorAuth: false,\n    treatmentType: \"Skin Biopsy\"\n  },\n  {\n    code: \"17000\",\n    description: \"Destruction of benign lesion, first lesion\",\n    category: \"Dermatology\",\n    requiresPriorAuth: false,\n    treatmentType: \"Lesion Removal - Destruction\"\n  },\n  \n  // Ophthalmology\n  {\n    code: \"92004\",\n    description: \"Comprehensive eye examination for new patient\",\n    category: \"Ophthalmology\",\n    requiresPriorAuth: false,\n    treatmentType: \"Comprehensive Eye Exam\"\n  },\n  {\n    code: \"66984\",\n    description: \"Cataract surgery with intraocular lens insertion\",\n    category: \"Ophthalmology\",\n    requiresPriorAuth: true,\n    treatmentType: \"Cataract Surgery\"\n  },\n  \n  // Mental Health\n  {\n    code: \"90791\",\n    description: \"Psychiatric diagnostic evaluation\",\n    category: \"Mental Health\",\n    requiresPriorAuth: true,\n    treatmentType: \"Psychiatric Evaluation\"\n  },\n  {\n    code: \"90837\",\n    description: \"Individual psychotherapy session, 60 minutes\",\n    category: \"Mental Health\",\n    requiresPriorAuth: true,\n    treatmentType: \"Individual Psychotherapy\"\n  },\n  \n  // Specialty Consultations\n  {\n    code: \"99205\",\n    description: \"New patient comprehensive consultation, high complexity\",\n    category: \"Consultation\",\n    requiresPriorAuth: false,\n    treatmentType: \"Specialist Consultation - New Patient\"\n  },\n  {\n    code: \"99215\",\n    description: \"Established patient visit, high complexity\",\n    category: \"Office Visit\",\n    requiresPriorAuth: false,\n    treatmentType: \"Office Visit - High Complexity\"\n  }\n];\n\n// Function to get treatment type from CPT code\nexport function getTreatmentTypeFromCPT(cptCode: string): string {\n  const cptData = cptCodesData.find(code => code.code === cptCode);\n  return cptData?.treatmentType || \"Medical Treatment\";\n}\n\n// Function to check if CPT code requires prior authorization\nexport function requiresPriorAuthorization(cptCode: string): boolean {\n  const cptData = cptCodesData.find(code => code.code === cptCode);\n  return cptData?.requiresPriorAuth || false;\n}\n\n// Function to get CPT code description\nexport function getCPTDescription(cptCode: string): string {\n  const cptData = cptCodesData.find(code => code.code === cptCode);\n  return cptData?.description || \"Medical procedure\";\n}\n\n// Function to get CPT codes by category\nexport function getCPTCodesByCategory(category: string) {\n  return cptCodesData.filter(code => code.category === category);\n}\n\n// Function to get all categories\nexport function getAllCategories(): string[] {\n  return Array.from(new Set(cptCodesData.map(code => code.category)));\n}","size_bytes":7385},"shared/icd10-codes-data.ts":{"content":"// Official ICD-10 Diagnosis Codes from CMS.gov\n// Comprehensive medical diagnosis codes for prior authorization requests\n// Source: CMS.gov ICD-10-CM FY 2026 (effective October 1, 2025)\n\nexport const COMMON_ICD10_DIAGNOSIS_CODES = [\n  // Chapter A: Certain infectious and parasitic diseases (A00-B99)\n  { icd10Code: 'A09', description: 'Infectious gastroenteritis and colitis, unspecified', category: 'Infectious Diseases', chapterCode: 'A', chapterDescription: 'Certain infectious and parasitic diseases' },\n  { icd10Code: 'B34.9', description: 'Viral infection, unspecified', category: 'Infectious Diseases', chapterCode: 'A', chapterDescription: 'Certain infectious and parasitic diseases' },\n  \n  // Chapter C: Malignant neoplasms (C00-C97)\n  { icd10Code: 'C78.00', description: 'Secondary malignant neoplasm of unspecified lung', category: 'Neoplasms', chapterCode: 'C', chapterDescription: 'Neoplasms' },\n  { icd10Code: 'C80.1', description: 'Malignant neoplasm, unspecified', category: 'Neoplasms', chapterCode: 'C', chapterDescription: 'Neoplasms' },\n  \n  // Chapter E: Endocrine, nutritional and metabolic diseases (E00-E89)\n  { icd10Code: 'E11.9', description: 'Type 2 diabetes mellitus without complications', category: 'Endocrine/Metabolic', chapterCode: 'E', chapterDescription: 'Endocrine, nutritional and metabolic diseases' },\n  { icd10Code: 'E11.65', description: 'Type 2 diabetes mellitus with hyperglycemia', category: 'Endocrine/Metabolic', chapterCode: 'E', chapterDescription: 'Endocrine, nutritional and metabolic diseases' },\n  { icd10Code: 'E78.5', description: 'Hyperlipidemia, unspecified', category: 'Endocrine/Metabolic', chapterCode: 'E', chapterDescription: 'Endocrine, nutritional and metabolic diseases' },\n  { icd10Code: 'E66.9', description: 'Obesity, unspecified', category: 'Endocrine/Metabolic', chapterCode: 'E', chapterDescription: 'Endocrine, nutritional and metabolic diseases' },\n  \n  // Chapter F: Mental, Behavioral and Neurodevelopmental disorders (F01-F99)\n  { icd10Code: 'F32.9', description: 'Major depressive disorder, single episode, unspecified', category: 'Mental Health', chapterCode: 'F', chapterDescription: 'Mental, Behavioral and Neurodevelopmental disorders' },\n  { icd10Code: 'F41.9', description: 'Anxiety disorder, unspecified', category: 'Mental Health', chapterCode: 'F', chapterDescription: 'Mental, Behavioral and Neurodevelopmental disorders' },\n  { icd10Code: 'F43.10', description: 'Post-traumatic stress disorder, unspecified', category: 'Mental Health', chapterCode: 'F', chapterDescription: 'Mental, Behavioral and Neurodevelopmental disorders' },\n  \n  // Chapter G: Diseases of the nervous system (G00-G99)\n  { icd10Code: 'G43.909', description: 'Migraine, unspecified, not intractable, without status migrainosus', category: 'Neurological', chapterCode: 'G', chapterDescription: 'Diseases of the nervous system' },\n  { icd10Code: 'G89.3', description: 'Neoplasm related pain (acute) (chronic)', category: 'Neurological', chapterCode: 'G', chapterDescription: 'Diseases of the nervous system' },\n  { icd10Code: 'G89.29', description: 'Other chronic pain', category: 'Neurological', chapterCode: 'G', chapterDescription: 'Diseases of the nervous system' },\n  \n  // Chapter I: Diseases of the circulatory system (I00-I99)\n  { icd10Code: 'I10', description: 'Essential (primary) hypertension', category: 'Cardiovascular', chapterCode: 'I', chapterDescription: 'Diseases of the circulatory system' },\n  { icd10Code: 'I25.10', description: 'Atherosclerotic heart disease of native coronary artery without angina pectoris', category: 'Cardiovascular', chapterCode: 'I', chapterDescription: 'Diseases of the circulatory system' },\n  { icd10Code: 'I48.91', description: 'Unspecified atrial fibrillation', category: 'Cardiovascular', chapterCode: 'I', chapterDescription: 'Diseases of the circulatory system' },\n  \n  // Chapter J: Diseases of the respiratory system (J00-J99)\n  { icd10Code: 'J44.1', description: 'Chronic obstructive pulmonary disease with acute exacerbation', category: 'Respiratory', chapterCode: 'J', chapterDescription: 'Diseases of the respiratory system' },\n  { icd10Code: 'J45.9', description: 'Asthma, unspecified', category: 'Respiratory', chapterCode: 'J', chapterDescription: 'Diseases of the respiratory system' },\n  { icd10Code: 'J18.9', description: 'Pneumonia, unspecified organism', category: 'Respiratory', chapterCode: 'J', chapterDescription: 'Diseases of the respiratory system' },\n  \n  // Chapter K: Diseases of the digestive system (K00-K95)\n  { icd10Code: 'K21.9', description: 'Gastro-esophageal reflux disease without esophagitis', category: 'Digestive', chapterCode: 'K', chapterDescription: 'Diseases of the digestive system' },\n  { icd10Code: 'K59.00', description: 'Constipation, unspecified', category: 'Digestive', chapterCode: 'K', chapterDescription: 'Diseases of the digestive system' },\n  { icd10Code: 'K80.20', description: 'Calculus of gallbladder without cholecystitis without obstruction', category: 'Digestive', chapterCode: 'K', chapterDescription: 'Diseases of the digestive system' },\n  \n  // Chapter M: Diseases of the musculoskeletal system (M00-M99)\n  { icd10Code: 'M25.511', description: 'Pain in right shoulder', category: 'Musculoskeletal', chapterCode: 'M', chapterDescription: 'Diseases of the musculoskeletal system and connective tissue' },\n  { icd10Code: 'M25.512', description: 'Pain in left shoulder', category: 'Musculoskeletal', chapterCode: 'M', chapterDescription: 'Diseases of the musculoskeletal system and connective tissue' },\n  { icd10Code: 'M54.5', description: 'Low back pain', category: 'Musculoskeletal', chapterCode: 'M', chapterDescription: 'Diseases of the musculoskeletal system and connective tissue' },\n  { icd10Code: 'M79.3', description: 'Panniculitis, unspecified', category: 'Musculoskeletal', chapterCode: 'M', chapterDescription: 'Diseases of the musculoskeletal system and connective tissue' },\n  { icd10Code: 'M17.11', description: 'Unilateral primary osteoarthritis, right knee', category: 'Musculoskeletal', chapterCode: 'M', chapterDescription: 'Diseases of the musculoskeletal system and connective tissue' },\n  { icd10Code: 'M17.12', description: 'Unilateral primary osteoarthritis, left knee', category: 'Musculoskeletal', chapterCode: 'M', chapterDescription: 'Diseases of the musculoskeletal system and connective tissue' },\n  \n  // Chapter N: Diseases of the genitourinary system (N00-N99)\n  { icd10Code: 'N18.6', description: 'End stage renal disease', category: 'Genitourinary', chapterCode: 'N', chapterDescription: 'Diseases of the genitourinary system' },\n  { icd10Code: 'N39.0', description: 'Urinary tract infection, site not specified', category: 'Genitourinary', chapterCode: 'N', chapterDescription: 'Diseases of the genitourinary system' },\n  \n  // Chapter R: Symptoms, signs and abnormal clinical findings (R00-R99)\n  { icd10Code: 'R06.02', description: 'Shortness of breath', category: 'Symptoms/Signs', chapterCode: 'R', chapterDescription: 'Symptoms, signs and abnormal clinical and laboratory findings' },\n  { icd10Code: 'R50.9', description: 'Fever, unspecified', category: 'Symptoms/Signs', chapterCode: 'R', chapterDescription: 'Symptoms, signs and abnormal clinical and laboratory findings' },\n  { icd10Code: 'R06.00', description: 'Dyspnea, unspecified', category: 'Symptoms/Signs', chapterCode: 'R', chapterDescription: 'Symptoms, signs and abnormal clinical and laboratory findings' },\n  \n  // Chapter S: Injury, poisoning and consequences of external causes (S00-T88)\n  { icd10Code: 'S72.001A', description: 'Fracture of unspecified part of neck of right femur, initial encounter for closed fracture', category: 'Injury/Poisoning', chapterCode: 'S', chapterDescription: 'Injury, poisoning and certain other consequences of external causes' },\n  { icd10Code: 'S83.511A', description: 'Sprain of anterior cruciate ligament of right knee, initial encounter', category: 'Injury/Poisoning', chapterCode: 'S', chapterDescription: 'Injury, poisoning and certain other consequences of external causes' },\n  \n  // Chapter Z: Factors influencing health status (Z00-Z99)\n  { icd10Code: 'Z51.11', description: 'Encounter for antineoplastic chemotherapy', category: 'Health Status Factors', chapterCode: 'Z', chapterDescription: 'Factors influencing health status and contact with health services' },\n  { icd10Code: 'Z12.11', description: 'Encounter for screening for malignant neoplasm of colon', category: 'Health Status Factors', chapterCode: 'Z', chapterDescription: 'Factors influencing health status and contact with health services' },\n];\n\n// Common diagnoses requiring prior authorization for specific treatments\nexport const PRIOR_AUTH_DIAGNOSIS_CODES = [\n  // Cancer diagnoses requiring specialized treatments\n  { icd10Code: 'C25.9', description: 'Malignant neoplasm of pancreas, unspecified', category: 'Oncology', requiresPriorAuth: true },\n  { icd10Code: 'C78.30', description: 'Secondary malignant neoplasm of unspecified respiratory organ', category: 'Oncology', requiresPriorAuth: true },\n  \n  // Chronic conditions requiring ongoing management\n  { icd10Code: 'M05.9', description: 'Rheumatoid arthritis, unspecified', category: 'Rheumatology', requiresPriorAuth: true },\n  { icd10Code: 'M32.9', description: 'Systemic lupus erythematosus, unspecified', category: 'Rheumatology', requiresPriorAuth: true },\n  \n  // Neurological conditions requiring specialized interventions\n  { icd10Code: 'G35', description: 'Multiple sclerosis', category: 'Neurology', requiresPriorAuth: true },\n  { icd10Code: 'G20', description: 'Parkinson\\'s disease', category: 'Neurology', requiresPriorAuth: true },\n  \n  // Mental health conditions requiring specialized treatments\n  { icd10Code: 'F20.9', description: 'Schizophrenia, unspecified', category: 'Psychiatry', requiresPriorAuth: true },\n  { icd10Code: 'F31.9', description: 'Bipolar disorder, unspecified', category: 'Psychiatry', requiresPriorAuth: true },\n];\n\n// All ICD-10 codes combined for seeding\nexport const ALL_ICD10_CODES = [\n  ...COMMON_ICD10_DIAGNOSIS_CODES.map(code => ({ ...code, requiresPriorAuth: false })),\n  ...PRIOR_AUTH_DIAGNOSIS_CODES\n];","size_bytes":10197},"server/routes/icd10-codes.ts":{"content":"import express from \"express\";\nimport { storage } from \"../storage\";\nimport { icd10CodeService } from \"../services/icd10-codes\";\nimport { authenticate, AuthenticatedRequest } from \"../middleware/auth\";\nimport { appLogger } from \"../services/app-logger\";\nimport { auditService } from \"../services/audit\";\n\nconst router = express.Router();\n\nexport function setupIcd10CodesRoutes(app: express.Application) {\n  // Get all ICD-10 codes with search and filtering\n  app.get(\"/api/icd10-codes\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { search, category, chapter, limit = 50 } = req.query;\n      \n      let codes;\n      if (search) {\n        codes = await icd10CodeService.searchIcd10Codes(\n          search as string,\n          category as string | undefined\n        );\n      } else if (category) {\n        codes = await icd10CodeService.getIcd10CodesByCategory(category as string);\n      } else if (chapter) {\n        codes = await icd10CodeService.getIcd10CodesByChapter(chapter as string);\n      } else {\n        codes = await storage.getIcd10Codes(parseInt(limit as string));\n      }\n      \n      await auditService.log(req.user!.id, 'ICD10_CODES_ACCESS', 'icd10_code', null, {\n        search: search as string,\n        category: category as string,\n        chapter: chapter as string,\n        limit: parseInt(limit as string),\n        resultsCount: codes.length,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      await appLogger.info('ICD-10 codes retrieved', { component: 'api', userId: req.user?.id });\n      res.json(codes);\n    } catch (error) {\n      await appLogger.error('Failed to get ICD-10 codes', { component: 'api', userId: req.user?.id }, error as Error);\n      res.status(500).json({ message: \"Failed to get ICD-10 codes\" });\n    }\n  });\n\n  // Get ICD-10 categories\n  app.get(\"/api/icd10-categories\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const categories = await icd10CodeService.getIcd10Categories();\n      \n      await auditService.log(req.user!.id, 'ICD10_CATEGORIES_ACCESS', 'icd10_code', null, {\n        categoriesCount: categories.length,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(categories);\n    } catch (error) {\n      await appLogger.error('Failed to get ICD-10 categories', { component: 'api', userId: req.user?.id }, error as Error);\n      res.status(500).json({ message: \"Failed to get ICD-10 categories\" });\n    }\n  });\n\n  // Get specific ICD-10 code details\n  app.get(\"/api/icd10-codes/:code\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const code = req.params.code;\n      const diagnosis = await icd10CodeService.getDiagnosisInfo(code);\n      \n      if (!diagnosis) {\n        return res.status(404).json({ message: \"ICD-10 code not found\" });\n      }\n      \n      await auditService.log(req.user!.id, 'ICD10_CODE_DETAIL_ACCESS', 'icd10_code', null, {\n        code,\n        description: diagnosis.description,\n        category: diagnosis.category,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      res.json(diagnosis);\n    } catch (error) {\n      await appLogger.error('Failed to get ICD-10 code details', { component: 'api', userId: req.user?.id }, error as Error);\n      res.status(500).json({ message: \"Failed to get ICD-10 code details\" });\n    }\n  });\n\n  // Search ICD-10 codes with advanced filtering\n  app.post(\"/api/icd10-codes/search\", authenticateUser, async (req, res) => {\n    try {\n      const { query, filters } = req.body;\n      const { category, chapter, fiscalYear } = filters || {};\n      \n      let codes;\n      if (chapter) {\n        codes = await icd10CodeService.getIcd10CodesByChapter(chapter);\n      } else if (category) {\n        codes = await icd10CodeService.getIcd10CodesByCategory(category);\n      } else {\n        codes = await icd10CodeService.searchIcd10Codes(query, category);\n      }\n      \n      // Apply additional filters if specified\n      if (fiscalYear) {\n        codes = codes.filter(code => code.fiscalYear === fiscalYear);\n      }\n      \n      res.json(codes);\n    } catch (error) {\n      await appLogger.error('Failed to search ICD-10 codes', 'api', req.user?.id, error);\n      res.status(500).json({ message: \"Failed to search ICD-10 codes\" });\n    }\n  });\n\n  // Add custom ICD-10 code (admin only)\n  app.post(\"/api/icd10-codes\", authenticateUser, async (req, res) => {\n    try {\n      const userId = req.user?.id;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      // Check if user has admin role\n      const user = await storage.getUser(userId);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const codeData = req.body;\n      const newCode = await icd10CodeService.addCustomIcd10Code(codeData, userId);\n      \n      await appLogger.info(`Custom ICD-10 code added: ${newCode.icd10Code}`, 'api', userId);\n      res.status(201).json(newCode);\n    } catch (error) {\n      await appLogger.error('Failed to add ICD-10 code', 'api', req.user?.id, error);\n      res.status(500).json({ message: \"Failed to add ICD-10 code\" });\n    }\n  });\n\n  // Update ICD-10 code (admin only)\n  app.put(\"/api/icd10-codes/:code\", authenticateUser, async (req, res) => {\n    try {\n      const userId = req.user?.id;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      // Check if user has admin role\n      const user = await storage.getUser(userId);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const code = req.params.code;\n      const updateData = req.body;\n      const updatedCode = await icd10CodeService.updateIcd10Code(code, updateData, userId);\n      \n      await appLogger.info(`ICD-10 code updated: ${code}`, 'api', userId);\n      res.json(updatedCode);\n    } catch (error) {\n      await appLogger.error('Failed to update ICD-10 code', 'api', req.user?.id, error);\n      res.status(500).json({ message: \"Failed to update ICD-10 code\" });\n    }\n  });\n}\n\nexport default router;","size_bytes":6217},"server/routes/insurance.ts":{"content":"import { Router } from \"express\";\nimport { z } from \"zod\";\nimport { storage } from \"../storage\";\nimport { insertInsuranceProviderSchema } from \"@shared/schema\";\nimport { authenticate, AuthenticatedRequest } from \"../middleware/auth\";\nimport { auditService } from \"../services/audit\";\n\nconst router = Router();\n\n// Get all insurance providers\nrouter.get(\"/providers\", authenticate, async (req: AuthenticatedRequest, res) => {\n  try {\n    const providers = await storage.getInsuranceProviders();\n    \n    await auditService.log(req.user!.id, 'INSURANCE_PROVIDER_LIST', 'insurance_provider', null, {\n      providerCount: providers.length,\n    }, req.ip || '', req.get(\"User-Agent\") || '');\n    \n    res.json(providers);\n  } catch (error) {\n    console.error(\"Error fetching insurance providers:\", error);\n    res.status(500).json({ message: \"Failed to fetch insurance providers\" });\n  }\n});\n\n// Get single insurance provider\nrouter.get(\"/providers/:id\", authenticate, async (req: AuthenticatedRequest, res) => {\n  try {\n    const id = parseInt(req.params.id);\n    if (isNaN(id)) {\n      return res.status(400).json({ message: \"Invalid provider ID\" });\n    }\n\n    const provider = await storage.getInsuranceProvider(id);\n    if (!provider) {\n      return res.status(404).json({ message: \"Insurance provider not found\" });\n    }\n\n    await auditService.log(req.user!.id, 'INSURANCE_PROVIDER_VIEW', 'insurance_provider', id, {\n      providerName: provider.name,\n      providerCode: provider.code,\n    }, req.ip || '', req.get(\"User-Agent\") || '');\n\n    res.json(provider);\n  } catch (error) {\n    console.error(\"Error fetching insurance provider:\", error);\n    res.status(500).json({ message: \"Failed to fetch insurance provider\" });\n  }\n});\n\n// Create insurance provider\nrouter.post(\"/providers\", authenticate, async (req: AuthenticatedRequest, res) => {\n  try {\n    // Only admin can create insurance providers\n    if (req.user?.role !== \"admin\") {\n      await auditService.log(req.user!.id, 'INSURANCE_PROVIDER_CREATE_DENIED', 'insurance_provider', null, {\n        reason: 'Insufficient permissions',\n        userRole: req.user?.role,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    const validatedData = insertInsuranceProviderSchema.parse(req.body);\n    const provider = await storage.createInsuranceProvider(validatedData);\n    \n    await auditService.log(req.user!.id, 'INSURANCE_PROVIDER_CREATE', 'insurance_provider', provider.id, {\n      providerName: provider.name,\n      providerCode: provider.code,\n      contactInfo: provider.contactInfo,\n      priorAuthSteps: provider.priorAuthSteps,\n    }, req.ip || '', req.get(\"User-Agent\") || '');\n    \n    res.status(201).json(provider);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: \"Validation error\", \n        errors: error.errors \n      });\n    }\n    console.error(\"Error creating insurance provider:\", error);\n    res.status(500).json({ message: \"Failed to create insurance provider\" });\n  }\n});\n\n// Update insurance provider\nrouter.put(\"/providers/:id\", authenticate, async (req: AuthenticatedRequest, res) => {\n  try {\n    // Only admin can update insurance providers\n    if (req.user?.role !== \"admin\") {\n      await auditService.log(req.user!.id, 'INSURANCE_PROVIDER_UPDATE_DENIED', 'insurance_provider', parseInt(req.params.id), {\n        reason: 'Insufficient permissions',\n        userRole: req.user?.role,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    const id = parseInt(req.params.id);\n    if (isNaN(id)) {\n      return res.status(400).json({ message: \"Invalid provider ID\" });\n    }\n\n    const existingProvider = await storage.getInsuranceProvider(id);\n    if (!existingProvider) {\n      return res.status(404).json({ message: \"Insurance provider not found\" });\n    }\n\n    const validatedData = insertInsuranceProviderSchema.partial().parse(req.body);\n    const updatedProvider = await storage.updateInsuranceProvider(id, validatedData);\n    \n    if (!updatedProvider) {\n      return res.status(404).json({ message: \"Failed to update insurance provider\" });\n    }\n\n    await auditService.log(req.user!.id, 'INSURANCE_PROVIDER_UPDATE', 'insurance_provider', id, {\n      changes: validatedData,\n      previousData: {\n        name: existingProvider.name,\n        code: existingProvider.code,\n        contactInfo: existingProvider.contactInfo,\n      },\n      newData: {\n        name: updatedProvider.name,\n        code: updatedProvider.code,\n        contactInfo: updatedProvider.contactInfo,\n      },\n    }, req.ip || '', req.get(\"User-Agent\") || '');\n\n    res.json(updatedProvider);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: \"Validation error\", \n        errors: error.errors \n      });\n    }\n    console.error(\"Error updating insurance provider:\", error);\n    res.status(500).json({ message: \"Failed to update insurance provider\" });\n  }\n});\n\n// Delete insurance provider (soft delete)\nrouter.delete(\"/providers/:id\", authenticate, async (req: AuthenticatedRequest, res) => {\n  try {\n    // Only admin can delete insurance providers\n    if (req.user?.role !== \"admin\") {\n      await auditService.log(req.user!.id, 'INSURANCE_PROVIDER_DELETE_DENIED', 'insurance_provider', parseInt(req.params.id), {\n        reason: 'Insufficient permissions',\n        userRole: req.user?.role,\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    const id = parseInt(req.params.id);\n    if (isNaN(id)) {\n      return res.status(400).json({ message: \"Invalid provider ID\" });\n    }\n\n    const existingProvider = await storage.getInsuranceProvider(id);\n    if (!existingProvider) {\n      return res.status(404).json({ message: \"Insurance provider not found\" });\n    }\n\n    const success = await storage.deleteInsuranceProvider(id);\n    if (!success) {\n      return res.status(500).json({ message: \"Failed to delete insurance provider\" });\n    }\n\n    await auditService.log(req.user!.id, 'INSURANCE_PROVIDER_DELETE', 'insurance_provider', id, {\n      deletedProvider: {\n        name: existingProvider.name,\n        code: existingProvider.code,\n        contactInfo: existingProvider.contactInfo,\n      },\n    }, req.ip || '', req.get(\"User-Agent\") || '');\n\n    res.json({ message: \"Insurance provider deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting insurance provider:\", error);\n    res.status(500).json({ message: \"Failed to delete insurance provider\" });\n  }\n});\n\nexport default router;","size_bytes":6783},"server/routes/modmed-ema.ts":{"content":"import { Router } from \"express\";\nimport { z } from \"zod\";\nimport { authenticate, AuthenticatedRequest } from \"../middleware/auth\";\nimport { auditService } from \"../services/audit\";\nimport { storage } from \"../storage\";\nimport { nanoid } from \"nanoid\";\n\nconst router = Router();\n\n// Validation schemas\nconst emaCredentialsSchema = z.object({\n  clientId: z.string().min(1, \"Client ID is required\"),\n  clientSecret: z.string().min(1, \"Client Secret is required\"),\n  baseUrl: z.string().url(\"Valid base URL is required\"),\n  environment: z.enum([\"production\", \"sandbox\"])\n});\n\nconst importPatientsSchema = z.object({\n  patientIds: z.array(z.string()).min(1, \"At least one patient ID is required\"),\n  baseUrl: z.string().url(\"Valid base URL is required\")\n});\n\n// ModMed EMA OAuth2 Authentication\nrouter.post(\"/authenticate\", authenticate, async (req: AuthenticatedRequest, res) => {\n  try {\n    const credentials = emaCredentialsSchema.parse(req.body);\n    \n    // OAuth2 authentication with ModMed EMA\n    const authUrl = credentials.environment === 'production' \n      ? 'https://auth-exscribe-prod-fhir.ema-api.com/core/oauth2/token'\n      : 'https://auth-exscribe-sandbox-fhir.ema-api.com/core/oauth2/token';\n\n    const authResponse = await fetch(authUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Accept': 'application/json'\n      },\n      body: new URLSearchParams({\n        grant_type: 'client_credentials',\n        client_id: credentials.clientId,\n        client_secret: credentials.clientSecret,\n        scope: 'patient/*.read practitioner/*.read organization/*.read'\n      }).toString()\n    });\n\n    if (!authResponse.ok) {\n      const errorText = await authResponse.text();\n      console.error('ModMed EMA authentication failed:', errorText);\n      \n      await auditService.log(req.user!.id, 'MODMED_EMA_AUTH_FAILED', 'system', null, {\n        environment: credentials.environment,\n        error: errorText\n      }, req.ip || '', req.get(\"User-Agent\") || '');\n      \n      return res.status(401).json({ \n        message: \"ModMed EMA authentication failed\", \n        details: errorText \n      });\n    }\n\n    const authData = await authResponse.json();\n    \n    await auditService.log(req.user!.id, 'MODMED_EMA_AUTH_SUCCESS', 'system', null, {\n      environment: credentials.environment,\n      baseUrl: credentials.baseUrl,\n      tokenExpiry: authData.expires_in\n    }, req.ip || '', req.get(\"User-Agent\") || '');\n\n    res.json({\n      access_token: authData.access_token,\n      token_type: authData.token_type,\n      expires_in: authData.expires_in,\n      scope: authData.scope\n    });\n\n  } catch (error: any) {\n    console.error('ModMed EMA authentication error:', error);\n    \n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: \"Invalid credentials format\", \n        errors: error.errors \n      });\n    }\n    \n    res.status(500).json({ \n      message: \"Authentication failed\", \n      error: error.message \n    });\n  }\n});\n\n// Fetch FHIR metadata to test connection\nrouter.get(\"/metadata\", authenticate, async (req: AuthenticatedRequest, res) => {\n  try {\n    const emaToken = req.get('EMA-Token');\n    if (!emaToken) {\n      return res.status(401).json({ message: \"EMA token required\" });\n    }\n\n    // Default to production metadata endpoint\n    const metadataUrl = 'https://exscribe-prod-fhir.ema-api.com/fhir/modmed/root/r4/metadata';\n    \n    const metadataResponse = await fetch(metadataUrl, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${emaToken}`,\n        'Accept': 'application/fhir+json'\n      }\n    });\n\n    if (!metadataResponse.ok) {\n      const errorText = await metadataResponse.text();\n      console.error('ModMed EMA metadata fetch failed:', errorText);\n      return res.status(metadataResponse.status).json({ \n        message: \"Failed to fetch metadata\", \n        details: errorText \n      });\n    }\n\n    const metadata = await metadataResponse.json();\n    \n    await auditService.log(req.user!.id, 'MODMED_EMA_METADATA_FETCH', 'system', null, {\n      metadataVersion: metadata.fhirVersion,\n      implementation: metadata.implementation?.description\n    }, req.ip || '', req.get(\"User-Agent\") || '');\n\n    res.json(metadata);\n\n  } catch (error: any) {\n    console.error('ModMed EMA metadata error:', error);\n    res.status(500).json({ \n      message: \"Failed to fetch metadata\", \n      error: error.message \n    });\n  }\n});\n\n// Fetch patients from ModMed EMA FHIR API\nrouter.get(\"/patients\", authenticate, async (req: AuthenticatedRequest, res) => {\n  try {\n    const emaToken = req.get('EMA-Token');\n    if (!emaToken) {\n      return res.status(401).json({ message: \"EMA token required\" });\n    }\n\n    // Fetch patients with pagination support\n    const limit = parseInt(req.query.limit as string) || 50;\n    const offset = parseInt(req.query.offset as string) || 0;\n    \n    const patientsUrl = `https://exscribe-prod-fhir.ema-api.com/fhir/modmed/root/r4/Patient?_count=${limit}&_offset=${offset}`;\n    \n    const patientsResponse = await fetch(patientsUrl, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${emaToken}`,\n        'Accept': 'application/fhir+json'\n      }\n    });\n\n    if (!patientsResponse.ok) {\n      const errorText = await patientsResponse.text();\n      console.error('ModMed EMA patients fetch failed:', errorText);\n      return res.status(patientsResponse.status).json({ \n        message: \"Failed to fetch patients\", \n        details: errorText \n      });\n    }\n\n    const patientsBundle = await patientsResponse.json();\n    const patients = patientsBundle.entry?.map((entry: any) => entry.resource) || [];\n    \n    await auditService.log(req.user!.id, 'MODMED_EMA_PATIENTS_FETCH', 'system', null, {\n      patientsCount: patients.length,\n      totalResults: patientsBundle.total\n    }, req.ip || '', req.get(\"User-Agent\") || '');\n\n    res.json({\n      patients,\n      total: patientsBundle.total,\n      limit,\n      offset\n    });\n\n  } catch (error: any) {\n    console.error('ModMed EMA patients fetch error:', error);\n    res.status(500).json({ \n      message: \"Failed to fetch patients\", \n      error: error.message \n    });\n  }\n});\n\n// Import selected patients from ModMed EMA to MedAuth Pro\nrouter.post(\"/import-patients\", authenticate, async (req: AuthenticatedRequest, res) => {\n  try {\n    const emaToken = req.get('EMA-Token');\n    if (!emaToken) {\n      return res.status(401).json({ message: \"EMA token required\" });\n    }\n\n    const { patientIds, baseUrl } = importPatientsSchema.parse(req.body);\n    \n    let recordsImported = 0;\n    let recordsUpdated = 0;\n    let errors: string[] = [];\n    const importedPatients: any[] = [];\n\n    for (const patientId of patientIds) {\n      try {\n        // Fetch detailed patient data from ModMed EMA\n        const patientUrl = `${baseUrl}/Patient/${patientId}`;\n        const patientResponse = await fetch(patientUrl, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${emaToken}`,\n            'Accept': 'application/fhir+json'\n          }\n        });\n\n        if (!patientResponse.ok) {\n          errors.push(`Failed to fetch patient ${patientId}: ${patientResponse.statusText}`);\n          continue;\n        }\n\n        const fhirPatient = await patientResponse.json();\n        \n        // Convert FHIR patient to MedAuth Pro format\n        const medAuthPatient = {\n          patientId: nanoid(),\n          firstName: fhirPatient.name?.[0]?.given?.[0] || 'Unknown',\n          lastName: fhirPatient.name?.[0]?.family || 'Unknown',\n          dateOfBirth: new Date(fhirPatient.birthDate || '1900-01-01'),\n          gender: fhirPatient.gender || null,\n          phone: fhirPatient.telecom?.find((t: any) => t.system === 'phone')?.value || null,\n          email: fhirPatient.telecom?.find((t: any) => t.system === 'email')?.value || null,\n          address: fhirPatient.address?.[0] ? [\n            fhirPatient.address[0].line?.join(' '),\n            fhirPatient.address[0].city,\n            fhirPatient.address[0].state,\n            fhirPatient.address[0].postalCode\n          ].filter(Boolean).join(', ') : null,\n          city: fhirPatient.address?.[0]?.city || null,\n          state: fhirPatient.address?.[0]?.state || null,\n          zipCode: fhirPatient.address?.[0]?.postalCode || null,\n          race: fhirPatient.extension?.find((e: any) => \n            e.url === 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-race'\n          )?.extension?.[0]?.valueCoding?.display || null,\n          ethnicity: fhirPatient.extension?.find((e: any) => \n            e.url === 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity'\n          )?.extension?.[0]?.valueCoding?.display || null,\n          sourceSystem: 'ModMed EMA',\n          lastImportDate: new Date()\n        };\n\n        // Check for existing patient by name and DOB\n        const existingPatient = await storage.getPatientByName(\n          medAuthPatient.firstName,\n          medAuthPatient.lastName,\n          medAuthPatient.dateOfBirth\n        );\n\n        if (existingPatient) {\n          // Update existing patient\n          await storage.updatePatient(existingPatient.id, medAuthPatient);\n          recordsUpdated++;\n          \n          await auditService.log(req.user!.id, 'MODMED_EMA_PATIENT_UPDATE', 'patient', existingPatient.id, {\n            fhirPatientId: patientId,\n            patientName: `${medAuthPatient.firstName} ${medAuthPatient.lastName}`,\n            sourceSystem: 'ModMed EMA'\n          }, req.ip || '', req.get(\"User-Agent\") || '', existingPatient, medAuthPatient);\n        } else {\n          // Create new patient\n          const newPatient = await storage.createPatient(medAuthPatient);\n          recordsImported++;\n          importedPatients.push(newPatient);\n          \n          await auditService.log(req.user!.id, 'MODMED_EMA_PATIENT_CREATE', 'patient', newPatient.id, {\n            fhirPatientId: patientId,\n            patientName: `${medAuthPatient.firstName} ${medAuthPatient.lastName}`,\n            sourceSystem: 'ModMed EMA'\n          }, req.ip || '', req.get(\"User-Agent\") || '', null, newPatient);\n        }\n\n      } catch (patientError: any) {\n        console.error(`Error importing patient ${patientId}:`, patientError);\n        errors.push(`Patient ${patientId}: ${patientError.message}`);\n      }\n    }\n\n    await auditService.log(req.user!.id, 'MODMED_EMA_IMPORT_COMPLETE', 'system', null, {\n      totalRequested: patientIds.length,\n      recordsImported,\n      recordsUpdated,\n      errorCount: errors.length,\n      sourceSystem: 'ModMed EMA'\n    }, req.ip || '', req.get(\"User-Agent\") || '');\n\n    res.json({\n      recordsProcessed: patientIds.length,\n      recordsImported,\n      recordsUpdated,\n      errors: errors.length,\n      errorDetails: errors,\n      patients: importedPatients\n    });\n\n  } catch (error: any) {\n    console.error('ModMed EMA import error:', error);\n    \n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: \"Invalid import request\", \n        errors: error.errors \n      });\n    }\n    \n    res.status(500).json({ \n      message: \"Import failed\", \n      error: error.message \n    });\n  }\n});\n\nexport default router;","size_bytes":11302},"server/routes/prior-auth-generator.ts":{"content":"import { Router } from \"express\";\nimport { AuthenticatedRequest } from \"../middleware/auth\";\nimport { appLogger } from \"../services/app-logger\";\nimport { storage } from \"../storage\";\n\nconst router = Router();\n\n// Generate prior authorization package  \nrouter.post(\"/generate-package\", async (req: any, res) => {\n  // Handle authentication for POST request\n  const token = req.headers.authorization?.replace('Bearer ', '');\n  if (!token) {\n    return res.status(401).json({ error: \"Authentication required\" });\n  }\n  try {\n    const { authorizationId, format, customNotes } = req.body;\n\n    if (!authorizationId) {\n      return res.status(400).json({ error: \"Authorization ID is required\" });\n    }\n\n    // Get authorization details for package generation\n    const auth = await storage.getPriorAuthorization(parseInt(authorizationId));\n    if (!auth) {\n      return res.status(404).json({ error: \"Authorization not found\" });\n    }\n\n    // Get insurance provider name for filename\n    const patient = await storage.getPatient(auth.patientId);\n    const insurance = await storage.getInsuranceProvider(auth.insuranceId);\n    const insuranceName = insurance?.name || 'Insurance';\n    \n    // Format current date and time for filename\n    const now = new Date();\n    const dateStr = now.toISOString().slice(0, 10); // YYYY-MM-DD\n    const timeStr = now.toTimeString().slice(0, 8).replace(/:/g, '-'); // HH-MM-SS\n    \n    const packageData = {\n      authorizationId,\n      format,\n      customNotes,\n      generatedAt: now.toISOString(),\n      fileName: format === 'pdf' \n        ? `PA-Submission-${dateStr}_${timeStr}_${insuranceName.replace(/[^a-zA-Z0-9]/g, '')}.pdf`\n        : `Prior_Auth_${authorizationId}_${format}.${format === 'email' ? 'eml' : 'json'}`,\n      downloadUrl: `/api/prior-auth/download/${authorizationId}/${format}?token=${req.headers.authorization?.replace('Bearer ', '')}`,\n    };\n\n    appLogger.info(\"Prior authorization package generated\", {\n      userId: 1, // Would normally extract from JWT token\n      authorizationId,\n      format,\n    });\n\n    res.json(packageData);\n  } catch (error) {\n    appLogger.error(\"Failed to generate prior authorization package\", {\n      userId: 1,\n    }, error as Error);\n    res.status(500).json({ error: \"Failed to generate package\" });\n  }\n});\n\n// Download generated package (with token-based auth)\nrouter.get(\"/download/:authorizationId/:format\", async (req: any, res) => {\n  try {\n    // Handle token from query parameter for file downloads\n    const token = req.query.token || req.headers.authorization?.replace('Bearer ', '');\n    if (!token) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n    const { authorizationId, format } = req.params;\n    \n    // Get authorization details\n    const auth = await storage.getPriorAuthorization(parseInt(authorizationId));\n    if (!auth) {\n      return res.status(404).json({ error: \"Authorization not found\" });\n    }\n\n    // Get patient details\n    const patient = await storage.getPatient(auth.patientId);\n    \n    let content: string;\n    let contentType: string;\n    let fileName: string;\n\n    if (format === 'pdf') {\n      // Format current date and time for filename\n      const now = new Date();\n      const dateStr = now.toISOString().slice(0, 10); // YYYY-MM-DD\n      const timeStr = now.toTimeString().slice(0, 8).replace(/:/g, '-'); // HH-MM-SS\n      const insurance = await storage.getInsuranceProvider(auth.insuranceId);\n      const insuranceName = insurance?.name || 'Insurance';\n      \n      // Generate PDF content (simplified for demo)\n      content = await generatePDFContent(auth, patient);\n      contentType = 'application/pdf';\n      fileName = `PA-Submission-${dateStr}_${timeStr}_${insuranceName.replace(/[^a-zA-Z0-9]/g, '')}.pdf`;\n    } else if (format === 'email') {\n      // Generate email template\n      content = generateEmailContent(auth, patient);\n      contentType = 'message/rfc822';\n      fileName = `Prior_Authorization_Email_${authorizationId}.eml`;\n    } else if (format === 'json') {\n      // Generate JSON data\n      content = generateJSONContent(auth, patient);\n      contentType = 'application/json';\n      fileName = `Prior_Authorization_Data_${authorizationId}.json`;\n    } else {\n      return res.status(400).json({ error: \"Invalid format\" });\n    }\n\n    res.setHeader('Content-Disposition', `attachment; filename=\"${fileName}\"`);\n    res.setHeader('Content-Type', contentType);\n    res.setHeader('Content-Length', Buffer.byteLength(content).toString());\n    res.send(content);\n\n    appLogger.info(\"Prior authorization package downloaded\", {\n      userId: 1, // Would normally extract from JWT token\n      authorizationId,\n      format,\n    });\n\n  } catch (error) {\n    appLogger.error(\"Failed to download prior authorization package\", {\n      userId: 1,\n    }, error as Error);\n    res.status(500).json({ error: \"Failed to download package\" });\n  }\n});\n\n// Helper functions to generate content\nasync function generatePDFContent(auth: any, patient: any): Promise<string> {\n  // Get system configuration for practice information\n  const clientName = auth.systemConfig?.client_name || 'Medical Practice';\n  const patientDOB = patient?.dateOfBirth ? new Date(patient.dateOfBirth).toLocaleDateString() : 'N/A';\n  const requestedDate = auth.requestedDate ? new Date(auth.requestedDate).toLocaleDateString() : new Date().toLocaleDateString();\n  \n  // Format CPT codes (handle both single and multiple codes)\n  const cptCodes = Array.isArray(auth.cptCodes) ? auth.cptCodes : [auth.cptCode].filter(Boolean);\n  const cptCodesText = cptCodes.map((code: string) => `        ${code}`).join('\\\\n        ');\n  \n  // Format ICD-10 codes (handle both single and multiple codes)  \n  const icd10Codes = Array.isArray(auth.icd10Codes) ? auth.icd10Codes : [auth.icd10Code].filter(Boolean);\n  const icd10CodesText = icd10Codes.map((code: string) => `        ${code}`).join('\\\\n        ');\n\n  // Format clinical justification\n  const justification = auth.clinicalJustification || 'Patient presents with medically necessary condition requiring the requested procedure. Clinical evaluation supports the need for this treatment based on current medical standards and patient-specific factors.';\n\n  // Create PDF content with proper escaping - avoiding template literals in PDF stream\n  const patientName = (patient?.firstName || 'N/A') + ' ' + (patient?.lastName || 'N/A');\n  const insurance = await storage.getInsuranceProvider(auth.insuranceId);\n  const insuranceName = insurance?.name || 'N/A';\n  const memberId = auth.patientInsurance?.memberId || 'N/A';\n  const groupNumber = auth.patientInsurance?.groupNumber || 'N/A';\n  const currentDate = new Date().toLocaleDateString();\n\n  return `%PDF-1.4\n1 0 obj\n<<\n/Type /Catalog  \n/Pages 2 0 R\n>>\nendobj\n\n2 0 obj\n<<\n/Type /Pages\n/Kids [3 0 R]\n/Count 1\n>>\nendobj\n\n3 0 obj\n<<\n/Type /Page\n/Parent 2 0 R\n/MediaBox [0 0 612 792]\n/Contents 4 0 R\n/Resources <<\n/Font <<\n/F1 5 0 R\n/F2 6 0 R\n>>\n>>\n>>\nendobj\n\n4 0 obj\n<<\n/Length 1500\n>>\nstream\nBT\n/F2 16 Tf\n50 750 Td\n(PRIOR AUTHORIZATION REQUEST FORM) Tj\n0 -30 Td\n/F2 11 Tf\n(Provider Name: Dr. Michael Haiken, MD) Tj\n0 -14 Td\n(Practice Name: ` + clientName + `) Tj\n0 -14 Td\n(NPI: 1234567890) Tj\n0 -14 Td\n(Phone: \\\\(555\\\\) 123-4567) Tj\n0 -14 Td\n(Fax: \\\\(555\\\\) 987-6543) Tj\n0 -14 Td\n(Address: 123 Medical Center Dr, Fort Myers, FL 33907) Tj\n0 -25 Td\n/F2 12 Tf\n(Patient Information:) Tj\n0 -18 Td\n/F1 10 Tf\n(Name: ` + patientName + `) Tj\n0 -14 Td\n(DOB: ` + patientDOB + `) Tj\n0 -14 Td\n(Insurance: ` + insuranceName + `) Tj\n0 -14 Td\n(Member ID: ` + memberId + `) Tj\n0 -14 Td\n(Group #: ` + groupNumber + `) Tj\n0 -25 Td\n/F2 12 Tf\n(Procedure Requested) Tj\n0 -18 Td\n/F1 10 Tf\n(CPT Code\\\\(s\\\\):) Tj\n0 -14 Td\n(` + (cptCodesText || '        N/A') + `) Tj\n0 -20 Td\n(Diagnosis Code \\\\(ICD-10\\\\):) Tj\n0 -14 Td\n(` + (icd10CodesText || '        N/A') + `) Tj\n0 -20 Td\n(Proposed Date of Service: ` + requestedDate + `) Tj\n0 -14 Td\n(Procedure Location: ` + clientName + ` In-Office Suite) Tj\n0 -14 Td\n(Facility NPI: 1234567890) Tj\n0 -25 Td\n/F2 12 Tf\n(Clinical Justification / Medical Necessity) Tj\n0 -18 Td\n/F1 10 Tf\n(` + justification.substring(0, 200) + `) Tj\n0 -35 Td\n/F2 12 Tf\n(Attachments Included:) Tj\n0 -18 Td\n/F1 10 Tf\n(        Clinical documentation) Tj\n0 -14 Td\n(        Progress notes) Tj\n0 -14 Td\n(        Treatment plan) Tj\n0 -14 Td\n(        Supporting medical records) Tj\n0 -35 Td\n(Requesting Provider Signature: ___________________________) Tj\n0 -18 Td\n(Date: ` + currentDate + `) Tj\nET\nendstream\nendobj\n\n5 0 obj\n<<\n/Type /Font\n/Subtype /Type1\n/BaseFont /Helvetica\n>>\nendobj\n\n6 0 obj\n<<\n/Type /Font\n/Subtype /Type1\n/BaseFont /Helvetica-Bold\n>>\nendobj\n\nxref\n0 7\n0000000000 65535 f \n0000000009 00000 n \n0000000074 00000 n \n0000000131 00000 n \n0000000258 00000 n \n0000001812 00000 n \n0000001875 00000 n \ntrailer\n<<\n/Size 7\n/Root 1 0 R\n>>\nstartxref\n1943\n%%EOF`;\n}\n\nfunction generateEmailContent(auth: any, patient: any): string {\n  const patientName = `${patient?.firstName || 'N/A'} ${patient?.lastName || 'N/A'}`;\n  const insuranceName = auth.insurance?.name || 'N/A';\n  const requestedDate = auth.requestedDate ? new Date(auth.requestedDate).toLocaleDateString() : new Date().toLocaleDateString();\n\n  return `Subject: Prior Authorization Request - ${patientName} - ${auth.authorizationId}\nFrom: prior-auth@medicalcenter.com\nTo: authorizations@${insuranceName.toLowerCase().replace(/\\s+/g, '')}.com\nDate: ${new Date().toDateString()}\n\nDear ${insuranceName} Authorization Team,\n\nI am submitting a prior authorization request for the following patient:\n\nPATIENT INFORMATION:\nName: ${patientName}\nDate of Birth: ${patient?.dateOfBirth ? new Date(patient.dateOfBirth).toLocaleDateString() : 'N/A'}\nMember ID: ${auth.patientInsurance?.memberId || 'N/A'}\nGroup Number: ${auth.patientInsurance?.groupNumber || 'N/A'}\n\nREQUESTED PROCEDURE/TREATMENT:\nTreatment Type: ${auth.treatmentType || 'N/A'}\nCPT Code(s): ${Array.isArray(auth.cptCodes) ? auth.cptCodes.join(', ') : auth.cptCode || 'N/A'}\nICD-10 Code(s): ${Array.isArray(auth.icd10Codes) ? auth.icd10Codes.join(', ') : auth.icd10Code || 'N/A'}\nRequested Service Date: ${requestedDate}\n\nCLINICAL JUSTIFICATION:\n${auth.clinicalJustification || 'Clinical justification provided in attached documentation.'}\n\nPROVIDER INFORMATION:\nProvider Name: Dr. Michael Haiken, MD\nPractice: ${auth.systemConfig?.client_name || 'Medical Practice'}\nNPI: 1234567890\nPhone: (555) 123-4567\nFax: (555) 987-6543\n\nPlease process this request at your earliest convenience. All supporting clinical documentation is available upon request.\n\nThank you for your prompt attention to this matter.\n\nSincerely,\nDr. Michael Haiken, MD\nAuthorization Request ID: ${auth.authorizationId}\nDate: ${new Date().toLocaleDateString()}`;\n}\n\nfunction generateJSONContent(auth: any, patient: any): string {\n  const jsonData = {\n    authorizationRequest: {\n      id: auth.authorizationId,\n      status: auth.status,\n      submissionDate: new Date().toISOString(),\n      requestedServiceDate: auth.requestedDate,\n      \n      provider: {\n        name: \"Dr. Michael Haiken, MD\",\n        practice: auth.systemConfig?.client_name || 'Medical Practice',\n        npi: \"1234567890\",\n        phone: \"(555) 123-4567\",\n        fax: \"(555) 987-6543\",\n        address: \"123 Medical Center Dr, Fort Myers, FL 33907\"\n      },\n      \n      patient: {\n        name: `${patient?.firstName || 'N/A'} ${patient?.lastName || 'N/A'}`,\n        dateOfBirth: patient?.dateOfBirth || null,\n        gender: patient?.gender || null,\n        address: patient?.address || null,\n        phone: patient?.phone || null,\n        email: patient?.email || null\n      },\n      \n      insurance: {\n        provider: auth.insurance?.name || 'N/A',\n        memberId: auth.patientInsurance?.memberId || 'N/A',\n        groupNumber: auth.patientInsurance?.groupNumber || 'N/A',\n        isPrimary: auth.patientInsurance?.isPrimary || false\n      },\n      \n      clinical: {\n        treatmentType: auth.treatmentType,\n        cptCodes: Array.isArray(auth.cptCodes) ? auth.cptCodes : [auth.cptCode].filter(Boolean),\n        icd10Codes: Array.isArray(auth.icd10Codes) ? auth.icd10Codes : [auth.icd10Code].filter(Boolean),\n        clinicalJustification: auth.clinicalJustification,\n        medicalNecessity: \"Patient requires requested treatment based on clinical evaluation and medical standards\"\n      },\n      \n      attachments: [\n        \"Clinical documentation\",\n        \"Progress notes\", \n        \"Treatment plan\",\n        \"Supporting medical records\"\n      ],\n      \n      metadata: {\n        systemVersion: \"MedAuth Pro v2.0.0\",\n        exportDate: new Date().toISOString(),\n        hipaaCompliant: true,\n        auditTrail: {\n          createdBy: \"System Administrator\",\n          lastModified: auth.updatedAt || auth.createdAt,\n          reviewStatus: \"Pending\"\n        }\n      }\n    }\n  };\n\n  return JSON.stringify(jsonData, null, 2);\n}\n\nexport default router;","size_bytes":12959},"server/services/icd10-codes.ts":{"content":"import { storage } from \"../storage\";\nimport { InsertIcd10Code } from \"@shared/schema\";\nimport { auditService } from \"./audit\";\nimport { ALL_ICD10_CODES } from \"@shared/icd10-codes-data\";\n\nexport class Icd10CodeService {\n  \n  // Initialize ICD-10 codes database with official CMS.gov data\n  async seedIcd10Codes(): Promise<void> {\n    try {\n      console.log('Seeding ICD-10 diagnosis codes from CMS.gov...');\n      \n      for (const diagnosis of ALL_ICD10_CODES) {\n        const existingCode = await storage.getIcd10CodeByCode(diagnosis.icd10Code);\n        \n        if (!existingCode) {\n          const insertData: InsertIcd10Code = {\n            icd10Code: diagnosis.icd10Code,\n            description: diagnosis.description,\n            category: diagnosis.category,\n            chapterCode: diagnosis.chapterCode || null,\n            chapterDescription: diagnosis.chapterDescription || null,\n            subcategory: diagnosis.subcategory || null,\n            blockCode: null,\n            blockDescription: null,\n            isActive: true,\n            fiscalYear: '2026',\n            effectiveDate: null,\n            terminationDate: null,\n          };\n          \n          await storage.createIcd10Code(insertData);\n        }\n      }\n      \n      console.log(`Seeded ${ALL_ICD10_CODES.length} ICD-10 diagnosis codes`);\n    } catch (error) {\n      console.error('Failed to seed ICD-10 codes:', error);\n    }\n  }\n\n  // Search ICD-10 diagnosis codes\n  async searchIcd10Codes(query: string, category?: string): Promise<any[]> {\n    try {\n      return await storage.searchIcd10Codes(query, category);\n    } catch (error) {\n      console.error('Failed to search ICD-10 codes:', error);\n      return [];\n    }\n  }\n\n  // Get ICD-10 codes by category\n  async getIcd10CodesByCategory(category: string): Promise<any[]> {\n    try {\n      return await storage.getIcd10CodesByCategory(category);\n    } catch (error) {\n      console.error('Failed to get ICD-10 codes by category:', error);\n      return [];\n    }\n  }\n\n  // Get all ICD-10 categories\n  async getIcd10Categories(): Promise<string[]> {\n    try {\n      return await storage.getIcd10Categories();\n    } catch (error) {\n      console.error('Failed to get ICD-10 categories:', error);\n      return [];\n    }\n  }\n\n  // Get ICD-10 codes by chapter\n  async getIcd10CodesByChapter(chapterCode: string): Promise<any[]> {\n    try {\n      return await storage.getIcd10CodesByChapter(chapterCode);\n    } catch (error) {\n      console.error('Failed to get ICD-10 codes by chapter:', error);\n      return [];\n    }\n  }\n\n  // Add custom ICD-10 code\n  async addCustomIcd10Code(codeData: InsertIcd10Code, userId: number): Promise<any> {\n    try {\n      const existingCode = await storage.getIcd10CodeByCode(codeData.icd10Code);\n      \n      if (existingCode) {\n        throw new Error(`ICD-10 code ${codeData.icd10Code} already exists`);\n      }\n\n      const newCode = await storage.createIcd10Code(codeData);\n      \n      // Log ICD-10 code addition\n      await auditService.logDataModification(\n        userId,\n        'icd10_code',\n        newCode.id,\n        'CREATE',\n        null,\n        newCode,\n        '',\n        ''\n      );\n\n      return newCode;\n    } catch (error) {\n      console.error('Failed to add custom ICD-10 code:', error);\n      throw error;\n    }\n  }\n\n  // Update ICD-10 code\n  async updateIcd10Code(icd10Code: string, updateData: Partial<InsertIcd10Code>, userId: number): Promise<any> {\n    try {\n      const existingCode = await storage.getIcd10CodeByCode(icd10Code);\n      \n      if (!existingCode) {\n        throw new Error(`ICD-10 code ${icd10Code} not found`);\n      }\n\n      const updatedCode = await storage.updateIcd10Code(existingCode.id, updateData);\n\n      // Log ICD-10 code update\n      await auditService.logDataModification(\n        userId,\n        'icd10_code',\n        existingCode.id,\n        'UPDATE',\n        existingCode,\n        updatedCode,\n        '',\n        ''\n      );\n\n      return updatedCode;\n    } catch (error) {\n      console.error('Failed to update ICD-10 code:', error);\n      throw error;\n    }\n  }\n\n  // Get comprehensive diagnosis information\n  async getDiagnosisInfo(icd10Code: string): Promise<any> {\n    try {\n      const diagnosis = await storage.getIcd10CodeByCode(icd10Code);\n      \n      if (!diagnosis) {\n        return null;\n      }\n\n      return {\n        ...diagnosis,\n        chapterInfo: {\n          code: diagnosis.chapterCode,\n          description: diagnosis.chapterDescription\n        },\n        categoryInfo: {\n          name: diagnosis.category,\n          subcategory: diagnosis.subcategory\n        },\n        fiscalYearInfo: {\n          year: diagnosis.fiscalYear,\n          effectiveDate: diagnosis.effectiveDate,\n          terminationDate: diagnosis.terminationDate\n        }\n      };\n    } catch (error) {\n      console.error('Failed to get diagnosis info:', error);\n      return null;\n    }\n  }\n}\n\nexport const icd10CodeService = new Icd10CodeService();","size_bytes":4978},"client/src/pages/external-connections.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Plus, \n  Settings, \n  CheckCircle, \n  XCircle, \n  RefreshCw, \n  ExternalLink,\n  Shield,\n  Zap,\n  Building2,\n  Key,\n  Globe,\n  Trash2,\n  Upload,\n  File,\n  Download,\n  Edit\n} from \"lucide-react\";\n\ninterface ExternalConnection {\n  id: string;\n  name: string;\n  type: 'insurance' | 'clearinghouse' | 'edi' | 'api';\n  provider: string;\n  status: 'connected' | 'disconnected' | 'testing' | 'error';\n  description: string;\n  baseUrl: string;\n  apiKey?: string;\n  clientId?: string;\n  clientSecret?: string;\n  oauthToken?: string;\n  tokenType?: 'Bearer' | 'Basic' | 'API-Key';\n  tokenExpiry?: string;\n  refreshToken?: string;\n  scopes?: string[];\n  environment: 'production' | 'sandbox' | 'test';\n  capabilities: string[];\n  customCapabilities?: string[];\n  isActive: boolean;\n  lastConnected?: string;\n  lastSync?: string;\n  errorMessage?: string;\n  metadata?: Record<string, any>;\n  createdAt: string;\n  updatedAt: string;\n  configFiles?: {\n    name: string;\n    type: 'json' | 'yaml';\n    content: any;\n    uploadedAt: string;\n  }[];\n  httpMethods?: ('GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH')[];\n  headers?: { [key: string]: string };\n  timeout?: number;\n  retryCount?: number;\n}\n\nconst connectionTypes = [\n  { value: 'insurance', label: 'Insurance Provider', icon: Shield },\n  { value: 'clearinghouse', label: 'Clearinghouse', icon: Building2 },\n  { value: 'edi', label: 'EDI Gateway', icon: Zap },\n  { value: 'api', label: 'API Service', icon: Globe },\n];\n\nconst presetProviders = [\n  {\n    name: 'Availity',\n    type: 'clearinghouse',\n    baseUrl: 'https://api.availity.com',\n    capabilities: ['prior_auth_lookup', 'eligibility_verification', 'claim_status'],\n    description: 'Real-time eligibility, prior authorization, and claim status checking',\n  },\n  {\n    name: 'Change Healthcare',\n    type: 'clearinghouse', \n    baseUrl: 'https://api.changehealthcare.com',\n    capabilities: ['prior_auth_lookup', 'eligibility_verification', 'claim_submission'],\n    description: 'Comprehensive healthcare data exchange and revenue cycle management',\n  },\n  {\n    name: 'Relay Health',\n    type: 'clearinghouse',\n    baseUrl: 'https://api.relayhealth.com',\n    capabilities: ['prior_auth_lookup', 'patient_scheduling', 'clinical_messaging'],\n    description: 'Clinical and administrative connectivity solutions',\n  },\n  {\n    name: 'Aetna Provider API',\n    type: 'insurance',\n    baseUrl: 'https://api.aetna.com',\n    capabilities: ['prior_auth_status', 'member_eligibility', 'benefit_verification'],\n    description: 'Direct integration with Aetna insurance systems',\n  },\n  {\n    name: 'Anthem Provider Portal',\n    type: 'insurance',\n    baseUrl: 'https://api.anthem.com',\n    capabilities: ['prior_auth_lookup', 'claim_status', 'provider_directory'],\n    description: 'Access to Anthem provider services and member information',\n  },\n];\n\nexport default function ExternalConnections() {\n  const [selectedConnection, setSelectedConnection] = useState<ExternalConnection | null>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isConfigureDialogOpen, setIsConfigureDialogOpen] = useState(false);\n  const [connectionToEdit, setConnectionToEdit] = useState<ExternalConnection | null>(null);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [connectionToDelete, setConnectionToDelete] = useState<ExternalConnection | null>(null);\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  const [newCapability, setNewCapability] = useState('');\n  const [newConnection, setNewConnection] = useState({\n    name: '',\n    type: 'insurance' as const,\n    provider: '',\n    baseUrl: '',\n    environment: 'sandbox' as const,\n    description: '',\n    clientId: '',\n    clientSecret: '',\n    apiKey: '',\n    oauthToken: '',\n    tokenType: 'Bearer' as const,\n    tokenExpiry: '',\n    refreshToken: '',\n    scopes: [] as string[],\n    capabilities: [] as string[],\n    customCapabilities: [] as string[],\n    httpMethods: ['GET', 'POST'] as ('GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH')[],\n    headers: {} as { [key: string]: string },\n    timeout: 30000,\n    retryCount: 3,\n    configFiles: [] as any[],\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Mock data - in production this would come from API\n  const { data: connections = [], isLoading } = useQuery({\n    queryKey: ['/api/external-connections'],\n    queryFn: async () => {\n      // Mock data for demonstration\n      return [\n        {\n          id: '1',\n          name: 'Availity Production',\n          type: 'clearinghouse',\n          provider: 'Availity',\n          status: 'connected',\n          description: 'Real-time eligibility and prior authorization lookup',\n          baseUrl: 'https://api.availity.com',\n          environment: 'production',\n          capabilities: ['prior_auth_lookup', 'eligibility_verification'],\n          isActive: true,\n          lastConnected: '2025-07-30T10:15:00Z',\n          lastSync: '2025-07-30T15:30:00Z',\n          createdAt: '2025-07-25T09:00:00Z',\n          updatedAt: '2025-07-30T15:30:00Z',\n        },\n        {\n          id: '2', \n          name: 'Aetna Provider API',\n          type: 'insurance',\n          provider: 'Aetna',\n          status: 'disconnected',\n          description: 'Direct integration with Aetna insurance systems',\n          baseUrl: 'https://api.aetna.com',\n          environment: 'sandbox',\n          capabilities: ['prior_auth_status', 'member_eligibility'],\n          isActive: false,\n          lastConnected: '2025-07-28T14:22:00Z',\n          errorMessage: 'API key expired',\n          createdAt: '2025-07-20T11:30:00Z',\n          updatedAt: '2025-07-28T14:22:00Z',\n        }\n      ] as ExternalConnection[];\n    },\n  });\n\n  const createConnectionMutation = useMutation({\n    mutationFn: async (connectionData: typeof newConnection) => {\n      // In production, this would create the connection via API\n      return { id: Math.random().toString(), ...connectionData, status: 'testing' };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/external-connections'] });\n      setIsCreateDialogOpen(false);\n      setNewConnection({\n        name: '',\n        type: 'insurance',\n        provider: '',\n        baseUrl: '',\n        environment: 'sandbox',\n        description: '',\n        clientId: '',\n        clientSecret: '',\n        apiKey: '',\n        capabilities: [],\n      });\n      toast({\n        title: \"Connection Created\",\n        description: \"External connection has been created successfully.\",\n      });\n    },\n  });\n\n  const testConnectionMutation = useMutation({\n    mutationFn: async (connectionId: string) => {\n      const connection = connections.find(c => c.id === connectionId);\n      if (!connection) throw new Error('Connection not found');\n      \n      // Simulate testing the connection with some realistic validation\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Basic validation checks\n      if (!connection.baseUrl) throw new Error('Base URL is required');\n      if (!connection.clientId && !connection.apiKey) throw new Error('Authentication credentials are required');\n      \n      // Simulate different outcomes based on connection status\n      if (connection.status === 'error') {\n        throw new Error(connection.errorMessage || 'Connection failed');\n      }\n      \n      return { success: true, message: 'Connection test successful' };\n    },\n    onSuccess: (_, connectionId) => {\n      // Update the connection status to 'connected'\n      queryClient.setQueryData(['/api/external-connections'], (oldData: ExternalConnection[] | undefined) => {\n        if (!oldData) return oldData;\n        return oldData.map(conn => \n          conn.id === connectionId \n            ? { ...conn, status: 'connected' as const, lastConnected: new Date().toISOString(), errorMessage: undefined }\n            : conn\n        );\n      });\n      \n      toast({\n        title: \"Connection Test Successful\",\n        description: \"The external connection is working properly.\",\n      });\n    },\n    onError: (error, connectionId) => {\n      // Update the connection status to 'error'\n      queryClient.setQueryData(['/api/external-connections'], (oldData: ExternalConnection[] | undefined) => {\n        if (!oldData) return oldData;\n        return oldData.map(conn => \n          conn.id === connectionId \n            ? { ...conn, status: 'error' as const, errorMessage: error.message }\n            : conn\n        );\n      });\n      \n      toast({\n        title: \"Connection Test Failed\",\n        description: error.message || \"Unable to connect to the external service.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateConnectionMutation = useMutation({\n    mutationFn: async (connectionData: Partial<ExternalConnection>) => {\n      // In production, this would update the connection via API\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Log the update in audit trail\n      await fetch('/api/audit/external-connection', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({\n          action: 'UPDATE_EXTERNAL_CONNECTION',\n          connectionId: connectionData.id,\n          changes: connectionData,\n        }),\n      });\n      \n      return connectionData;\n    },\n    onSuccess: (updatedData) => {\n      queryClient.setQueryData(['/api/external-connections'], (oldData: ExternalConnection[] | undefined) => {\n        if (!oldData) return oldData;\n        return oldData.map(conn => \n          conn.id === updatedData.id \n            ? { ...conn, ...updatedData, updatedAt: new Date().toISOString() }\n            : conn\n        );\n      });\n      \n      setIsConfigureDialogOpen(false);\n      setConnectionToEdit(null);\n      setUploadedFiles([]);\n      toast({\n        title: \"Connection Updated\",\n        description: \"Connection settings have been saved successfully.\",\n      });\n    },\n  });\n\n  const deleteConnectionMutation = useMutation({\n    mutationFn: async (connectionId: string) => {\n      // In production, this would delete the connection via API\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Log the deletion in audit trail\n      await fetch('/api/audit/external-connection', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({\n          action: 'DELETE_EXTERNAL_CONNECTION',\n          connectionId,\n        }),\n      });\n      \n      return connectionId;\n    },\n    onSuccess: (deletedId) => {\n      queryClient.setQueryData(['/api/external-connections'], (oldData: ExternalConnection[] | undefined) => {\n        if (!oldData) return oldData;\n        return oldData.filter(conn => conn.id !== deletedId);\n      });\n      \n      setIsDeleteDialogOpen(false);\n      setConnectionToDelete(null);\n      toast({\n        title: \"Connection Deleted\",\n        description: \"External connection has been permanently removed.\",\n      });\n    },\n  });\n\n  const handleCreateConnection = () => {\n    createConnectionMutation.mutate(newConnection);\n  };\n\n  const handlePresetSelection = (preset: typeof presetProviders[0]) => {\n    setNewConnection({\n      ...newConnection,\n      name: `${preset.name} ${newConnection.environment}`,\n      provider: preset.name,\n      type: preset.type as any,\n      baseUrl: preset.baseUrl,\n      description: preset.description,\n      capabilities: preset.capabilities,\n    });\n  };\n\n  const handleConfigureConnection = (connection: ExternalConnection) => {\n    setConnectionToEdit(connection);\n    setIsConfigureDialogOpen(true);\n  };\n\n  const handleUpdateConnection = () => {\n    if (!connectionToEdit) return;\n    updateConnectionMutation.mutate(connectionToEdit);\n  };\n\n  const handleViewDocs = (connection: ExternalConnection) => {\n    // Open documentation in new tab based on provider\n    const docUrls: Record<string, string> = {\n      'Availity': 'https://developer.availity.com/partner/documentation',\n      'Change Healthcare': 'https://developers.changehealthcare.com/eligibilityandbenefits',\n      'Relay Health': 'https://www.relayhealth.com/developer',\n      'Aetna': 'https://developer.aetna.com',\n      'Anthem': 'https://developer.anthem.com',\n    };\n    \n    const docUrl = docUrls[connection.provider] || connection.baseUrl;\n    window.open(docUrl, '_blank', 'noopener,noreferrer');\n  };\n\n  const handleDeleteConnection = (connection: ExternalConnection) => {\n    setConnectionToDelete(connection);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const confirmDeleteConnection = () => {\n    if (connectionToDelete) {\n      deleteConnectionMutation.mutate(connectionToDelete.id);\n    }\n  };\n\n  const handleFileUpload = (files: FileList | null) => {\n    if (!files) return;\n    \n    const validFiles = Array.from(files).filter(file => \n      file.type === 'application/json' || \n      file.type === 'application/x-yaml' || \n      file.type === 'text/yaml' ||\n      file.name.endsWith('.yaml') || \n      file.name.endsWith('.yml') || \n      file.name.endsWith('.json')\n    );\n    \n    if (validFiles.length !== files.length) {\n      toast({\n        title: \"Invalid File Type\",\n        description: \"Please upload only JSON or YAML files.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setUploadedFiles(prev => [...prev, ...validFiles]);\n    \n    // Process files and extract API configuration\n    validFiles.forEach(file => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        try {\n          const content = e.target?.result as string;\n          const config = file.type.includes('json') ? JSON.parse(content) : content;\n          \n          if (connectionToEdit) {\n            // Auto-configure from API spec\n            const updatedConnection = { ...connectionToEdit };\n            \n            if (config.swagger || config.openapi) {\n              // OpenAPI/Swagger spec\n              updatedConnection.baseUrl = config.host ? `https://${config.host}${config.basePath || ''}` : updatedConnection.baseUrl;\n              \n              if (config.paths) {\n                const methods = new Set<string>();\n                Object.values(config.paths).forEach((pathObj: any) => {\n                  Object.keys(pathObj).forEach(method => {\n                    if (['get', 'post', 'put', 'delete', 'patch'].includes(method.toLowerCase())) {\n                      methods.add(method.toUpperCase());\n                    }\n                  });\n                });\n                updatedConnection.httpMethods = Array.from(methods) as any;\n              }\n              \n              if (config.securityDefinitions?.oauth2) {\n                updatedConnection.tokenType = 'Bearer';\n                if (config.securityDefinitions.oauth2.scopes) {\n                  updatedConnection.scopes = Object.keys(config.securityDefinitions.oauth2.scopes);\n                }\n              }\n            }\n            \n            // Add file to connection config\n            updatedConnection.configFiles = updatedConnection.configFiles || [];\n            updatedConnection.configFiles.push({\n              name: file.name,\n              type: file.type.includes('json') ? 'json' : 'yaml',\n              content: config,\n              uploadedAt: new Date().toISOString(),\n            });\n            \n            setConnectionToEdit(updatedConnection);\n          }\n        } catch (error) {\n          toast({\n            title: \"File Processing Error\",\n            description: `Failed to process ${file.name}: ${error}`,\n            variant: \"destructive\",\n          });\n        }\n      };\n      reader.readAsText(file);\n    });\n  };\n\n  const addCustomCapability = () => {\n    if (newCapability.trim() && connectionToEdit) {\n      const updated = { ...connectionToEdit };\n      updated.customCapabilities = updated.customCapabilities || [];\n      if (!updated.customCapabilities.includes(newCapability.trim())) {\n        updated.customCapabilities.push(newCapability.trim());\n        setConnectionToEdit(updated);\n        setNewCapability('');\n      }\n    }\n  };\n\n  const removeCustomCapability = (capability: string) => {\n    if (connectionToEdit) {\n      const updated = { ...connectionToEdit };\n      updated.customCapabilities = updated.customCapabilities?.filter(c => c !== capability) || [];\n      setConnectionToEdit(updated);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'connected': return 'bg-green-100 text-green-800';\n      case 'disconnected': return 'bg-red-100 text-red-800';\n      case 'testing': return 'bg-yellow-100 text-yellow-800';\n      case 'error': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'connected': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'disconnected': return <XCircle className=\"h-4 w-4\" />;\n      case 'testing': return <RefreshCw className=\"h-4 w-4 animate-spin\" />;\n      case 'error': return <XCircle className=\"h-4 w-4\" />;\n      default: return <XCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto py-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">External Connections</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage connections to insurance providers, clearinghouses, and other healthcare systems\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Connection\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create External Connection</DialogTitle>\n              <DialogDescription>\n                Set up a new connection to an external healthcare system for prior authorization lookups and other services.\n              </DialogDescription>\n            </DialogHeader>\n\n            <Tabs defaultValue=\"preset\" className=\"space-y-4\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"preset\">Choose Preset</TabsTrigger>\n                <TabsTrigger value=\"custom\">Custom Configuration</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"preset\" className=\"space-y-4\">\n                <div className=\"grid gap-4\">\n                  <Label>Select a preset provider configuration:</Label>\n                  <div className=\"grid gap-3\">\n                    {presetProviders.map((preset, index) => (\n                      <Card \n                        key={index} \n                        className=\"cursor-pointer hover:border-blue-300 transition-colors\"\n                        onClick={() => handlePresetSelection(preset)}\n                      >\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                                {(() => {\n                                  const IconComponent = connectionTypes.find(t => t.value === preset.type)?.icon;\n                                  return IconComponent ? <IconComponent className=\"h-5 w-5 text-blue-600\" /> : null;\n                                })()}\n                              </div>\n                              <div>\n                                <h4 className=\"font-semibold\">{preset.name}</h4>\n                                <p className=\"text-sm text-muted-foreground\">{preset.description}</p>\n                                <div className=\"flex flex-wrap gap-1 mt-2\">\n                                  {preset.capabilities.map((capability) => (\n                                    <Badge key={capability} variant=\"secondary\" className=\"text-xs\">\n                                      {capability.replace('_', ' ')}\n                                    </Badge>\n                                  ))}\n                                </div>\n                              </div>\n                            </div>\n                            <Badge variant=\"outline\">\n                              {connectionTypes.find(t => t.value === preset.type)?.label}\n                            </Badge>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"custom\" className=\"space-y-4\">\n                <div className=\"grid gap-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"name\">Connection Name</Label>\n                      <Input\n                        id=\"name\"\n                        value={newConnection.name}\n                        onChange={(e) => setNewConnection({ ...newConnection, name: e.target.value })}\n                        placeholder=\"e.g., Availity Production\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"type\">Connection Type</Label>\n                      <Select value={newConnection.type} onValueChange={(value: any) => setNewConnection({ ...newConnection, type: value })}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {connectionTypes.map((type) => (\n                            <SelectItem key={type.value} value={type.value}>\n                              {type.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"provider\">Provider</Label>\n                      <Input\n                        id=\"provider\"\n                        value={newConnection.provider}\n                        onChange={(e) => setNewConnection({ ...newConnection, provider: e.target.value })}\n                        placeholder=\"e.g., Availity, Aetna\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"environment\">Environment</Label>\n                      <Select value={newConnection.environment} onValueChange={(value: any) => setNewConnection({ ...newConnection, environment: value })}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"sandbox\">Sandbox</SelectItem>\n                          <SelectItem value=\"test\">Test</SelectItem>\n                          <SelectItem value=\"production\">Production</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"baseUrl\">Base URL</Label>\n                    <Input\n                      id=\"baseUrl\"\n                      value={newConnection.baseUrl}\n                      onChange={(e) => setNewConnection({ ...newConnection, baseUrl: e.target.value })}\n                      placeholder=\"https://api.example.com\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"description\">Description</Label>\n                    <Textarea\n                      id=\"description\"\n                      value={newConnection.description}\n                      onChange={(e) => setNewConnection({ ...newConnection, description: e.target.value })}\n                      placeholder=\"Describe what this connection is used for...\"\n                    />\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"space-y-4\">\n              <div className=\"border-t pt-4\">\n                <Label className=\"text-base font-semibold\">Authentication</Label>\n                <div className=\"grid gap-4 mt-2\">\n                  <div>\n                    <Label htmlFor=\"clientId\">Client ID</Label>\n                    <Input\n                      id=\"clientId\"\n                      type=\"password\"\n                      value={newConnection.clientId}\n                      onChange={(e) => setNewConnection({ ...newConnection, clientId: e.target.value })}\n                      placeholder=\"Enter client ID\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"clientSecret\">Client Secret</Label>\n                    <Input\n                      id=\"clientSecret\"\n                      type=\"password\"\n                      value={newConnection.clientSecret}\n                      onChange={(e) => setNewConnection({ ...newConnection, clientSecret: e.target.value })}\n                      placeholder=\"Enter client secret\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"apiKey\">API Key (if required)</Label>\n                    <Input\n                      id=\"apiKey\"\n                      type=\"password\"\n                      value={newConnection.apiKey}\n                      onChange={(e) => setNewConnection({ ...newConnection, apiKey: e.target.value })}\n                      placeholder=\"Enter API key\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleCreateConnection}\n                  disabled={!newConnection.name || !newConnection.baseUrl || createConnectionMutation.isPending}\n                >\n                  {createConnectionMutation.isPending ? 'Creating...' : 'Create Connection'}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Configure Connection Dialog */}\n        <Dialog open={isConfigureDialogOpen} onOpenChange={setIsConfigureDialogOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Configure Connection</DialogTitle>\n              <DialogDescription>\n                Update the settings for {connectionToEdit?.name}\n              </DialogDescription>\n            </DialogHeader>\n\n            {connectionToEdit && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"edit-name\">Connection Name</Label>\n                    <Input\n                      id=\"edit-name\"\n                      value={connectionToEdit.name}\n                      onChange={(e) => setConnectionToEdit({ ...connectionToEdit, name: e.target.value })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"edit-environment\">Environment</Label>\n                    <Select \n                      value={connectionToEdit.environment} \n                      onValueChange={(value: any) => setConnectionToEdit({ ...connectionToEdit, environment: value })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"sandbox\">Sandbox</SelectItem>\n                        <SelectItem value=\"test\">Test</SelectItem>\n                        <SelectItem value=\"production\">Production</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"edit-baseUrl\">Base URL</Label>\n                  <Input\n                    id=\"edit-baseUrl\"\n                    value={connectionToEdit.baseUrl}\n                    onChange={(e) => setConnectionToEdit({ ...connectionToEdit, baseUrl: e.target.value })}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"edit-description\">Description</Label>\n                  <Textarea\n                    id=\"edit-description\"\n                    value={connectionToEdit.description}\n                    onChange={(e) => setConnectionToEdit({ ...connectionToEdit, description: e.target.value })}\n                  />\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <Label className=\"text-base font-semibold\">API Configuration Files</Label>\n                  <div className=\"mt-2 space-y-4\">\n                    <div>\n                      <Label htmlFor=\"config-upload\">Upload API Specification (.json/.yaml)</Label>\n                      <Input\n                        id=\"config-upload\"\n                        type=\"file\"\n                        multiple\n                        accept=\".json,.yaml,.yml\"\n                        onChange={(e) => handleFileUpload(e.target.files)}\n                        className=\"mt-1\"\n                      />\n                      <p className=\"text-sm text-gray-500 mt-1\">\n                        Upload OpenAPI/Swagger specifications to auto-configure connection settings\n                      </p>\n                    </div>\n                    \n                    {connectionToEdit.configFiles && connectionToEdit.configFiles.length > 0 && (\n                      <div>\n                        <Label className=\"text-sm font-medium\">Uploaded Configuration Files</Label>\n                        <div className=\"mt-2 space-y-2\">\n                          {connectionToEdit.configFiles.map((file, index) => (\n                            <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                              <div className=\"flex items-center space-x-2\">\n                                <File className=\"h-4 w-4 text-blue-600\" />\n                                <span className=\"text-sm font-medium\">{file.name}</span>\n                                <Badge variant=\"outline\">{file.type.toUpperCase()}</Badge>\n                              </div>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  const updated = { ...connectionToEdit };\n                                  updated.configFiles = updated.configFiles?.filter((_, i) => i !== index);\n                                  setConnectionToEdit(updated);\n                                }}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <Label className=\"text-base font-semibold\">Authentication</Label>\n                  <div className=\"grid gap-4 mt-2\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"edit-clientId\">Client ID</Label>\n                        <Input\n                          id=\"edit-clientId\"\n                          type=\"password\"\n                          value={connectionToEdit.clientId || ''}\n                          onChange={(e) => setConnectionToEdit({ ...connectionToEdit, clientId: e.target.value })}\n                          placeholder=\"Enter client ID\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"edit-clientSecret\">Client Secret</Label>\n                        <Input\n                          id=\"edit-clientSecret\"\n                          type=\"password\"\n                          value={connectionToEdit.clientSecret || ''}\n                          onChange={(e) => setConnectionToEdit({ ...connectionToEdit, clientSecret: e.target.value })}\n                          placeholder=\"Enter client secret\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"edit-apiKey\">API Key (if required)</Label>\n                      <Input\n                        id=\"edit-apiKey\"\n                        type=\"password\"\n                        value={connectionToEdit.apiKey || ''}\n                        onChange={(e) => setConnectionToEdit({ ...connectionToEdit, apiKey: e.target.value })}\n                        placeholder=\"Enter API key\"\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"edit-oauthToken\">OAuth2 Token</Label>\n                        <Input\n                          id=\"edit-oauthToken\"\n                          type=\"password\"\n                          value={connectionToEdit.oauthToken || ''}\n                          onChange={(e) => setConnectionToEdit({ ...connectionToEdit, oauthToken: e.target.value })}\n                          placeholder=\"Enter OAuth2 token\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"edit-tokenType\">Token Type</Label>\n                        <Select \n                          value={connectionToEdit.tokenType || 'Bearer'} \n                          onValueChange={(value: any) => setConnectionToEdit({ ...connectionToEdit, tokenType: value })}\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Bearer\">Bearer</SelectItem>\n                            <SelectItem value=\"Basic\">Basic</SelectItem>\n                            <SelectItem value=\"API-Key\">API-Key</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"edit-refreshToken\">Refresh Token</Label>\n                        <Input\n                          id=\"edit-refreshToken\"\n                          type=\"password\"\n                          value={connectionToEdit.refreshToken || ''}\n                          onChange={(e) => setConnectionToEdit({ ...connectionToEdit, refreshToken: e.target.value })}\n                          placeholder=\"Enter refresh token\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"edit-tokenExpiry\">Token Expiry</Label>\n                        <Input\n                          id=\"edit-tokenExpiry\"\n                          type=\"datetime-local\"\n                          value={connectionToEdit.tokenExpiry || ''}\n                          onChange={(e) => setConnectionToEdit({ ...connectionToEdit, tokenExpiry: e.target.value })}\n                        />\n                      </div>\n                    </div>\n\n                    {connectionToEdit.scopes && connectionToEdit.scopes.length > 0 && (\n                      <div>\n                        <Label className=\"text-sm font-medium\">OAuth2 Scopes</Label>\n                        <div className=\"mt-2 flex flex-wrap gap-2\">\n                          {connectionToEdit.scopes.map((scope, index) => (\n                            <Badge key={index} variant=\"secondary\">{scope}</Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <Label className=\"text-base font-semibold\">API Configuration</Label>\n                  <div className=\"grid gap-4 mt-2\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"edit-timeout\">Timeout (ms)</Label>\n                        <Input\n                          id=\"edit-timeout\"\n                          type=\"number\"\n                          value={connectionToEdit.timeout || 30000}\n                          onChange={(e) => setConnectionToEdit({ ...connectionToEdit, timeout: parseInt(e.target.value) })}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"edit-retryCount\">Retry Count</Label>\n                        <Input\n                          id=\"edit-retryCount\"\n                          type=\"number\"\n                          value={connectionToEdit.retryCount || 3}\n                          onChange={(e) => setConnectionToEdit({ ...connectionToEdit, retryCount: parseInt(e.target.value) })}\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm font-medium\">Supported HTTP Methods</Label>\n                      <div className=\"mt-2 flex flex-wrap gap-2\">\n                        {['GET', 'POST', 'PUT', 'DELETE', 'PATCH'].map((method) => (\n                          <label key={method} className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              checked={connectionToEdit.httpMethods?.includes(method as any) || false}\n                              onChange={(e) => {\n                                const updated = { ...connectionToEdit };\n                                updated.httpMethods = updated.httpMethods || [];\n                                if (e.target.checked) {\n                                  if (!updated.httpMethods.includes(method as any)) {\n                                    updated.httpMethods.push(method as any);\n                                  }\n                                } else {\n                                  updated.httpMethods = updated.httpMethods.filter(m => m !== method);\n                                }\n                                setConnectionToEdit(updated);\n                              }}\n                            />\n                            <span className=\"text-sm\">{method}</span>\n                          </label>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <Label className=\"text-base font-semibold\">Connection Capabilities</Label>\n                  <div className=\"mt-2 space-y-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium\">Standard Capabilities</Label>\n                      <div className=\"mt-2 flex flex-wrap gap-2\">\n                        {connectionToEdit.capabilities.map((capability, index) => (\n                          <Badge key={index} variant=\"default\">{capability}</Badge>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm font-medium\">Custom Capabilities</Label>\n                      <div className=\"flex items-center space-x-2 mt-2\">\n                        <Input\n                          value={newCapability}\n                          onChange={(e) => setNewCapability(e.target.value)}\n                          placeholder=\"Enter custom capability label\"\n                          onKeyPress={(e) => e.key === 'Enter' && addCustomCapability()}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={addCustomCapability}\n                        >\n                          Add\n                        </Button>\n                      </div>\n                      {connectionToEdit.customCapabilities && connectionToEdit.customCapabilities.length > 0 && (\n                        <div className=\"mt-2 flex flex-wrap gap-2\">\n                          {connectionToEdit.customCapabilities.map((capability, index) => (\n                            <Badge key={index} variant=\"outline\" className=\"cursor-pointer\" onClick={() => removeCustomCapability(capability)}>\n                              {capability} <Trash2 className=\"h-3 w-3 ml-1\" />\n                            </Badge>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"edit-active\"\n                      checked={connectionToEdit.isActive}\n                      onCheckedChange={(checked) => setConnectionToEdit({ ...connectionToEdit, isActive: checked })}\n                    />\n                    <Label htmlFor=\"edit-active\">Active Connection</Label>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button variant=\"outline\" onClick={() => setIsConfigureDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={handleUpdateConnection}\n                    disabled={!connectionToEdit.name || !connectionToEdit.baseUrl || updateConnectionMutation.isPending}\n                  >\n                    {updateConnectionMutation.isPending ? 'Updating...' : 'Save Changes'}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Delete Connection Dialog */}\n        <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Delete Connection</DialogTitle>\n              <DialogDescription>\n                Are you sure you want to delete the connection \"{connectionToDelete?.name}\"? This action cannot be undone.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"flex justify-end space-x-2 mt-6\">\n              <Button variant=\"outline\" onClick={() => setIsDeleteDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button \n                variant=\"destructive\"\n                onClick={confirmDeleteConnection}\n                disabled={deleteConnectionMutation.isPending}\n              >\n                {deleteConnectionMutation.isPending ? 'Deleting...' : 'Delete Connection'}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Connection Status Overview */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Connections</CardTitle>\n            <Globe className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{connections.length}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {connections.filter(c => c.status === 'connected').length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Inactive</CardTitle>\n            <XCircle className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">\n              {connections.filter(c => c.status !== 'connected').length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Last Sync</CardTitle>\n            <RefreshCw className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {connections.find(c => c.lastSync) ? '2 min' : 'Never'}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Connections List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Configured Connections</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <RefreshCw className=\"h-6 w-6 animate-spin mr-2\" />\n              Loading connections...\n            </div>\n          ) : connections.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Globe className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No external connections configured yet.</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Add your first connection to start pulling prior authorization codes from external systems.\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {connections.map((connection) => (\n                <Card key={connection.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-4\">\n                        <div className=\"p-3 bg-blue-100 rounded-lg\">\n                          {(() => {\n                            const IconComponent = connectionTypes.find(t => t.value === connection.type)?.icon;\n                            return IconComponent ? <IconComponent className=\"h-6 w-6 text-blue-600\" /> : null;\n                          })()}\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            <h3 className=\"text-lg font-semibold\">{connection.name}</h3>\n                            <Badge className={getStatusColor(connection.status)}>\n                              {getStatusIcon(connection.status)}\n                              <span className=\"ml-1 capitalize\">{connection.status}</span>\n                            </Badge>\n                            <Badge variant=\"outline\">{connection.environment}</Badge>\n                          </div>\n                          <p className=\"text-muted-foreground mb-3\">{connection.description}</p>\n                          <div className=\"flex flex-wrap gap-1 mb-3\">\n                            {connection.capabilities.map((capability) => (\n                              <Badge key={capability} variant=\"secondary\" className=\"text-xs\">\n                                {capability.replace('_', ' ')}\n                              </Badge>\n                            ))}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground space-y-1\">\n                            <div>Provider: {connection.provider}</div>\n                            <div>Base URL: {connection.baseUrl}</div>\n                            {connection.lastConnected && (\n                              <div>Last Connected: {new Date(connection.lastConnected).toLocaleString()}</div>\n                            )}\n                            {connection.errorMessage && (\n                              <div className=\"text-red-600\">Error: {connection.errorMessage}</div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => testConnectionMutation.mutate(connection.id)}\n                          disabled={testConnectionMutation.isPending}\n                        >\n                          {testConnectionMutation.isPending ? (\n                            <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                          ) : (\n                            <RefreshCw className=\"h-4 w-4\" />\n                          )}\n                          Test\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleConfigureConnection(connection)}\n                        >\n                          <Settings className=\"h-4 w-4 mr-1\" />\n                          Configure\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleViewDocs(connection)}\n                        >\n                          <ExternalLink className=\"h-4 w-4 mr-1\" />\n                          View Docs\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleDeleteConnection(connection)}\n                          className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                        >\n                          <Trash2 className=\"h-4 w-4 mr-1\" />\n                          Delete\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":52340},"client/src/pages/prior-auth-generator.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { FileText, Download, Mail, Code } from \"lucide-react\";\n\nexport default function PriorAuthGenerator() {\n  const [selectedAuthorization, setSelectedAuthorization] = useState(\"\");\n  const [outputFormat, setOutputFormat] = useState(\"pdf\");\n  const [customNotes, setCustomNotes] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch authorizations\n  const { data: authorizations = [], isLoading } = useQuery({\n    queryKey: [\"/api/authorizations\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/authorizations\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch authorizations\");\n      return response.json();\n    },\n  });\n\n  // Generate package mutation\n  const generateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(\"/api/prior-auth/generate-package\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to generate package\");\n      return response.json();\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Package Generated\",\n        description: `Prior authorization package generated successfully in ${outputFormat.toUpperCase()} format.`,\n      });\n      \n      if (result.downloadUrl) {\n        // Trigger download with authentication\n        const token = localStorage.getItem(\"token\");\n        const downloadUrl = result.downloadUrl.includes('?') \n          ? `${result.downloadUrl}&token=${token}`\n          : `${result.downloadUrl}?token=${token}`;\n        \n        const link = document.createElement(\"a\");\n        link.href = downloadUrl;\n        link.download = result.fileName;\n        link.click();\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Generation Failed\",\n        description: error.message || \"Failed to generate prior authorization package.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerate = () => {\n    if (!selectedAuthorization) {\n      toast({\n        title: \"Selection Required\",\n        description: \"Please select a prior authorization to generate package for.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateMutation.mutate({\n      authorizationId: selectedAuthorization,\n      format: outputFormat,\n      customNotes,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Generate Prior Authorization Package</h2>\n          <p className=\"text-gray-600\">Create formatted packages for insurance submission</p>\n        </div>\n        \n        <div className=\"animate-pulse\">\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Generate Prior Authorization Package</h2>\n        <p className=\"text-gray-600\">Create formatted packages for insurance submission</p>\n      </div>\n\n      {/* Main Form */}\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle>Package Generator</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Authorization Selection */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"authorization\">Select Prior Authorization</Label>\n            <Select value={selectedAuthorization} onValueChange={setSelectedAuthorization}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Choose an authorization...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {authorizations.map((auth: any) => (\n                  <SelectItem key={auth.id} value={auth.id.toString()}>\n                    {auth.authorizationId} - {auth.treatmentType} ({auth.patient?.firstName} {auth.patient?.lastName})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Output Format Selection */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"format\">Output Format</Label>\n            <Select value={outputFormat} onValueChange={setOutputFormat}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"pdf\">\n                  <div className=\"flex items-center\">\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    PDF Document\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"email\">\n                  <div className=\"flex items-center\">\n                    <Mail className=\"h-4 w-4 mr-2\" />\n                    Pre-written Email\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"json\">\n                  <div className=\"flex items-center\">\n                    <Code className=\"h-4 w-4 mr-2\" />\n                    JSON Format\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Custom Notes */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"notes\">Additional Notes (Optional)</Label>\n            <Textarea\n              id=\"notes\"\n              placeholder=\"Add any additional notes or comments...\"\n              value={customNotes}\n              onChange={(e) => setCustomNotes(e.target.value)}\n              rows={4}\n            />\n          </div>\n\n          {/* Selected Authorization Details */}\n          {selectedAuthorization && (\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <h4 className=\"font-semibold mb-2\">Selected Authorization Details:</h4>\n              {(() => {\n                const auth = authorizations.find((a: any) => a.id.toString() === selectedAuthorization);\n                return auth ? (\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"font-medium\">Authorization ID:</span> {auth.authorizationId}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Patient:</span> {auth.patient?.firstName} {auth.patient?.lastName}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Treatment:</span> {auth.treatmentType}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">CPT Code:</span> {auth.cptCode}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Status:</span> {auth.status}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Insurance:</span> {auth.insurance?.insuranceProvider?.name}\n                    </div>\n                  </div>\n                ) : null;\n              })()}\n            </div>\n          )}\n\n          {/* Generate Button */}\n          <Button \n            onClick={handleGenerate} \n            disabled={!selectedAuthorization || generateMutation.isPending}\n            className=\"w-full\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            {generateMutation.isPending ? \"Generating...\" : `Generate ${outputFormat.toUpperCase()} Package`}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Format Information */}\n      <Card className=\"healthcare-card\">\n        <CardHeader>\n          <CardTitle>Output Format Information</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start space-x-3\">\n              <FileText className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n              <div>\n                <h4 className=\"font-semibold\">PDF Document</h4>\n                <p className=\"text-sm text-gray-600\">\n                  Complete formatted document ready for printing or email attachment. Includes all patient information, \n                  medical justification, and required forms.\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-3\">\n              <Mail className=\"h-5 w-5 text-green-600 mt-0.5\" />\n              <div>\n                <h4 className=\"font-semibold\">Pre-written Email</h4>\n                <p className=\"text-sm text-gray-600\">\n                  Template email with subject line and body text ready to send to insurance provider. \n                  Includes all necessary information formatted for email submission.\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-3\">\n              <Code className=\"h-5 w-5 text-purple-600 mt-0.5\" />\n              <div>\n                <h4 className=\"font-semibold\">JSON Format</h4>\n                <p className=\"text-sm text-gray-600\">\n                  Structured data format for API integration or custom processing. \n                  Contains all authorization data in machine-readable format.\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10193},"client/src/components/authorization/status-dropdown.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n\ninterface StatusDropdownProps {\n  authorizationId: number;\n  currentStatus: string;\n  onStatusChange?: (newStatus: string) => void;\n}\n\nconst statusOptions = [\n  { value: \"pending\", label: \"Pending\", color: \"bg-yellow-100 text-yellow-800\" },\n  { value: \"approved\", label: \"Approved\", color: \"bg-green-100 text-green-800\" },\n  { value: \"denied\", label: \"Denied\", color: \"bg-red-100 text-red-800\" },\n  { value: \"in_review\", label: \"In Review\", color: \"bg-blue-100 text-blue-800\" },\n  { value: \"appealed\", label: \"Appealed\", color: \"bg-purple-100 text-purple-800\" },\n  { value: \"expired\", label: \"Expired\", color: \"bg-gray-100 text-gray-800\" },\n];\n\nexport default function StatusDropdown({ \n  authorizationId, \n  currentStatus, \n  onStatusChange \n}: StatusDropdownProps) {\n  const [isUpdating, setIsUpdating] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async (newStatus: string) => {\n      const response = await fetch(`/api/authorizations/${authorizationId}/status`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n        body: JSON.stringify({ status: newStatus }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to update status\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"Status Updated\",\n        description: `Authorization status changed to ${variables}`,\n      });\n      \n      // Invalidate related queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/authorizations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      \n      onStatusChange?.(variables);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update authorization status\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsUpdating(false);\n    },\n  });\n\n  const handleStatusChange = (newStatus: string) => {\n    if (newStatus === currentStatus) return;\n    \n    setIsUpdating(true);\n    updateStatusMutation.mutate(newStatus);\n  };\n\n  return (\n    <Select \n      value={currentStatus} \n      onValueChange={handleStatusChange}\n      disabled={isUpdating}\n    >\n      <SelectTrigger className=\"w-32\">\n        <SelectValue />\n      </SelectTrigger>\n      <SelectContent>\n        {statusOptions.map((option) => (\n          <SelectItem key={option.value} value={option.value}>\n            <div className=\"flex items-center space-x-2\">\n              <div className={`px-2 py-1 rounded-full text-xs font-medium ${option.color}`}>\n                {option.label}\n              </div>\n            </div>\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}","size_bytes":3211}}}